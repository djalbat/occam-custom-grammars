'use strict';

var lexers = require('occam-lexers'),
    parsers = require('occam-parsers'),
    necessary = require('necessary');

var arrayUtilities = necessary.arrayUtilities,
    push = arrayUtilities.push,
    BNFLexer = lexers.BNFLexer,
    BNFParser = parsers.BNFParser,
    FlorenceParser = parsers.FlorenceParser,
    termDefaultCustomGrammarBNF = parsers.termDefaultCustomGrammarBNF,
    statementDefaultCustomGrammarBNF = parsers.statementDefaultCustomGrammarBNF,
    expressionDefaultCustomGrammarBNF = parsers.expressionDefaultCustomGrammarBNF,
    metastatementDefaultCustomGrammarBNF = parsers.metastatementDefaultCustomGrammarBNF;


var bnfLexer = BNFLexer.fromNothing(),
    bnfParser = BNFParser.fromNothing();

function florenceParserFromCombinedCustomGrammars(combinedCustomGrammars) {
      var bnf = FlorenceParser.bnf,
          florenceParser = florenceParserFromBNFAndCombinedCustomGrammars(bnf, combinedCustomGrammars);


      return florenceParser;
}

function florenceParserFromBNFAndCombinedCustomGrammars(bnf, combinedCustomGrammars) {
      var combinedCustomGrammarsRules = combinedCustomGrammars.getRules(),
          tokens = bnfLexer.tokensFromBNF(bnf),
          rules = bnfParser.rulesFromTokens(tokens);

      push(rules, combinedCustomGrammarsRules);

      var florenceParser = new FlorenceParser(rules);

      return florenceParser;
}

module.exports = {
      termDefaultCustomGrammarBNF: termDefaultCustomGrammarBNF,
      statementDefaultCustomGrammarBNF: statementDefaultCustomGrammarBNF,
      expressionDefaultCustomGrammarBNF: expressionDefaultCustomGrammarBNF,
      metastatementDefaultCustomGrammarBNF: metastatementDefaultCustomGrammarBNF,
      florenceParserFromCombinedCustomGrammars: florenceParserFromCombinedCustomGrammars,
      florenceParserFromBNFAndCombinedCustomGrammars: florenceParserFromBNFAndCombinedCustomGrammars
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9wYXJzZXJzLmpzIl0sIm5hbWVzIjpbImxleGVycyIsInJlcXVpcmUiLCJwYXJzZXJzIiwibmVjZXNzYXJ5IiwiYXJyYXlVdGlsaXRpZXMiLCJwdXNoIiwiQk5GTGV4ZXIiLCJCTkZQYXJzZXIiLCJGbG9yZW5jZVBhcnNlciIsInRlcm1EZWZhdWx0Q3VzdG9tR3JhbW1hckJORiIsInN0YXRlbWVudERlZmF1bHRDdXN0b21HcmFtbWFyQk5GIiwiZXhwcmVzc2lvbkRlZmF1bHRDdXN0b21HcmFtbWFyQk5GIiwibWV0YXN0YXRlbWVudERlZmF1bHRDdXN0b21HcmFtbWFyQk5GIiwiYm5mTGV4ZXIiLCJmcm9tTm90aGluZyIsImJuZlBhcnNlciIsImZsb3JlbmNlUGFyc2VyRnJvbUNvbWJpbmVkQ3VzdG9tR3JhbW1hcnMiLCJjb21iaW5lZEN1c3RvbUdyYW1tYXJzIiwiYm5mIiwiZmxvcmVuY2VQYXJzZXIiLCJmbG9yZW5jZVBhcnNlckZyb21CTkZBbmRDb21iaW5lZEN1c3RvbUdyYW1tYXJzIiwiY29tYmluZWRDdXN0b21HcmFtbWFyc1J1bGVzIiwiZ2V0UnVsZXMiLCJ0b2tlbnMiLCJ0b2tlbnNGcm9tQk5GIiwicnVsZXMiLCJydWxlc0Zyb21Ub2tlbnMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxTQUFTQyxRQUFRLGNBQVIsQ0FBZjtBQUFBLElBQ01DLFVBQVVELFFBQVEsZUFBUixDQURoQjtBQUFBLElBRU1FLFlBQVlGLFFBQVEsV0FBUixDQUZsQjs7QUFJTSxJQUFFRyxjQUFGLEdBQXFCRCxTQUFyQixDQUFFQyxjQUFGO0FBQUEsSUFDRUMsSUFERixHQUNXRCxjQURYLENBQ0VDLElBREY7QUFBQSxJQUVFQyxRQUZGLEdBRWVOLE1BRmYsQ0FFRU0sUUFGRjtBQUFBLElBR0VDLFNBSEYsR0FHZ0NMLE9BSGhDLENBR0VLLFNBSEY7QUFBQSxJQUdhQyxjQUhiLEdBR2dDTixPQUhoQyxDQUdhTSxjQUhiO0FBQUEsSUFJRUMsMkJBSkYsR0FJNklQLE9BSjdJLENBSUVPLDJCQUpGO0FBQUEsSUFJK0JDLGdDQUovQixHQUk2SVIsT0FKN0ksQ0FJK0JRLGdDQUovQjtBQUFBLElBSWlFQyxpQ0FKakUsR0FJNklULE9BSjdJLENBSWlFUyxpQ0FKakU7QUFBQSxJQUlvR0Msb0NBSnBHLEdBSTZJVixPQUo3SSxDQUlvR1Usb0NBSnBHOzs7QUFNTixJQUFNQyxXQUFXUCxTQUFTUSxXQUFULEVBQWpCO0FBQUEsSUFDTUMsWUFBWVIsVUFBVU8sV0FBVixFQURsQjs7QUFHQSxTQUFTRSx3Q0FBVCxDQUFrREMsc0JBQWxELEVBQTBFO0FBQ2xFLFVBQUVDLEdBQUYsR0FBVVYsY0FBVixDQUFFVSxHQUFGO0FBQUEsVUFDQUMsY0FEQSxHQUNpQkMsK0NBQStDRixHQUEvQyxFQUFvREQsc0JBQXBELENBRGpCOzs7QUFHTixhQUFPRSxjQUFQO0FBQ0Q7O0FBRUQsU0FBU0MsOENBQVQsQ0FBd0RGLEdBQXhELEVBQTZERCxzQkFBN0QsRUFBcUY7QUFDbkYsVUFBTUksOEJBQThCSix1QkFBdUJLLFFBQXZCLEVBQXBDO0FBQUEsVUFDTUMsU0FBU1YsU0FBU1csYUFBVCxDQUF1Qk4sR0FBdkIsQ0FEZjtBQUFBLFVBRU1PLFFBQVFWLFVBQVVXLGVBQVYsQ0FBMEJILE1BQTFCLENBRmQ7O0FBSUFsQixXQUFLb0IsS0FBTCxFQUFZSiwyQkFBWjs7QUFFQSxVQUFNRixpQkFBaUIsSUFBSVgsY0FBSixDQUFtQmlCLEtBQW5CLENBQXZCOztBQUVBLGFBQU9OLGNBQVA7QUFDRDs7QUFFRFEsT0FBT0MsT0FBUCxHQUFpQjtBQUNmbkIsOERBRGU7QUFFZkMsd0VBRmU7QUFHZkMsMEVBSGU7QUFJZkMsZ0ZBSmU7QUFLZkksd0ZBTGU7QUFNZkk7QUFOZSxDQUFqQiIsImZpbGUiOiJwYXJzZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBsZXhlcnMgPSByZXF1aXJlKCdvY2NhbS1sZXhlcnMnKSxcbiAgICAgIHBhcnNlcnMgPSByZXF1aXJlKCdvY2NhbS1wYXJzZXJzJyksXG4gICAgICBuZWNlc3NhcnkgPSByZXF1aXJlKCduZWNlc3NhcnknKTtcblxuY29uc3QgeyBhcnJheVV0aWxpdGllcyB9ID0gbmVjZXNzYXJ5LFxuICAgICAgeyBwdXNoIH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgQk5GTGV4ZXIgfSA9IGxleGVycyxcbiAgICAgIHsgQk5GUGFyc2VyLCBGbG9yZW5jZVBhcnNlciB9ID0gcGFyc2VycyxcbiAgICAgIHsgdGVybURlZmF1bHRDdXN0b21HcmFtbWFyQk5GLCBzdGF0ZW1lbnREZWZhdWx0Q3VzdG9tR3JhbW1hckJORiwgZXhwcmVzc2lvbkRlZmF1bHRDdXN0b21HcmFtbWFyQk5GLCBtZXRhc3RhdGVtZW50RGVmYXVsdEN1c3RvbUdyYW1tYXJCTkYgfSA9IHBhcnNlcnM7XG5cbmNvbnN0IGJuZkxleGVyID0gQk5GTGV4ZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgIGJuZlBhcnNlciA9IEJORlBhcnNlci5mcm9tTm90aGluZygpO1xuXG5mdW5jdGlvbiBmbG9yZW5jZVBhcnNlckZyb21Db21iaW5lZEN1c3RvbUdyYW1tYXJzKGNvbWJpbmVkQ3VzdG9tR3JhbW1hcnMpIHtcbiAgY29uc3QgeyBibmYgfSA9IEZsb3JlbmNlUGFyc2VyLFxuICAgICAgICBmbG9yZW5jZVBhcnNlciA9IGZsb3JlbmNlUGFyc2VyRnJvbUJORkFuZENvbWJpbmVkQ3VzdG9tR3JhbW1hcnMoYm5mLCBjb21iaW5lZEN1c3RvbUdyYW1tYXJzKTtcblxuICByZXR1cm4gZmxvcmVuY2VQYXJzZXI7XG59XG5cbmZ1bmN0aW9uIGZsb3JlbmNlUGFyc2VyRnJvbUJORkFuZENvbWJpbmVkQ3VzdG9tR3JhbW1hcnMoYm5mLCBjb21iaW5lZEN1c3RvbUdyYW1tYXJzKSB7XG4gIGNvbnN0IGNvbWJpbmVkQ3VzdG9tR3JhbW1hcnNSdWxlcyA9IGNvbWJpbmVkQ3VzdG9tR3JhbW1hcnMuZ2V0UnVsZXMoKSxcbiAgICAgICAgdG9rZW5zID0gYm5mTGV4ZXIudG9rZW5zRnJvbUJORihibmYpLFxuICAgICAgICBydWxlcyA9IGJuZlBhcnNlci5ydWxlc0Zyb21Ub2tlbnModG9rZW5zKTtcblxuICBwdXNoKHJ1bGVzLCBjb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMpO1xuXG4gIGNvbnN0IGZsb3JlbmNlUGFyc2VyID0gbmV3IEZsb3JlbmNlUGFyc2VyKHJ1bGVzKTtcblxuICByZXR1cm4gZmxvcmVuY2VQYXJzZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB0ZXJtRGVmYXVsdEN1c3RvbUdyYW1tYXJCTkYsXG4gIHN0YXRlbWVudERlZmF1bHRDdXN0b21HcmFtbWFyQk5GLFxuICBleHByZXNzaW9uRGVmYXVsdEN1c3RvbUdyYW1tYXJCTkYsXG4gIG1ldGFzdGF0ZW1lbnREZWZhdWx0Q3VzdG9tR3JhbW1hckJORixcbiAgZmxvcmVuY2VQYXJzZXJGcm9tQ29tYmluZWRDdXN0b21HcmFtbWFycyxcbiAgZmxvcmVuY2VQYXJzZXJGcm9tQk5GQW5kQ29tYmluZWRDdXN0b21HcmFtbWFyc1xufTtcbiJdfQ==