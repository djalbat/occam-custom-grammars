'use strict';

var lexers = require('occam-lexers'),
    parsers = require('occam-parsers'),
    necessary = require('necessary');

var arrayUtilities = necessary.arrayUtilities,
    push = arrayUtilities.push,
    BNFLexer = lexers.BNFLexer,
    BNFParser = parsers.BNFParser,
    FlorenceParser = parsers.FlorenceParser,
    termDefaultCustomGrammarBNF = parsers.termDefaultCustomGrammarBNF,
    statementDefaultCustomGrammarBNF = parsers.statementDefaultCustomGrammarBNF,
    expressionDefaultCustomGrammarBNF = parsers.expressionDefaultCustomGrammarBNF,
    metastatementDefaultCustomGrammarBNF = parsers.metastatementDefaultCustomGrammarBNF;


var bnfLexer = BNFLexer.fromNothing(),
    bnfParser = BNFParser.fromNothing();

function florenceParserFromCombinedCustomGrammars(combinedCustomGrammars) {
      var bnf = FlorenceParser.bnf,
          florenceParser = florenceParserFromBNFAndCombinedCustomGrammars(bnf, combinedCustomGrammars);


      return florenceParser;
}

function florenceParserFromBNFAndCombinedCustomGrammars(bnf, combinedCustomGrammars) {
      var combinedCustomGrammarsRules = combinedCustomGrammars.getRules(),
          tokens = bnfLexer.tokensFromBNF(bnf),
          rulesNode = bnfParser.rulesNodeFromTokens(tokens),
          rules = BNFParser.generateRules(rulesNode);

      push(rules, combinedCustomGrammarsRules);

      var florenceParser = new FlorenceParser(rules);

      return florenceParser;
}

module.exports = {
      termDefaultCustomGrammarBNF: termDefaultCustomGrammarBNF,
      statementDefaultCustomGrammarBNF: statementDefaultCustomGrammarBNF,
      expressionDefaultCustomGrammarBNF: expressionDefaultCustomGrammarBNF,
      metastatementDefaultCustomGrammarBNF: metastatementDefaultCustomGrammarBNF,
      florenceParserFromCombinedCustomGrammars: florenceParserFromCombinedCustomGrammars,
      florenceParserFromBNFAndCombinedCustomGrammars: florenceParserFromBNFAndCombinedCustomGrammars
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9wYXJzZXJzLmpzIl0sIm5hbWVzIjpbImxleGVycyIsInJlcXVpcmUiLCJwYXJzZXJzIiwibmVjZXNzYXJ5IiwiYXJyYXlVdGlsaXRpZXMiLCJwdXNoIiwiQk5GTGV4ZXIiLCJCTkZQYXJzZXIiLCJGbG9yZW5jZVBhcnNlciIsInRlcm1EZWZhdWx0Q3VzdG9tR3JhbW1hckJORiIsInN0YXRlbWVudERlZmF1bHRDdXN0b21HcmFtbWFyQk5GIiwiZXhwcmVzc2lvbkRlZmF1bHRDdXN0b21HcmFtbWFyQk5GIiwibWV0YXN0YXRlbWVudERlZmF1bHRDdXN0b21HcmFtbWFyQk5GIiwiYm5mTGV4ZXIiLCJmcm9tTm90aGluZyIsImJuZlBhcnNlciIsImZsb3JlbmNlUGFyc2VyRnJvbUNvbWJpbmVkQ3VzdG9tR3JhbW1hcnMiLCJjb21iaW5lZEN1c3RvbUdyYW1tYXJzIiwiYm5mIiwiZmxvcmVuY2VQYXJzZXIiLCJmbG9yZW5jZVBhcnNlckZyb21CTkZBbmRDb21iaW5lZEN1c3RvbUdyYW1tYXJzIiwiY29tYmluZWRDdXN0b21HcmFtbWFyc1J1bGVzIiwiZ2V0UnVsZXMiLCJ0b2tlbnMiLCJ0b2tlbnNGcm9tQk5GIiwicnVsZXNOb2RlIiwicnVsZXNOb2RlRnJvbVRva2VucyIsInJ1bGVzIiwiZ2VuZXJhdGVSdWxlcyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFNBQVNDLFFBQVEsY0FBUixDQUFmO0FBQUEsSUFDTUMsVUFBVUQsUUFBUSxlQUFSLENBRGhCO0FBQUEsSUFFTUUsWUFBWUYsUUFBUSxXQUFSLENBRmxCOztBQUlNLElBQUVHLGNBQUYsR0FBcUJELFNBQXJCLENBQUVDLGNBQUY7QUFBQSxJQUNFQyxJQURGLEdBQ1dELGNBRFgsQ0FDRUMsSUFERjtBQUFBLElBRUVDLFFBRkYsR0FFZU4sTUFGZixDQUVFTSxRQUZGO0FBQUEsSUFHRUMsU0FIRixHQUdnQ0wsT0FIaEMsQ0FHRUssU0FIRjtBQUFBLElBR2FDLGNBSGIsR0FHZ0NOLE9BSGhDLENBR2FNLGNBSGI7QUFBQSxJQUlFQywyQkFKRixHQUk2SVAsT0FKN0ksQ0FJRU8sMkJBSkY7QUFBQSxJQUkrQkMsZ0NBSi9CLEdBSTZJUixPQUo3SSxDQUkrQlEsZ0NBSi9CO0FBQUEsSUFJaUVDLGlDQUpqRSxHQUk2SVQsT0FKN0ksQ0FJaUVTLGlDQUpqRTtBQUFBLElBSW9HQyxvQ0FKcEcsR0FJNklWLE9BSjdJLENBSW9HVSxvQ0FKcEc7OztBQU1OLElBQU1DLFdBQVdQLFNBQVNRLFdBQVQsRUFBakI7QUFBQSxJQUNNQyxZQUFZUixVQUFVTyxXQUFWLEVBRGxCOztBQUdBLFNBQVNFLHdDQUFULENBQWtEQyxzQkFBbEQsRUFBMEU7QUFDbEUsVUFBRUMsR0FBRixHQUFVVixjQUFWLENBQUVVLEdBQUY7QUFBQSxVQUNBQyxjQURBLEdBQ2lCQywrQ0FBK0NGLEdBQS9DLEVBQW9ERCxzQkFBcEQsQ0FEakI7OztBQUdOLGFBQU9FLGNBQVA7QUFDRDs7QUFFRCxTQUFTQyw4Q0FBVCxDQUF3REYsR0FBeEQsRUFBNkRELHNCQUE3RCxFQUFxRjtBQUNuRixVQUFNSSw4QkFBOEJKLHVCQUF1QkssUUFBdkIsRUFBcEM7QUFBQSxVQUNNQyxTQUFTVixTQUFTVyxhQUFULENBQXVCTixHQUF2QixDQURmO0FBQUEsVUFFTU8sWUFBWVYsVUFBVVcsbUJBQVYsQ0FBOEJILE1BQTlCLENBRmxCO0FBQUEsVUFHTUksUUFBUXBCLFVBQVVxQixhQUFWLENBQXdCSCxTQUF4QixDQUhkOztBQUtBcEIsV0FBS3NCLEtBQUwsRUFBWU4sMkJBQVo7O0FBRUEsVUFBTUYsaUJBQWlCLElBQUlYLGNBQUosQ0FBbUJtQixLQUFuQixDQUF2Qjs7QUFFQSxhQUFPUixjQUFQO0FBQ0Q7O0FBRURVLE9BQU9DLE9BQVAsR0FBaUI7QUFDZnJCLDhEQURlO0FBRWZDLHdFQUZlO0FBR2ZDLDBFQUhlO0FBSWZDLGdGQUplO0FBS2ZJLHdGQUxlO0FBTWZJO0FBTmUsQ0FBakIiLCJmaWxlIjoicGFyc2Vycy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbGV4ZXJzID0gcmVxdWlyZSgnb2NjYW0tbGV4ZXJzJyksXG4gICAgICBwYXJzZXJzID0gcmVxdWlyZSgnb2NjYW0tcGFyc2VycycpLFxuICAgICAgbmVjZXNzYXJ5ID0gcmVxdWlyZSgnbmVjZXNzYXJ5Jyk7XG5cbmNvbnN0IHsgYXJyYXlVdGlsaXRpZXMgfSA9IG5lY2Vzc2FyeSxcbiAgICAgIHsgcHVzaCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IEJORkxleGVyIH0gPSBsZXhlcnMsXG4gICAgICB7IEJORlBhcnNlciwgRmxvcmVuY2VQYXJzZXIgfSA9IHBhcnNlcnMsXG4gICAgICB7IHRlcm1EZWZhdWx0Q3VzdG9tR3JhbW1hckJORiwgc3RhdGVtZW50RGVmYXVsdEN1c3RvbUdyYW1tYXJCTkYsIGV4cHJlc3Npb25EZWZhdWx0Q3VzdG9tR3JhbW1hckJORiwgbWV0YXN0YXRlbWVudERlZmF1bHRDdXN0b21HcmFtbWFyQk5GIH0gPSBwYXJzZXJzO1xuXG5jb25zdCBibmZMZXhlciA9IEJORkxleGVyLmZyb21Ob3RoaW5nKCksXG4gICAgICBibmZQYXJzZXIgPSBCTkZQYXJzZXIuZnJvbU5vdGhpbmcoKTtcblxuZnVuY3Rpb24gZmxvcmVuY2VQYXJzZXJGcm9tQ29tYmluZWRDdXN0b21HcmFtbWFycyhjb21iaW5lZEN1c3RvbUdyYW1tYXJzKSB7XG4gIGNvbnN0IHsgYm5mIH0gPSBGbG9yZW5jZVBhcnNlcixcbiAgICAgICAgZmxvcmVuY2VQYXJzZXIgPSBmbG9yZW5jZVBhcnNlckZyb21CTkZBbmRDb21iaW5lZEN1c3RvbUdyYW1tYXJzKGJuZiwgY29tYmluZWRDdXN0b21HcmFtbWFycyk7XG5cbiAgcmV0dXJuIGZsb3JlbmNlUGFyc2VyO1xufVxuXG5mdW5jdGlvbiBmbG9yZW5jZVBhcnNlckZyb21CTkZBbmRDb21iaW5lZEN1c3RvbUdyYW1tYXJzKGJuZiwgY29tYmluZWRDdXN0b21HcmFtbWFycykge1xuICBjb25zdCBjb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMgPSBjb21iaW5lZEN1c3RvbUdyYW1tYXJzLmdldFJ1bGVzKCksXG4gICAgICAgIHRva2VucyA9IGJuZkxleGVyLnRva2Vuc0Zyb21CTkYoYm5mKSxcbiAgICAgICAgcnVsZXNOb2RlID0gYm5mUGFyc2VyLnJ1bGVzTm9kZUZyb21Ub2tlbnModG9rZW5zKSxcbiAgICAgICAgcnVsZXMgPSBCTkZQYXJzZXIuZ2VuZXJhdGVSdWxlcyhydWxlc05vZGUpO1xuXG4gIHB1c2gocnVsZXMsIGNvbWJpbmVkQ3VzdG9tR3JhbW1hcnNSdWxlcyk7XG5cbiAgY29uc3QgZmxvcmVuY2VQYXJzZXIgPSBuZXcgRmxvcmVuY2VQYXJzZXIocnVsZXMpO1xuXG4gIHJldHVybiBmbG9yZW5jZVBhcnNlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHRlcm1EZWZhdWx0Q3VzdG9tR3JhbW1hckJORixcbiAgc3RhdGVtZW50RGVmYXVsdEN1c3RvbUdyYW1tYXJCTkYsXG4gIGV4cHJlc3Npb25EZWZhdWx0Q3VzdG9tR3JhbW1hckJORixcbiAgbWV0YXN0YXRlbWVudERlZmF1bHRDdXN0b21HcmFtbWFyQk5GLFxuICBmbG9yZW5jZVBhcnNlckZyb21Db21iaW5lZEN1c3RvbUdyYW1tYXJzLFxuICBmbG9yZW5jZVBhcnNlckZyb21CTkZBbmRDb21iaW5lZEN1c3RvbUdyYW1tYXJzXG59O1xuIl19