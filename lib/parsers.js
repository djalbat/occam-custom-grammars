'use strict';

var lexers = require('occam-lexers'),
    parsers = require('occam-parsers'),
    necessary = require('necessary');

var arrayUtilities = necessary.arrayUtilities,
    push = arrayUtilities.push,
    BNFLexer = lexers.BNFLexer,
    BNFParser = parsers.BNFParser,
    FlorenceParser = parsers.FlorenceParser;


var bnfLexer = BNFLexer.fromNothing(),
    bnfParser = BNFParser.fromNothing();

function florenceParserFromCombinedCustomGrammarsRules(combinedCustomGrammarsRules) {
      var bnf = FlorenceParser.bnf,
          florenceParser = florenceParserFromBNFAndCombinedCustomGrammarsRules(bnf, combinedCustomGrammarsRules);


      return florenceParser;
}

function florenceParserFromBNFAndCombinedCustomGrammarsRules(bnf, combinedCustomGrammarsRules) {
      var tokens = bnfLexer.tokensFromBNF(bnf),
          rulesNode = bnfParser.rulesNodeFromTokens(tokens),
          rules = BNFParser.generateRules(rulesNode);

      push(rules, combinedCustomGrammarsRules);

      var florenceParser = new FlorenceParser(rules);

      return florenceParser;
}

module.exports = {
      florenceParserFromCombinedCustomGrammarsRules: florenceParserFromCombinedCustomGrammarsRules,
      florenceParserFromBNFAndCombinedCustomGrammarsRules: florenceParserFromBNFAndCombinedCustomGrammarsRules
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9wYXJzZXJzLmpzIl0sIm5hbWVzIjpbImxleGVycyIsInJlcXVpcmUiLCJwYXJzZXJzIiwibmVjZXNzYXJ5IiwiYXJyYXlVdGlsaXRpZXMiLCJwdXNoIiwiQk5GTGV4ZXIiLCJCTkZQYXJzZXIiLCJGbG9yZW5jZVBhcnNlciIsImJuZkxleGVyIiwiZnJvbU5vdGhpbmciLCJibmZQYXJzZXIiLCJmbG9yZW5jZVBhcnNlckZyb21Db21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMiLCJjb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMiLCJibmYiLCJmbG9yZW5jZVBhcnNlciIsImZsb3JlbmNlUGFyc2VyRnJvbUJORkFuZENvbWJpbmVkQ3VzdG9tR3JhbW1hcnNSdWxlcyIsInRva2VucyIsInRva2Vuc0Zyb21CTkYiLCJydWxlc05vZGUiLCJydWxlc05vZGVGcm9tVG9rZW5zIiwicnVsZXMiLCJnZW5lcmF0ZVJ1bGVzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsU0FBU0MsUUFBUSxjQUFSLENBQWY7QUFBQSxJQUNNQyxVQUFVRCxRQUFRLGVBQVIsQ0FEaEI7QUFBQSxJQUVNRSxZQUFZRixRQUFRLFdBQVIsQ0FGbEI7O0FBSU0sSUFBRUcsY0FBRixHQUFxQkQsU0FBckIsQ0FBRUMsY0FBRjtBQUFBLElBQ0VDLElBREYsR0FDV0QsY0FEWCxDQUNFQyxJQURGO0FBQUEsSUFFRUMsUUFGRixHQUVlTixNQUZmLENBRUVNLFFBRkY7QUFBQSxJQUdFQyxTQUhGLEdBR2dDTCxPQUhoQyxDQUdFSyxTQUhGO0FBQUEsSUFHYUMsY0FIYixHQUdnQ04sT0FIaEMsQ0FHYU0sY0FIYjs7O0FBS04sSUFBTUMsV0FBV0gsU0FBU0ksV0FBVCxFQUFqQjtBQUFBLElBQ01DLFlBQVlKLFVBQVVHLFdBQVYsRUFEbEI7O0FBR0EsU0FBU0UsNkNBQVQsQ0FBdURDLDJCQUF2RCxFQUFvRjtBQUM1RSxVQUFFQyxHQUFGLEdBQVVOLGNBQVYsQ0FBRU0sR0FBRjtBQUFBLFVBQ0FDLGNBREEsR0FDaUJDLG9EQUFvREYsR0FBcEQsRUFBeURELDJCQUF6RCxDQURqQjs7O0FBR04sYUFBT0UsY0FBUDtBQUNEOztBQUVELFNBQVNDLG1EQUFULENBQTZERixHQUE3RCxFQUFrRUQsMkJBQWxFLEVBQStGO0FBQzdGLFVBQU1JLFNBQVNSLFNBQVNTLGFBQVQsQ0FBdUJKLEdBQXZCLENBQWY7QUFBQSxVQUNNSyxZQUFZUixVQUFVUyxtQkFBVixDQUE4QkgsTUFBOUIsQ0FEbEI7QUFBQSxVQUVNSSxRQUFRZCxVQUFVZSxhQUFWLENBQXdCSCxTQUF4QixDQUZkOztBQUlBZCxXQUFLZ0IsS0FBTCxFQUFZUiwyQkFBWjs7QUFFQSxVQUFNRSxpQkFBaUIsSUFBSVAsY0FBSixDQUFtQmEsS0FBbkIsQ0FBdkI7O0FBRUEsYUFBT04sY0FBUDtBQUNEOztBQUVEUSxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZaLGtHQURlO0FBRWZJO0FBRmUsQ0FBakIiLCJmaWxlIjoicGFyc2Vycy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbGV4ZXJzID0gcmVxdWlyZSgnb2NjYW0tbGV4ZXJzJyksXG4gICAgICBwYXJzZXJzID0gcmVxdWlyZSgnb2NjYW0tcGFyc2VycycpLFxuICAgICAgbmVjZXNzYXJ5ID0gcmVxdWlyZSgnbmVjZXNzYXJ5Jyk7XG5cbmNvbnN0IHsgYXJyYXlVdGlsaXRpZXMgfSA9IG5lY2Vzc2FyeSxcbiAgICAgIHsgcHVzaCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IEJORkxleGVyIH0gPSBsZXhlcnMsXG4gICAgICB7IEJORlBhcnNlciwgRmxvcmVuY2VQYXJzZXIgfSA9IHBhcnNlcnM7XG5cbmNvbnN0IGJuZkxleGVyID0gQk5GTGV4ZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgIGJuZlBhcnNlciA9IEJORlBhcnNlci5mcm9tTm90aGluZygpO1xuXG5mdW5jdGlvbiBmbG9yZW5jZVBhcnNlckZyb21Db21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMoY29tYmluZWRDdXN0b21HcmFtbWFyc1J1bGVzKSB7XG4gIGNvbnN0IHsgYm5mIH0gPSBGbG9yZW5jZVBhcnNlcixcbiAgICAgICAgZmxvcmVuY2VQYXJzZXIgPSBmbG9yZW5jZVBhcnNlckZyb21CTkZBbmRDb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMoYm5mLCBjb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMpO1xuXG4gIHJldHVybiBmbG9yZW5jZVBhcnNlcjtcbn1cblxuZnVuY3Rpb24gZmxvcmVuY2VQYXJzZXJGcm9tQk5GQW5kQ29tYmluZWRDdXN0b21HcmFtbWFyc1J1bGVzKGJuZiwgY29tYmluZWRDdXN0b21HcmFtbWFyc1J1bGVzKSB7XG4gIGNvbnN0IHRva2VucyA9IGJuZkxleGVyLnRva2Vuc0Zyb21CTkYoYm5mKSxcbiAgICAgICAgcnVsZXNOb2RlID0gYm5mUGFyc2VyLnJ1bGVzTm9kZUZyb21Ub2tlbnModG9rZW5zKSxcbiAgICAgICAgcnVsZXMgPSBCTkZQYXJzZXIuZ2VuZXJhdGVSdWxlcyhydWxlc05vZGUpO1xuXG4gIHB1c2gocnVsZXMsIGNvbWJpbmVkQ3VzdG9tR3JhbW1hcnNSdWxlcyk7XG5cbiAgY29uc3QgZmxvcmVuY2VQYXJzZXIgPSBuZXcgRmxvcmVuY2VQYXJzZXIocnVsZXMpO1xuXG4gIHJldHVybiBmbG9yZW5jZVBhcnNlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGZsb3JlbmNlUGFyc2VyRnJvbUNvbWJpbmVkQ3VzdG9tR3JhbW1hcnNSdWxlcyxcbiAgZmxvcmVuY2VQYXJzZXJGcm9tQk5GQW5kQ29tYmluZWRDdXN0b21HcmFtbWFyc1J1bGVzXG59O1xuIl19