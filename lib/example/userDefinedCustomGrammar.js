"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _index = require("../index");
var _grammarNames = require("../grammarNames");
var name = _grammarNames.USER_DEFINED_CUSTOM_GRAMMAR_NAME, lexicalPattern = "<=|\\+|\\-|\\||insert|delete|empty", termBNF = "                term  ::=  operation\n\n                        |  operator\n                       \n                        |  substring\n\n                        |  stringLength\n\n                        ;\n\n\n           operation  ::=  operator<NO_WHITESPACE>\"(\" term \")\" ;\n\n\n            operator  ::=  \"insert\"<NO_WHITESPACE>\"(\" term \",\" term \")\"\n\n                        |  \"delete\"<NO_WHITESPACE>\"(\" term \",\" term \")\" \n\n                        |  \"empty\"<NO_WHITESPACE>\"(\"<NO_WHITESPACE>\")\"\n\n                        ;\n\n\n           substring  ::=  name<NO_WHITESPACE>\"[\" \"...\" expression \"]\" \n\n                        |  name<NO_WHITESPACE>\"[\" expression \"...\" expression \"]\" \n\n                        |  name<NO_WHITESPACE>\"[\" expression \"...\"  \"]\" \n\n                        ;\n\n\n      stringLength  ::=  \"|\" term \"|\" ;", expressionBNF = "          expression  ::", statementBNF = "           statement  ::=  lessThanOrEqualTo\n\n                        ;\n\n\n   lessThanOrEqualTo  ::=  expression \"<=\" expression ;", metastatementBNF = "", json = {
    name: name,
    lexicalPattern: lexicalPattern,
    termBNF: termBNF,
    expressionBNF: expressionBNF,
    statementBNF: statementBNF,
    metastatementBNF: metastatementBNF
}, userDefinedCustomGrammar = _index.CustomGrammar.fromJSON(json);
var _default = userDefinedCustomGrammar;
exports.default = _default;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leGFtcGxlL3VzZXJEZWZpbmVkQ3VzdG9tR3JhbW1hci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgQ3VzdG9tR3JhbW1hciB9IGZyb20gXCIuLi9pbmRleFwiOyAvLy9cblxuaW1wb3J0IHsgVVNFUl9ERUZJTkVEX0NVU1RPTV9HUkFNTUFSX05BTUUgfSBmcm9tIFwiLi4vZ3JhbW1hck5hbWVzXCI7XG5cbmNvbnN0IG5hbWUgPSBVU0VSX0RFRklORURfQ1VTVE9NX0dSQU1NQVJfTkFNRSxcbiAgICAgIGxleGljYWxQYXR0ZXJuID0gYDw9fFxcXFwrfFxcXFwtfFxcXFx8fGluc2VydHxkZWxldGV8ZW1wdHlgLFxuICAgICAgdGVybUJORiA9IGAgICAgICAgICAgICAgICAgdGVybSAgOjo9ICBvcGVyYXRpb25cblxuICAgICAgICAgICAgICAgICAgICAgICAgfCAgb3BlcmF0b3JcbiAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB8ICBzdWJzdHJpbmdcblxuICAgICAgICAgICAgICAgICAgICAgICAgfCAgc3RyaW5nTGVuZ3RoXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDtcblxuXG4gICAgICAgICAgIG9wZXJhdGlvbiAgOjo9ICBvcGVyYXRvcjxOT19XSElURVNQQUNFPlwiKFwiIHRlcm0gXCIpXCIgO1xuXG5cbiAgICAgICAgICAgIG9wZXJhdG9yICA6Oj0gIFwiaW5zZXJ0XCI8Tk9fV0hJVEVTUEFDRT5cIihcIiB0ZXJtIFwiLFwiIHRlcm0gXCIpXCJcblxuICAgICAgICAgICAgICAgICAgICAgICAgfCAgXCJkZWxldGVcIjxOT19XSElURVNQQUNFPlwiKFwiIHRlcm0gXCIsXCIgdGVybSBcIilcIiBcblxuICAgICAgICAgICAgICAgICAgICAgICAgfCAgXCJlbXB0eVwiPE5PX1dISVRFU1BBQ0U+XCIoXCI8Tk9fV0hJVEVTUEFDRT5cIilcIlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA7XG5cblxuICAgICAgICAgICBzdWJzdHJpbmcgIDo6PSAgbmFtZTxOT19XSElURVNQQUNFPlwiW1wiIFwiLi4uXCIgZXhwcmVzc2lvbiBcIl1cIiBcblxuICAgICAgICAgICAgICAgICAgICAgICAgfCAgbmFtZTxOT19XSElURVNQQUNFPlwiW1wiIGV4cHJlc3Npb24gXCIuLi5cIiBleHByZXNzaW9uIFwiXVwiIFxuXG4gICAgICAgICAgICAgICAgICAgICAgICB8ICBuYW1lPE5PX1dISVRFU1BBQ0U+XCJbXCIgZXhwcmVzc2lvbiBcIi4uLlwiICBcIl1cIiBcblxuICAgICAgICAgICAgICAgICAgICAgICAgO1xuXG5cbiAgICAgIHN0cmluZ0xlbmd0aCAgOjo9ICBcInxcIiB0ZXJtIFwifFwiIDtgLFxuICAgICAgZXhwcmVzc2lvbkJORiA9IGAgICAgICAgICAgZXhwcmVzc2lvbiAgOjpgLFxuICAgICAgc3RhdGVtZW50Qk5GID0gYCAgICAgICAgICAgc3RhdGVtZW50ICA6Oj0gIGxlc3NUaGFuT3JFcXVhbFRvXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDtcblxuXG4gICBsZXNzVGhhbk9yRXF1YWxUbyAgOjo9ICBleHByZXNzaW9uIFwiPD1cIiBleHByZXNzaW9uIDtgLFxuICAgICAgbWV0YXN0YXRlbWVudEJORiA9IGBgLFxuICAgICAganNvbiA9IHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgbGV4aWNhbFBhdHRlcm4sXG4gICAgICAgIHRlcm1CTkYsXG4gICAgICAgIGV4cHJlc3Npb25CTkYsXG4gICAgICAgIHN0YXRlbWVudEJORixcbiAgICAgICAgbWV0YXN0YXRlbWVudEJORlxuICAgICAgfSxcbiAgICAgIHVzZXJEZWZpbmVkQ3VzdG9tR3JhbW1hciA9IEN1c3RvbUdyYW1tYXIuZnJvbUpTT04oanNvbik7XG5cbmV4cG9ydCBkZWZhdWx0IHVzZXJEZWZpbmVkQ3VzdG9tR3JhbW1hcjtcbiJdLCJuYW1lcyI6WyJuYW1lIiwiVVNFUl9ERUZJTkVEX0NVU1RPTV9HUkFNTUFSX05BTUUiLCJsZXhpY2FsUGF0dGVybiIsInRlcm1CTkYiLCJleHByZXNzaW9uQk5GIiwic3RhdGVtZW50Qk5GIiwibWV0YXN0YXRlbWVudEJORiIsImpzb24iLCJ1c2VyRGVmaW5lZEN1c3RvbUdyYW1tYXIiLCJDdXN0b21HcmFtbWFyIiwiZnJvbUpTT04iXSwibWFwcGluZ3MiOiJBQUFBLENBQVksV0FBQSxDQUFDOzs7RUFBYjt3QkFBQTtBQUU4QixHQUFVLENBQVYsTUFBVTtBQUVTLEdBQWlCLENBQWpCLGFBQWlCO0FBRWxFLEdBQUssQ0FBQ0EsSUFBSSxHQUFHQyxhQUFnQyxtQ0FDdkNDLGNBQWMsR0FBSSxDQUFrQyxxQ0FDcERDLE9BQU8sR0FBSSxDQWdDc0IsbzRCQUNqQ0MsYUFBYSxHQUFJLENBQXdCLDJCQUN6Q0MsWUFBWSxHQUFJLENBS2lDLDJJQUNqREMsZ0JBQWdCLEdBQUksQ0FBQSxHQUNwQkMsSUFBSSxHQUFHLENBQUM7SUFDTlAsSUFBSSxFQUFKQSxJQUFJO0lBQ0pFLGNBQWMsRUFBZEEsY0FBYztJQUNkQyxPQUFPLEVBQVBBLE9BQU87SUFDUEMsYUFBYSxFQUFiQSxhQUFhO0lBQ2JDLFlBQVksRUFBWkEsWUFBWTtJQUNaQyxnQkFBZ0IsRUFBaEJBLGdCQUFnQjtBQUNsQixDQUFDLEVBQ0RFLHdCQUF3QixHQUFHQyxNQUFhLGVBQUNDLFFBQVEsQ0FBQ0gsSUFBSTtlQUU3Q0Msd0JBQXdCOzBCQTNEdkMifQ==