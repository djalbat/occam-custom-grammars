'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var parsers = require('occam-parsers'),
    necessary = require('necessary'),
    grammarUtilities = require('occam-grammar-utilities');

var ruleUtilities = require('./utilities/rule');

var arrayUtilities = necessary.arrayUtilities,
    unshift = arrayUtilities.unshift,
    findRuleByName = ruleUtilities.findRuleByName,
    eliminateLeftRecursion = grammarUtilities.eliminateLeftRecursion,
    BasicParser = parsers.BasicParser,
    termDefaultCustomGrammarBNF = parsers.termDefaultCustomGrammarBNF,
    statementDefaultCustomGrammarBNF = parsers.statementDefaultCustomGrammarBNF,
    expressionDefaultCustomGrammarBNF = parsers.expressionDefaultCustomGrammarBNF,
    metastatementDefaultCustomGrammarBNF = parsers.metastatementDefaultCustomGrammarBNF;

var CombinedCustomGrammars = function () {
  function CombinedCustomGrammars(lexicalPattern, rules) {
    _classCallCheck(this, CombinedCustomGrammars);

    this.lexicalPattern = lexicalPattern;
    this.rules = rules;
  }

  _createClass(CombinedCustomGrammars, [{
    key: 'getLexicalPattern',
    value: function getLexicalPattern() {
      return this.lexicalPattern;
    }
  }, {
    key: 'getRules',
    value: function getRules() {
      return this.rules;
    }
  }], [{
    key: 'fromCustomGrammars',
    value: function fromCustomGrammars(customGrammars) {
      var combinedLexicalPattern = combinedLexicalPatternFromCustomGrammars(customGrammars),
          combinedRules = combinedRulesFromCustomGrammars(customGrammars),
          lexicalPattern = combinedLexicalPattern,
          ///
      rules = eliminateLeftRecursion(combinedRules),
          ///
      combinedCustomGrammars = new CombinedCustomGrammars(lexicalPattern, rules);

      return combinedCustomGrammars;
    }
  }]);

  return CombinedCustomGrammars;
}();

module.exports = CombinedCustomGrammars;

function combinedLexicalPatternFromCustomGrammars(customGrammars) {
  var lexicalPatterns = lexicalPatternsFromCustomGrammars(customGrammars),
      combinedLexicalPattern = lexicalPatterns.reverse().join('|'); ///

  return combinedLexicalPattern;
}

function combinedRulesFromCustomGrammars(customGrammars) {
  var termDefaultBNF = termDefaultCustomGrammarBNF,
      ///
  statementDefaultBNF = statementDefaultCustomGrammarBNF,
      ///
  expressionDefaultBNF = expressionDefaultCustomGrammarBNF,
      ///
  metastatementDefaultBNF = metastatementDefaultCustomGrammarBNF,
      ///
  termBNFs = bnfsFromCustomGrammars('term', customGrammars),
      statementBNFs = bnfsFromCustomGrammars('statement', customGrammars),
      expressionBNFs = bnfsFromCustomGrammars('expression', customGrammars),
      metastatementBNFs = bnfsFromCustomGrammars('metastatement', customGrammars),
      termRules = rulesFromBNFs('term', termDefaultBNF, termBNFs),
      statementRules = rulesFromBNFs('statement', statementDefaultBNF, statementBNFs),
      expressionRules = rulesFromBNFs('expression', expressionDefaultBNF, expressionBNFs),
      metastatementRules = rulesFromBNFs('metastatement', metastatementDefaultBNF, metastatementBNFs),
      combinedRules = [].concat(termRules).concat(expressionRules).concat(statementRules).concat(metastatementRules); ///

  return combinedRules;
}

function lexicalPatternsFromCustomGrammars(customGrammars) {
  var lexicalPatterns = [];

  customGrammars.forEach(function (customGrammar) {
    var lexicalPattern = customGrammar.getLexicalPattern();

    if (lexicalPattern) {
      ///
      lexicalPatterns.push(lexicalPattern);
    }
  });

  return lexicalPatterns;
}

function bnfsFromCustomGrammars(ruleName, customGrammars) {
  var bnfs = [];

  customGrammars.forEach(function (customGrammar) {
    var bnf = customGrammar.getBNF(ruleName);

    if (bnf) {
      ///
      bnfs.push(bnf);
    }
  });

  return bnfs;
}

function rulesFromBNFs(ruleName, defaultBNF, bnfs) {
  var defaultRules = rulesFromBNF(defaultBNF),
      defaultMainRule = mainRuleFromRulesAndRuleName(defaultRules, ruleName),
      defaultRemainingRules = remainingRulesFromRulesAndMainRule(defaultRules, defaultMainRule),
      defaultMainRuleDefinitions = defaultMainRule.getDefinitions();

  bnfs.forEach(function (bnf) {
    var rules = rulesFromBNF(bnf),
        mainRule = mainRuleFromRulesAndRuleName(rules, ruleName),
        remainingRules = remainingRulesFromRulesAndMainRule(rules, mainRule),
        mainRuleDefinitions = mainRule !== null ? mainRule.getDefinitions() : [];

    unshift(defaultRemainingRules, remainingRules);

    unshift(defaultMainRuleDefinitions, mainRuleDefinitions);
  });

  var mainRule = defaultMainRule,
      ///
  remainingRules = defaultRemainingRules; ///

  var rules = [].concat(mainRule).concat(remainingRules);

  return rules;
}

function rulesFromBNF(bnf) {
  var basicParser = BasicParser.fromBNF(bnf),
      rules = basicParser.getRules();

  return rules;
}

function mainRuleFromRulesAndRuleName(rules, ruleName) {
  var name = ruleName,
      ///
  mainRule = findRuleByName(name, rules);

  return mainRule;
}

function remainingRulesFromRulesAndMainRule(rules, mainRule) {
  var remainingRules = rules.filter(function (rule) {
    if (rule !== mainRule) {
      return true;
    }
  });

  return remainingRules;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,