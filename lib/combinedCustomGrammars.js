'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var parsers = require('occam-parsers'),
    ///
necessary = require('necessary'),
    grammarUtilities = require('occam-grammar-utilities'); ///

var rulesUtilities = require('./utilities/rules'),
    ruleNameUtilities = require('./utilities/ruleName'),
    customGrammarsUtilities = require('./utilities/customGrammars');

var rulesFromBNF = rulesUtilities.rulesFromBNF,
    arrayUtilities = necessary.arrayUtilities,
    first = arrayUtilities.first,
    unshift = arrayUtilities.unshift,
    eliminateImplicitLeftRecursion = grammarUtilities.eliminateImplicitLeftRecursion,
    lexicalPatternsFromCustomGrammars = customGrammarsUtilities.lexicalPatternsFromCustomGrammars,
    bnfsFromRuleNameAndCustomGrammars = customGrammarsUtilities.bnfsFromRuleNameAndCustomGrammars,
    termDefaultCustomGrammarBNF = parsers.termDefaultCustomGrammarBNF,
    statementDefaultCustomGrammarBNF = parsers.statementDefaultCustomGrammarBNF,
    expressionDefaultCustomGrammarBNF = parsers.expressionDefaultCustomGrammarBNF,
    metastatementDefaultCustomGrammarBNF = parsers.metastatementDefaultCustomGrammarBNF,
    findRuleByRuleName = ruleNameUtilities.findRuleByRuleName,
    qualifiedRuleBNFFromRuleName = ruleNameUtilities.qualifiedRuleBNFFromRuleName,
    qualifiedRuleNameFromRuleName = ruleNameUtilities.qualifiedRuleNameFromRuleName,
    unqualifiedRuleBNFFromRuleName = ruleNameUtilities.unqualifiedRuleBNFFromRuleName,
    unqualifiedRuleNameFromRuleName = ruleNameUtilities.unqualifiedRuleNameFromRuleName;

var CombinedCustomGrammars = function () {
  function CombinedCustomGrammars(lexicalPattern, rules) {
    _classCallCheck(this, CombinedCustomGrammars);

    this.lexicalPattern = lexicalPattern;
    this.rules = rules;
  }

  _createClass(CombinedCustomGrammars, [{
    key: 'getLexicalPattern',
    value: function getLexicalPattern() {
      return this.lexicalPattern;
    }
  }, {
    key: 'getRules',
    value: function getRules() {
      return this.rules;
    }
  }], [{
    key: 'fromCustomGrammars',
    value: function fromCustomGrammars(customGrammars) {
      var combinedLexicalPattern = combinedLexicalPatternFromCustomGrammars(customGrammars),
          combinedRules = combinedRulesFromCustomGrammars(customGrammars),
          lexicalPattern = combinedLexicalPattern,
          ///
      rules = combinedRules,
          ///
      combinedCustomGrammars = new CombinedCustomGrammars(lexicalPattern, rules);

      return combinedCustomGrammars;
    }
  }]);

  return CombinedCustomGrammars;
}();

module.exports = CombinedCustomGrammars;

function combinedLexicalPatternFromCustomGrammars(customGrammars) {
  var lexicalPatterns = lexicalPatternsFromCustomGrammars(customGrammars),
      combinedLexicalPattern = lexicalPatterns.reverse().join('|'); ///

  return combinedLexicalPattern;
}

function combinedRulesFromCustomGrammars(customGrammars) {
  var metastatementRules = metastatementRulesFromCustomGrammars(customGrammars),
      statementRules = statementRulesFromCustomGrammars(customGrammars),
      expressionRules = expressionRulesFromCustomGrammars(customGrammars),
      termRules = termRulesFromCustomGrammars(customGrammars),
      combinedRules = [].concat(metastatementRules).concat(statementRules).concat(expressionRules).concat(termRules); ///

  return combinedRules;
}

function metastatementRulesFromCustomGrammars(customGrammars) {
  var ruleName = 'metastatement',
      ///
  defaultBNF = metastatementDefaultCustomGrammarBNF,
      ///
  bnfs = bnfsFromRuleNameAndCustomGrammars(ruleName, customGrammars),
      mainRule = mainRuleFromRuleNameDefaultBNFAndBNFs(ruleName, defaultBNF, bnfs),
      remainingRules = remainingRulesFromRuleNameDefaultBNFAndBNFs(ruleName, defaultBNF, bnfs),
      qualifiedRules = qualifiedRulesFromMainRule(mainRule),
      unqualifiedRules = unqualifiedRulesFromMainRule(mainRule);

  var rules = void 0;

  rules = [].concat(remainingRules).concat(mainRule);

  rules = eliminateImplicitLeftRecursion(rules);

  rules = [].concat(unqualifiedRules).concat(qualifiedRules).concat(rules);

  var metastatementRules = rules;

  return metastatementRules;
}

function statementRulesFromCustomGrammars(customGrammars) {
  var ruleName = 'statement',
      ///
  defaultBNF = statementDefaultCustomGrammarBNF,
      ///
  bnfs = bnfsFromRuleNameAndCustomGrammars(ruleName, customGrammars),
      mainRule = mainRuleFromRuleNameDefaultBNFAndBNFs(ruleName, defaultBNF, bnfs),
      remainingRules = remainingRulesFromRuleNameDefaultBNFAndBNFs(ruleName, defaultBNF, bnfs),
      qualifiedRules = qualifiedRulesFromMainRule(mainRule),
      unqualifiedRules = unqualifiedRulesFromMainRule(mainRule);

  var rules = void 0;

  rules = [].concat(remainingRules).concat(mainRule);

  rules = eliminateImplicitLeftRecursion(rules);

  rules = [].concat(unqualifiedRules).concat(qualifiedRules).concat(rules);

  var statementRules = rules;

  return statementRules;
}

function expressionRulesFromCustomGrammars(customGrammars) {
  var ruleName = 'expression',
      ///
  defaultBNF = expressionDefaultCustomGrammarBNF,
      ///
  bnfs = bnfsFromRuleNameAndCustomGrammars(ruleName, customGrammars),
      mainRule = mainRuleFromRuleNameDefaultBNFAndBNFs(ruleName, defaultBNF, bnfs),
      remainingRules = remainingRulesFromRuleNameDefaultBNFAndBNFs(ruleName, defaultBNF, bnfs);

  var rules = void 0;

  rules = [].concat(remainingRules).concat(mainRule);

  rules = eliminateImplicitLeftRecursion(rules);

  var expressionRules = rules;

  return expressionRules;
}

function termRulesFromCustomGrammars(customGrammars) {
  var ruleName = 'term',
      ///
  defaultBNF = termDefaultCustomGrammarBNF,
      ///
  bnfs = bnfsFromRuleNameAndCustomGrammars(ruleName, customGrammars),
      mainRule = mainRuleFromRuleNameDefaultBNFAndBNFs(ruleName, defaultBNF, bnfs),
      remainingRules = remainingRulesFromRuleNameDefaultBNFAndBNFs(ruleName, defaultBNF, bnfs);

  var rules = void 0;

  rules = [].concat(remainingRules).concat(mainRule);

  rules = eliminateImplicitLeftRecursion(rules);

  var termRules = rules;

  return termRules;
}

function remainingRulesFromRulesAndMainRule(rules, mainRule) {
  var remainingRules = rules.filter(function (rule) {
    if (rule !== mainRule) {
      return true;
    }
  });

  return remainingRules;
}

function mainRuleFromRuleNameDefaultBNFAndBNFs(ruleName, defaultBNF, bnfs) {
  var defaultRules = rulesFromBNF(defaultBNF),
      defaultMainRule = findRuleByRuleName(ruleName, defaultRules),
      defaultMainRuleDefinitions = defaultMainRule.getDefinitions();

  bnfs.forEach(function (bnf) {
    var rules = rulesFromBNF(bnf),
        mainRule = findRuleByRuleName(ruleName, rules),
        mainRuleDefinitions = mainRule !== null ? mainRule.getDefinitions() : [];

    unshift(defaultMainRuleDefinitions, mainRuleDefinitions);
  });

  var mainRule = defaultMainRule; ///

  return mainRule;
}

function remainingRulesFromRuleNameDefaultBNFAndBNFs(ruleName, defaultBNF, bnfs) {
  var defaultRules = rulesFromBNF(defaultBNF),
      defaultMainRule = findRuleByRuleName(ruleName, defaultRules),
      defaultRemainingRules = remainingRulesFromRulesAndMainRule(defaultRules, defaultMainRule);

  bnfs.forEach(function (bnf) {
    var rules = rulesFromBNF(bnf),
        mainRule = findRuleByRuleName(ruleName, rules),
        remainingRules = remainingRulesFromRulesAndMainRule(rules, mainRule);

    unshift(defaultRemainingRules, remainingRules);
  });

  var remainingRules = defaultRemainingRules; ///

  return remainingRules;
}

function qualifiedRulesFromMainRule(mainRule) {
  var mainQualifiedRule = mainQualifiedRuleFromMainRule(mainRule),
      remainingQualifiedRules = remainingQualifiedRulesFromMainRule(mainRule),
      qualifiedRules = [].concat(mainQualifiedRule).concat(remainingQualifiedRules);

  return qualifiedRules;
}

function unqualifiedRulesFromMainRule(mainRule) {
  var mainUnqualifiedRule = mainUnqualifiedRuleFromMainRule(mainRule),
      remainingUnqualifiedRules = remainingUnqualifiedRulesFromMainRule(mainRule),
      unqualifiedRules = [].concat(mainUnqualifiedRule).concat(remainingUnqualifiedRules);

  return unqualifiedRules;
}

function mainAmendedRuleFromMainRule(mainRule, callback) {
  var ruleName = mainRule.getName(),
      definitions = mainRule.getDefinitions(),
      mainAmendedRuleName = callback(ruleName),
      mainAmendedRuleNamesBNF = definitions.reduce(function (mainAmendedRuleNamesBNF, definition) {
    var parts = definition.getParts(),
        firstPart = first(parts),
        ruleNamePart = firstPart,
        ///
    ruleName = ruleNamePart.getRuleName(),
        mainAmendedRuleName = callback(ruleName);

    mainAmendedRuleNamesBNF = mainAmendedRuleNamesBNF === null ? mainAmendedRuleName : mainAmendedRuleNamesBNF + ' | ' + mainAmendedRuleName;

    return mainAmendedRuleNamesBNF;
  }, null),
      mainAmendedRuleBNF = mainAmendedRuleName + ' ::= ' + mainAmendedRuleNamesBNF + ' ;',
      mainAmendedRules = rulesFromBNF(mainAmendedRuleBNF),
      firstUnqualifiedMainRule = first(mainAmendedRules),
      mainAmendedRule = firstUnqualifiedMainRule; ///

  return mainAmendedRule;
}

function mainQualifiedRuleFromMainRule(mainRule) {
  return mainAmendedRuleFromMainRule(mainRule, qualifiedRuleNameFromRuleName);
}

function mainUnqualifiedRuleFromMainRule(mainRule) {
  return mainAmendedRuleFromMainRule(mainRule, unqualifiedRuleNameFromRuleName);
}

function remainingAmendedRulesFromMainRule(mainRule, callback) {
  var definitions = mainRule.getDefinitions(),
      remainingAmendedRulesBNF = definitions.reduce(function (remainingAmendedRulesBNF, definition) {
    var parts = definition.getParts(),
        firstPart = first(parts),
        ruleNamePart = firstPart,
        ///
    ruleName = ruleNamePart.getRuleName(),
        remainingAmendedRuleBNF = callback(ruleName);

    remainingAmendedRulesBNF = remainingAmendedRulesBNF === null ? remainingAmendedRuleBNF : remainingAmendedRulesBNF + ' ' + remainingAmendedRuleBNF;

    return remainingAmendedRulesBNF;
  }, null),
      remainingAmendedRules = rulesFromBNF(remainingAmendedRulesBNF);

  return remainingAmendedRules;
}

function remainingQualifiedRulesFromMainRule(mainRule) {
  return remainingAmendedRulesFromMainRule(mainRule, qualifiedRuleBNFFromRuleName);
}

function remainingUnqualifiedRulesFromMainRule(mainRule) {
  return remainingAmendedRulesFromMainRule(mainRule, unqualifiedRuleBNFFromRuleName);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,