'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var parsers = require('occam-parsers'),
    necessary = require('necessary');

var ruleUtilities = require('./utilities/rule');

var arrayUtilities = necessary.arrayUtilities,
    unshift = arrayUtilities.unshift,
    findRuleByName = ruleUtilities.findRuleByName,
    BasicParser = parsers.BasicParser,
    termDefaultCustomGrammarBNF = parsers.termDefaultCustomGrammarBNF,
    statementDefaultCustomGrammarBNF = parsers.statementDefaultCustomGrammarBNF,
    expressionDefaultCustomGrammarBNF = parsers.expressionDefaultCustomGrammarBNF,
    metastatementDefaultCustomGrammarBNF = parsers.metastatementDefaultCustomGrammarBNF;

var CombinedCustomGrammars = function () {
  function CombinedCustomGrammars(lexicalPattern, rules) {
    _classCallCheck(this, CombinedCustomGrammars);

    this.lexicalPattern = lexicalPattern;
    this.rules = rules;
  }

  _createClass(CombinedCustomGrammars, [{
    key: 'getLexicalPattern',
    value: function getLexicalPattern() {
      return this.lexicalPattern;
    }
  }, {
    key: 'getRules',
    value: function getRules() {
      return this.rules;
    }
  }], [{
    key: 'fromCustomGrammars',
    value: function fromCustomGrammars(customGrammars) {
      var combinedLexicalPattern = combinedLexicalPatternFromCustomGrammars(customGrammars),
          combinedRules = combinedRulesFromCustomGrammars(customGrammars),
          lexicalPattern = combinedLexicalPattern,
          ///
      rules = combinedRules,
          ///
      combinedCustomGrammars = new CombinedCustomGrammars(lexicalPattern, rules);

      return combinedCustomGrammars;
    }
  }]);

  return CombinedCustomGrammars;
}();

module.exports = CombinedCustomGrammars;

function combinedLexicalPatternFromCustomGrammars(customGrammars) {
  var lexicalPatterns = lexicalPatternsFromCustomGrammars(customGrammars),
      combinedLexicalPattern = lexicalPatterns.reverse().join('|'); ///

  return combinedLexicalPattern;
}

function combinedRulesFromCustomGrammars(customGrammars) {
  var metastatementDefaultBNF = metastatementDefaultCustomGrammarBNF,
      ///
  expressionDefaultBNF = expressionDefaultCustomGrammarBNF,
      ///
  statementDefaultBNF = statementDefaultCustomGrammarBNF,
      ///
  termDefaultBNF = termDefaultCustomGrammarBNF,
      ///
  metastatementBNFs = bnfsFromCustomGrammars('metastatement', customGrammars),
      expressionBNFs = bnfsFromCustomGrammars('expression', customGrammars),
      statementBNFs = bnfsFromCustomGrammars('statement', customGrammars),
      termBNFs = bnfsFromCustomGrammars('term', customGrammars),
      metastatementRules = rulesFromBNFs('metastatement', metastatementDefaultBNF, metastatementBNFs),
      expressionRules = rulesFromBNFs('expression', expressionDefaultBNF, expressionBNFs),
      statementRules = rulesFromBNFs('statement', statementDefaultBNF, statementBNFs),
      termRules = rulesFromBNFs('term', termDefaultBNF, termBNFs),
      combinedRules = [].concat(metastatementRules).concat(statementRules).concat(expressionRules).concat(termRules); ///

  return combinedRules;
}

function lexicalPatternsFromCustomGrammars(customGrammars) {
  var lexicalPatterns = [];

  customGrammars.forEach(function (customGrammar) {
    var lexicalPattern = customGrammar.getLexicalPattern();

    if (lexicalPattern) {
      ///
      lexicalPatterns.push(lexicalPattern);
    }
  });

  return lexicalPatterns;
}

function bnfsFromCustomGrammars(ruleName, customGrammars) {
  var bnfs = [];

  customGrammars.forEach(function (customGrammar) {
    var bnf = customGrammar.getBNF(ruleName);

    if (bnf) {
      ///
      bnfs.push(bnf);
    }
  });

  return bnfs;
}

function rulesFromBNFs(ruleName, defaultBNF, bnfs) {
  var defaultRules = rulesFromBNF(defaultBNF),
      defaultMainRule = mainRuleFromRulesAndRuleName(defaultRules, ruleName),
      defaultRemainingRules = remainingRulesFromRulesAndMainRule(defaultRules, defaultMainRule),
      defaultMainRuleDefinitions = defaultMainRule.getDefinitions();

  bnfs.forEach(function (bnf) {
    var rules = rulesFromBNF(bnf),
        mainRule = mainRuleFromRulesAndRuleName(rules, ruleName),
        remainingRules = remainingRulesFromRulesAndMainRule(rules, mainRule),
        mainRuleDefinitions = mainRule !== null ? mainRule.getDefinitions() : [];

    unshift(defaultRemainingRules, remainingRules);

    unshift(defaultMainRuleDefinitions, mainRuleDefinitions);
  });

  var mainRule = defaultMainRule,
      ///
  remainingRules = defaultRemainingRules; ///

  var rules = [].concat(mainRule).concat(remainingRules);

  return rules;
}

function rulesFromBNF(bnf) {
  var basicParser = BasicParser.fromBNF(bnf),
      rules = basicParser.getRules();

  return rules;
}

function mainRuleFromRulesAndRuleName(rules, ruleName) {
  var name = ruleName,
      ///
  mainRule = findRuleByName(name, rules);

  return mainRule;
}

function remainingRulesFromRulesAndMainRule(rules, mainRule) {
  var remainingRules = rules.filter(function (rule) {
    if (rule !== mainRule) {
      return true;
    }
  });

  return remainingRules;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9jb21iaW5lZEN1c3RvbUdyYW1tYXJzLmpzIl0sIm5hbWVzIjpbInBhcnNlcnMiLCJyZXF1aXJlIiwibmVjZXNzYXJ5IiwicnVsZVV0aWxpdGllcyIsImFycmF5VXRpbGl0aWVzIiwidW5zaGlmdCIsImZpbmRSdWxlQnlOYW1lIiwiQmFzaWNQYXJzZXIiLCJ0ZXJtRGVmYXVsdEN1c3RvbUdyYW1tYXJCTkYiLCJzdGF0ZW1lbnREZWZhdWx0Q3VzdG9tR3JhbW1hckJORiIsImV4cHJlc3Npb25EZWZhdWx0Q3VzdG9tR3JhbW1hckJORiIsIm1ldGFzdGF0ZW1lbnREZWZhdWx0Q3VzdG9tR3JhbW1hckJORiIsIkNvbWJpbmVkQ3VzdG9tR3JhbW1hcnMiLCJsZXhpY2FsUGF0dGVybiIsInJ1bGVzIiwiY3VzdG9tR3JhbW1hcnMiLCJjb21iaW5lZExleGljYWxQYXR0ZXJuIiwiY29tYmluZWRMZXhpY2FsUGF0dGVybkZyb21DdXN0b21HcmFtbWFycyIsImNvbWJpbmVkUnVsZXMiLCJjb21iaW5lZFJ1bGVzRnJvbUN1c3RvbUdyYW1tYXJzIiwiY29tYmluZWRDdXN0b21HcmFtbWFycyIsIm1vZHVsZSIsImV4cG9ydHMiLCJsZXhpY2FsUGF0dGVybnMiLCJsZXhpY2FsUGF0dGVybnNGcm9tQ3VzdG9tR3JhbW1hcnMiLCJyZXZlcnNlIiwiam9pbiIsIm1ldGFzdGF0ZW1lbnREZWZhdWx0Qk5GIiwiZXhwcmVzc2lvbkRlZmF1bHRCTkYiLCJzdGF0ZW1lbnREZWZhdWx0Qk5GIiwidGVybURlZmF1bHRCTkYiLCJtZXRhc3RhdGVtZW50Qk5GcyIsImJuZnNGcm9tQ3VzdG9tR3JhbW1hcnMiLCJleHByZXNzaW9uQk5GcyIsInN0YXRlbWVudEJORnMiLCJ0ZXJtQk5GcyIsIm1ldGFzdGF0ZW1lbnRSdWxlcyIsInJ1bGVzRnJvbUJORnMiLCJleHByZXNzaW9uUnVsZXMiLCJzdGF0ZW1lbnRSdWxlcyIsInRlcm1SdWxlcyIsImNvbmNhdCIsImZvckVhY2giLCJjdXN0b21HcmFtbWFyIiwiZ2V0TGV4aWNhbFBhdHRlcm4iLCJwdXNoIiwicnVsZU5hbWUiLCJibmZzIiwiYm5mIiwiZ2V0Qk5GIiwiZGVmYXVsdEJORiIsImRlZmF1bHRSdWxlcyIsInJ1bGVzRnJvbUJORiIsImRlZmF1bHRNYWluUnVsZSIsIm1haW5SdWxlRnJvbVJ1bGVzQW5kUnVsZU5hbWUiLCJkZWZhdWx0UmVtYWluaW5nUnVsZXMiLCJyZW1haW5pbmdSdWxlc0Zyb21SdWxlc0FuZE1haW5SdWxlIiwiZGVmYXVsdE1haW5SdWxlRGVmaW5pdGlvbnMiLCJnZXREZWZpbml0aW9ucyIsIm1haW5SdWxlIiwicmVtYWluaW5nUnVsZXMiLCJtYWluUnVsZURlZmluaXRpb25zIiwiYmFzaWNQYXJzZXIiLCJmcm9tQk5GIiwiZ2V0UnVsZXMiLCJuYW1lIiwiZmlsdGVyIiwicnVsZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUVBLElBQU1BLFVBQVVDLFFBQVEsZUFBUixDQUFoQjtBQUFBLElBQ01DLFlBQVlELFFBQVEsV0FBUixDQURsQjs7QUFHQSxJQUFNRSxnQkFBZ0JGLFFBQVEsa0JBQVIsQ0FBdEI7O0FBRU0sSUFBRUcsY0FBRixHQUFxQkYsU0FBckIsQ0FBRUUsY0FBRjtBQUFBLElBQ0VDLE9BREYsR0FDY0QsY0FEZCxDQUNFQyxPQURGO0FBQUEsSUFFRUMsY0FGRixHQUVxQkgsYUFGckIsQ0FFRUcsY0FGRjtBQUFBLElBR0VDLFdBSEYsR0FHMEpQLE9BSDFKLENBR0VPLFdBSEY7QUFBQSxJQUdlQywyQkFIZixHQUcwSlIsT0FIMUosQ0FHZVEsMkJBSGY7QUFBQSxJQUc0Q0MsZ0NBSDVDLEdBRzBKVCxPQUgxSixDQUc0Q1MsZ0NBSDVDO0FBQUEsSUFHOEVDLGlDQUg5RSxHQUcwSlYsT0FIMUosQ0FHOEVVLGlDQUg5RTtBQUFBLElBR2lIQyxvQ0FIakgsR0FHMEpYLE9BSDFKLENBR2lIVyxvQ0FIakg7O0lBS0FDLHNCO0FBQ0osa0NBQVlDLGNBQVosRUFBNEJDLEtBQTVCLEVBQW1DO0FBQUE7O0FBQ2pD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cEI7QUFBQSxNQUNNbEMsUUFBUWdELFlBQVlFLFFBQVosRUFEZDs7QUFHQSxTQUFPbEQsS0FBUDtBQUNEOztBQUVELFNBQVN3Qyw0QkFBVCxDQUFzQ3hDLEtBQXRDLEVBQTZDZ0MsUUFBN0MsRUFBdUQ7QUFDckQsTUFBTW1CLE9BQU9uQixRQUFiO0FBQUEsTUFBd0I7QUFDbEJhLGFBQVdyRCxlQUFlMkQsSUFBZixFQUFxQm5ELEtBQXJCLENBRGpCOztBQUdBLFNBQU82QyxRQUFQO0FBQ0Q7O0FBRUQsU0FBU0gsa0NBQVQsQ0FBNEMxQyxLQUE1QyxFQUFtRDZDLFFBQW5ELEVBQTZEO0FBQzNELE1BQU1DLGlCQUFpQjlDLE1BQU1vRCxNQUFOLENBQWEsVUFBU0MsSUFBVCxFQUFlO0FBQ2pELFFBQUlBLFNBQVNSLFFBQWIsRUFBdUI7QUFDckIsYUFBTyxJQUFQO0FBQ0Q7QUFDRixHQUpzQixDQUF2Qjs7QUFNQSxTQUFPQyxjQUFQO0FBQ0QiLCJmaWxlIjoiY29tYmluZWRDdXN0b21HcmFtbWFycy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgcGFyc2VycyA9IHJlcXVpcmUoJ29jY2FtLXBhcnNlcnMnKSxcbiAgICAgIG5lY2Vzc2FyeSA9IHJlcXVpcmUoJ25lY2Vzc2FyeScpO1xuXG5jb25zdCBydWxlVXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvcnVsZScpO1xuXG5jb25zdCB7IGFycmF5VXRpbGl0aWVzIH0gPSBuZWNlc3NhcnksXG4gICAgICB7IHVuc2hpZnQgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBmaW5kUnVsZUJ5TmFtZSB9ID0gcnVsZVV0aWxpdGllcyxcbiAgICAgIHsgQmFzaWNQYXJzZXIsIHRlcm1EZWZhdWx0Q3VzdG9tR3JhbW1hckJORiwgc3RhdGVtZW50RGVmYXVsdEN1c3RvbUdyYW1tYXJCTkYsIGV4cHJlc3Npb25EZWZhdWx0Q3VzdG9tR3JhbW1hckJORiwgbWV0YXN0YXRlbWVudERlZmF1bHRDdXN0b21HcmFtbWFyQk5GIH0gPSBwYXJzZXJzO1xuXG5jbGFzcyBDb21iaW5lZEN1c3RvbUdyYW1tYXJzIHtcbiAgY29uc3RydWN0b3IobGV4aWNhbFBhdHRlcm4sIHJ1bGVzKSB7XG4gICAgdGhpcy5sZXhpY2FsUGF0dGVybiA9IGxleGljYWxQYXR0ZXJuO1xuICAgIHRoaXMucnVsZXMgPSBydWxlcztcbiAgfVxuICBcbiAgZ2V0TGV4aWNhbFBhdHRlcm4oKSB7XG4gICAgcmV0dXJuIHRoaXMubGV4aWNhbFBhdHRlcm47XG4gIH1cblxuICBnZXRSdWxlcygpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcztcbiAgfVxuXG4gIHN0YXRpYyBmcm9tQ3VzdG9tR3JhbW1hcnMoY3VzdG9tR3JhbW1hcnMpIHtcbiAgICBjb25zdCBjb21iaW5lZExleGljYWxQYXR0ZXJuID0gY29tYmluZWRMZXhpY2FsUGF0dGVybkZyb21DdXN0b21HcmFtbWFycyhjdXN0b21HcmFtbWFycyksXG4gICAgICAgICAgY29tYmluZWRSdWxlcyA9IGNvbWJpbmVkUnVsZXNGcm9tQ3VzdG9tR3JhbW1hcnMoY3VzdG9tR3JhbW1hcnMpLFxuICAgICAgICAgIGxleGljYWxQYXR0ZXJuID0gY29tYmluZWRMZXhpY2FsUGF0dGVybiwgIC8vL1xuICAgICAgICAgIHJ1bGVzID0gY29tYmluZWRSdWxlcywgIC8vL1xuICAgICAgICAgIGNvbWJpbmVkQ3VzdG9tR3JhbW1hcnMgPSBuZXcgQ29tYmluZWRDdXN0b21HcmFtbWFycyhsZXhpY2FsUGF0dGVybiwgcnVsZXMpO1xuICAgIFxuICAgIHJldHVybiBjb21iaW5lZEN1c3RvbUdyYW1tYXJzO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tYmluZWRDdXN0b21HcmFtbWFycztcblxuZnVuY3Rpb24gY29tYmluZWRMZXhpY2FsUGF0dGVybkZyb21DdXN0b21HcmFtbWFycyhjdXN0b21HcmFtbWFycykge1xuICBjb25zdCBsZXhpY2FsUGF0dGVybnMgPSBsZXhpY2FsUGF0dGVybnNGcm9tQ3VzdG9tR3JhbW1hcnMoY3VzdG9tR3JhbW1hcnMpLFxuICAgICAgICBjb21iaW5lZExleGljYWxQYXR0ZXJuID0gbGV4aWNhbFBhdHRlcm5zLnJldmVyc2UoKS5qb2luKCd8Jyk7IC8vL1xuXG4gIHJldHVybiBjb21iaW5lZExleGljYWxQYXR0ZXJuO1xufVxuXG5mdW5jdGlvbiBjb21iaW5lZFJ1bGVzRnJvbUN1c3RvbUdyYW1tYXJzKGN1c3RvbUdyYW1tYXJzKSB7XG4gIGNvbnN0IG1ldGFzdGF0ZW1lbnREZWZhdWx0Qk5GID0gbWV0YXN0YXRlbWVudERlZmF1bHRDdXN0b21HcmFtbWFyQk5GLCAvLy9cbiAgICAgICAgZXhwcmVzc2lvbkRlZmF1bHRCTkYgPSBleHByZXNzaW9uRGVmYXVsdEN1c3RvbUdyYW1tYXJCTkYsIC8vL1xuICAgICAgICBzdGF0ZW1lbnREZWZhdWx0Qk5GID0gc3RhdGVtZW50RGVmYXVsdEN1c3RvbUdyYW1tYXJCTkYsIC8vL1xuICAgICAgICB0ZXJtRGVmYXVsdEJORiA9IHRlcm1EZWZhdWx0Q3VzdG9tR3JhbW1hckJORiwgLy8vXG4gICAgICAgIG1ldGFzdGF0ZW1lbnRCTkZzID0gYm5mc0Zyb21DdXN0b21HcmFtbWFycygnbWV0YXN0YXRlbWVudCcsIGN1c3RvbUdyYW1tYXJzKSxcbiAgICAgICAgZXhwcmVzc2lvbkJORnMgPSBibmZzRnJvbUN1c3RvbUdyYW1tYXJzKCdleHByZXNzaW9uJywgY3VzdG9tR3JhbW1hcnMpLFxuICAgICAgICBzdGF0ZW1lbnRCTkZzID0gYm5mc0Zyb21DdXN0b21HcmFtbWFycygnc3RhdGVtZW50JywgY3VzdG9tR3JhbW1hcnMpLFxuICAgICAgICB0ZXJtQk5GcyA9IGJuZnNGcm9tQ3VzdG9tR3JhbW1hcnMoJ3Rlcm0nLCBjdXN0b21HcmFtbWFycyksXG4gICAgICAgIG1ldGFzdGF0ZW1lbnRSdWxlcyA9IHJ1bGVzRnJvbUJORnMoJ21ldGFzdGF0ZW1lbnQnLCBtZXRhc3RhdGVtZW50RGVmYXVsdEJORiwgbWV0YXN0YXRlbWVudEJORnMpLFxuICAgICAgICBleHByZXNzaW9uUnVsZXMgPSBydWxlc0Zyb21CTkZzKCdleHByZXNzaW9uJywgZXhwcmVzc2lvbkRlZmF1bHRCTkYsIGV4cHJlc3Npb25CTkZzKSxcbiAgICAgICAgc3RhdGVtZW50UnVsZXMgPSBydWxlc0Zyb21CTkZzKCdzdGF0ZW1lbnQnLCBzdGF0ZW1lbnREZWZhdWx0Qk5GLCBzdGF0ZW1lbnRCTkZzKSxcbiAgICAgICAgdGVybVJ1bGVzID0gcnVsZXNGcm9tQk5GcygndGVybScsIHRlcm1EZWZhdWx0Qk5GLCB0ZXJtQk5GcyksXG4gICAgICAgIGNvbWJpbmVkUnVsZXMgPSBbXS5jb25jYXQobWV0YXN0YXRlbWVudFJ1bGVzKS5jb25jYXQoc3RhdGVtZW50UnVsZXMpLmNvbmNhdChleHByZXNzaW9uUnVsZXMpLmNvbmNhdCh0ZXJtUnVsZXMpOyAvLy9cblxuICByZXR1cm4gY29tYmluZWRSdWxlcztcbn1cblxuZnVuY3Rpb24gbGV4aWNhbFBhdHRlcm5zRnJvbUN1c3RvbUdyYW1tYXJzKGN1c3RvbUdyYW1tYXJzKSB7XG4gIGNvbnN0IGxleGljYWxQYXR0ZXJucyA9IFtdO1xuXG4gIGN1c3RvbUdyYW1tYXJzLmZvckVhY2goZnVuY3Rpb24oY3VzdG9tR3JhbW1hcikge1xuICAgIGNvbnN0IGxleGljYWxQYXR0ZXJuID0gY3VzdG9tR3JhbW1hci5nZXRMZXhpY2FsUGF0dGVybigpO1xuXG4gICAgaWYgKGxleGljYWxQYXR0ZXJuKSB7IC8vL1xuICAgICAgbGV4aWNhbFBhdHRlcm5zLnB1c2gobGV4aWNhbFBhdHRlcm4pO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGxleGljYWxQYXR0ZXJucztcbn1cblxuZnVuY3Rpb24gYm5mc0Zyb21DdXN0b21HcmFtbWFycyhydWxlTmFtZSwgY3VzdG9tR3JhbW1hcnMpIHtcbiAgY29uc3QgYm5mcyA9IFtdO1xuXG4gIGN1c3RvbUdyYW1tYXJzLmZvckVhY2goZnVuY3Rpb24oY3VzdG9tR3JhbW1hcikge1xuICAgIGNvbnN0IGJuZiA9IGN1c3RvbUdyYW1tYXIuZ2V0Qk5GKHJ1bGVOYW1lKTtcblxuICAgIGlmIChibmYpIHsgIC8vL1xuICAgICAgYm5mcy5wdXNoKGJuZik7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gYm5mcztcbn1cblxuZnVuY3Rpb24gcnVsZXNGcm9tQk5GcyhydWxlTmFtZSwgZGVmYXVsdEJORiwgYm5mcykge1xuICBjb25zdCBkZWZhdWx0UnVsZXMgPSBydWxlc0Zyb21CTkYoZGVmYXVsdEJORiksXG4gICAgICAgIGRlZmF1bHRNYWluUnVsZSA9IG1haW5SdWxlRnJvbVJ1bGVzQW5kUnVsZU5hbWUoZGVmYXVsdFJ1bGVzLCBydWxlTmFtZSksXG4gICAgICAgIGRlZmF1bHRSZW1haW5pbmdSdWxlcyA9IHJlbWFpbmluZ1J1bGVzRnJvbVJ1bGVzQW5kTWFpblJ1bGUoZGVmYXVsdFJ1bGVzLCBkZWZhdWx0TWFpblJ1bGUpLFxuICAgICAgICBkZWZhdWx0TWFpblJ1bGVEZWZpbml0aW9ucyA9IGRlZmF1bHRNYWluUnVsZS5nZXREZWZpbml0aW9ucygpO1xuXG4gIGJuZnMuZm9yRWFjaChmdW5jdGlvbihibmYpIHtcbiAgICBjb25zdCBydWxlcyA9IHJ1bGVzRnJvbUJORihibmYpLFxuICAgICAgICAgIG1haW5SdWxlID0gbWFpblJ1bGVGcm9tUnVsZXNBbmRSdWxlTmFtZShydWxlcywgcnVsZU5hbWUpLFxuICAgICAgICAgIHJlbWFpbmluZ1J1bGVzID0gcmVtYWluaW5nUnVsZXNGcm9tUnVsZXNBbmRNYWluUnVsZShydWxlcywgbWFpblJ1bGUpLFxuICAgICAgICAgIG1haW5SdWxlRGVmaW5pdGlvbnMgPSAobWFpblJ1bGUgIT09IG51bGwpID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWluUnVsZS5nZXREZWZpbml0aW9ucygpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtdO1xuXG4gICAgdW5zaGlmdChkZWZhdWx0UmVtYWluaW5nUnVsZXMsIHJlbWFpbmluZ1J1bGVzKTtcblxuICAgIHVuc2hpZnQoZGVmYXVsdE1haW5SdWxlRGVmaW5pdGlvbnMsIG1haW5SdWxlRGVmaW5pdGlvbnMpO1xuICB9KTtcblxuICBjb25zdCBtYWluUnVsZSA9IGRlZmF1bHRNYWluUnVsZSwgLy8vXG4gICAgICAgIHJlbWFpbmluZ1J1bGVzID0gZGVmYXVsdFJlbWFpbmluZ1J1bGVzOyAvLy9cblxuICBjb25zdCBydWxlcyA9IFtdLmNvbmNhdChtYWluUnVsZSkuY29uY2F0KHJlbWFpbmluZ1J1bGVzKTtcblxuICByZXR1cm4gcnVsZXM7XG59XG5cbmZ1bmN0aW9uIHJ1bGVzRnJvbUJORihibmYpIHtcbiAgY29uc3QgYmFzaWNQYXJzZXIgPSBCYXNpY1BhcnNlci5mcm9tQk5GKGJuZiksXG4gICAgICAgIHJ1bGVzID0gYmFzaWNQYXJzZXIuZ2V0UnVsZXMoKTtcblxuICByZXR1cm4gcnVsZXM7XG59XG5cbmZ1bmN0aW9uIG1haW5SdWxlRnJvbVJ1bGVzQW5kUnVsZU5hbWUocnVsZXMsIHJ1bGVOYW1lKSB7XG4gIGNvbnN0IG5hbWUgPSBydWxlTmFtZSwgIC8vL1xuICAgICAgICBtYWluUnVsZSA9IGZpbmRSdWxlQnlOYW1lKG5hbWUsIHJ1bGVzKTtcblxuICByZXR1cm4gbWFpblJ1bGU7XG59XG5cbmZ1bmN0aW9uIHJlbWFpbmluZ1J1bGVzRnJvbVJ1bGVzQW5kTWFpblJ1bGUocnVsZXMsIG1haW5SdWxlKSB7XG4gIGNvbnN0IHJlbWFpbmluZ1J1bGVzID0gcnVsZXMuZmlsdGVyKGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICBpZiAocnVsZSAhPT0gbWFpblJ1bGUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHJlbWFpbmluZ1J1bGVzO1xufVxuIl19