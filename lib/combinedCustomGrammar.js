'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var lexers = require('occam-lexers'),
    parsers = require('occam-parsers'),
    necessary = require('necessary'),
    grammarUtilities = require('occam-grammar-utilities');

var rulesUtilities = require('./utilities/rules'),
    ruleNameUtilities = require('./utilities/ruleName'),
    customGrammarsUtilities = require('./utilities/customGrammars');

var rulesFromBNF = rulesUtilities.rulesFromBNF,
    arrayUtilities = necessary.arrayUtilities,
    unshift = arrayUtilities.unshift,
    findRuleByRuleName = ruleNameUtilities.findRuleByRuleName,
    defaultLexicalPattern = lexers.defaultLexicalPattern,
    eliminateLeftRecursion = grammarUtilities.eliminateLeftRecursion,
    lexicalPatternsFromCustomGrammars = customGrammarsUtilities.lexicalPatternsFromCustomGrammars,
    bnfsFromRuleNameAndCustomGrammars = customGrammarsUtilities.bnfsFromRuleNameAndCustomGrammars,
    termDefaultBNF = parsers.termDefaultBNF,
    statementDefaultBNF = parsers.statementDefaultBNF,
    expressionDefaultBNF = parsers.expressionDefaultBNF,
    metastatementDefaultBNF = parsers.metastatementDefaultBNF;

var CombinedCustomGrammar = function () {
  function CombinedCustomGrammar(lexicalPattern, rules) {
    _classCallCheck(this, CombinedCustomGrammar);

    this.lexicalPattern = lexicalPattern;
    this.rules = rules;
  }

  _createClass(CombinedCustomGrammar, [{
    key: 'getLexicalPattern',
    value: function getLexicalPattern() {
      return this.lexicalPattern;
    }
  }, {
    key: 'getRules',
    value: function getRules() {
      return this.rules;
    }
  }], [{
    key: 'fromCustomGrammars',
    value: function fromCustomGrammars(customGrammars) {
      var combinedLexicalPattern = combinedLexicalPatternFromCustomGrammars(customGrammars),
          combinedRules = combinedRulesFromCustomGrammars(customGrammars),
          lexicalPattern = combinedLexicalPattern,
          ///
      rules = combinedRules,
          ///
      combinedCustomGrammar = new CombinedCustomGrammar(lexicalPattern, rules);

      return combinedCustomGrammar;
    }
  }]);

  return CombinedCustomGrammar;
}();

module.exports = CombinedCustomGrammar;

function combinedLexicalPatternFromCustomGrammars(customGrammars) {
  var lexicalPatterns = lexicalPatternsFromCustomGrammars(customGrammars);

  lexicalPatterns.unshift(defaultLexicalPattern);

  var combinedLexicalPattern = lexicalPatterns.reverse().join('|'); ///

  return combinedLexicalPattern;
}

function combinedRulesFromCustomGrammars(customGrammars) {
  var metastatementRuleName = 'metastatement',
      statementRuleName = 'statement',
      expressionRuleName = 'expression',
      termRuleName = 'term',
      metastatementRules = rulesFromRuleNameCustomGrammarsAndDefaultBNF(metastatementRuleName, customGrammars, metastatementDefaultBNF),
      statementRules = rulesFromRuleNameCustomGrammarsAndDefaultBNF(statementRuleName, customGrammars, statementDefaultBNF),
      expressionRules = rulesFromRuleNameCustomGrammarsAndDefaultBNF(expressionRuleName, customGrammars, expressionDefaultBNF),
      termRules = rulesFromRuleNameCustomGrammarsAndDefaultBNF(termRuleName, customGrammars, termDefaultBNF),
      combinedRules = [].concat(metastatementRules).concat(statementRules).concat(expressionRules).concat(termRules);

  return combinedRules;
}

function rulesFromRuleNameCustomGrammarsAndDefaultBNF(ruleName, customGrammars, defaultBNF) {
  var bnfs = bnfsFromRuleNameAndCustomGrammars(ruleName, customGrammars),
      mainRule = mainRuleFromRuleNameDefaultBNFAndBNFs(ruleName, defaultBNF, bnfs),
      remainingRules = remainingRulesFromRuleNameDefaultBNFAndBNFs(ruleName, defaultBNF, bnfs);

  var rules = void 0;

  rules = [].concat(remainingRules).concat(mainRule);

  rules = eliminateLeftRecursion(rules);

  return rules;
}

function remainingRulesFromRulesAndMainRule(rules, mainRule) {
  var remainingRules = rules.filter(function (rule) {
    if (rule !== mainRule) {
      return true;
    }
  });

  return remainingRules;
}

function mainRuleFromRuleNameDefaultBNFAndBNFs(ruleName, defaultBNF, bnfs) {
  var defaultRules = rulesFromBNF(defaultBNF),
      defaultMainRule = findRuleByRuleName(ruleName, defaultRules),
      defaultMainRuleDefinitions = defaultMainRule.getDefinitions();

  bnfs.forEach(function (bnf) {
    var rules = rulesFromBNF(bnf),
        mainRule = findRuleByRuleName(ruleName, rules),
        mainRuleDefinitions = mainRule !== null ? mainRule.getDefinitions() : [];

    unshift(defaultMainRuleDefinitions, mainRuleDefinitions);
  });

  var mainRule = defaultMainRule; ///

  return mainRule;
}

function remainingRulesFromRuleNameDefaultBNFAndBNFs(ruleName, defaultBNF, bnfs) {
  var defaultRules = rulesFromBNF(defaultBNF),
      defaultMainRule = findRuleByRuleName(ruleName, defaultRules),
      defaultRemainingRules = remainingRulesFromRulesAndMainRule(defaultRules, defaultMainRule);

  bnfs.forEach(function (bnf) {
    var rules = rulesFromBNF(bnf),
        mainRule = findRuleByRuleName(ruleName, rules),
        remainingRules = remainingRulesFromRulesAndMainRule(rules, mainRule);

    unshift(defaultRemainingRules, remainingRules);
  });

  var remainingRules = defaultRemainingRules; ///

  return remainingRules;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9jb21iaW5lZEN1c3RvbUdyYW1tYXIuanMiXSwibmFtZXMiOlsibGV4ZXJzIiwicmVxdWlyZSIsInBhcnNlcnMiLCJuZWNlc3NhcnkiLCJncmFtbWFyVXRpbGl0aWVzIiwicnVsZXNVdGlsaXRpZXMiLCJydWxlTmFtZVV0aWxpdGllcyIsImN1c3RvbUdyYW1tYXJzVXRpbGl0aWVzIiwicnVsZXNGcm9tQk5GIiwiYXJyYXlVdGlsaXRpZXMiLCJ1bnNoaWZ0IiwiZmluZFJ1bGVCeVJ1bGVOYW1lIiwiZGVmYXVsdExleGljYWxQYXR0ZXJuIiwiZWxpbWluYXRlTGVmdFJlY3Vyc2lvbiIsImxleGljYWxQYXR0ZXJuc0Zyb21DdXN0b21HcmFtbWFycyIsImJuZnNGcm9tUnVsZU5hbWVBbmRDdXN0b21HcmFtbWFycyIsInRlcm1EZWZhdWx0Qk5GIiwic3RhdGVtZW50RGVmYXVsdEJORiIsImV4cHJlc3Npb25EZWZhdWx0Qk5GIiwibWV0YXN0YXRlbWVudERlZmF1bHRCTkYiLCJDb21iaW5lZEN1c3RvbUdyYW1tYXIiLCJsZXhpY2FsUGF0dGVybiIsInJ1bGVzIiwiY3VzdG9tR3JhbW1hcnMiLCJjb21iaW5lZExleGljYWxQYXR0ZXJuIiwiY29tYmluZWRMZXhpY2FsUGF0dGVybkZyb21DdXN0b21HcmFtbWFycyIsImNvbWJpbmVkUnVsZXMiLCJjb21iaW5lZFJ1bGVzRnJvbUN1c3RvbUdyYW1tYXJzIiwiY29tYmluZWRDdXN0b21HcmFtbWFyIiwibW9kdWxlIiwiZXhwb3J0cyIsImxleGljYWxQYXR0ZXJucyIsInJldmVyc2UiLCJqb2luIiwibWV0YXN0YXRlbWVudFJ1bGVOYW1lIiwic3RhdGVtZW50UnVsZU5hbWUiLCJleHByZXNzaW9uUnVsZU5hbWUiLCJ0ZXJtUnVsZU5hbWUiLCJtZXRhc3RhdGVtZW50UnVsZXMiLCJydWxlc0Zyb21SdWxlTmFtZUN1c3RvbUdyYW1tYXJzQW5kRGVmYXVsdEJORiIsInN0YXRlbWVudFJ1bGVzIiwiZXhwcmVzc2lvblJ1bGVzIiwidGVybVJ1bGVzIiwiY29uY2F0IiwicnVsZU5hbWUiLCJkZWZhdWx0Qk5GIiwiYm5mcyIsIm1haW5SdWxlIiwibWFpblJ1bGVGcm9tUnVsZU5hbWVEZWZhdWx0Qk5GQW5kQk5GcyIsInJlbWFpbmluZ1J1bGVzIiwicmVtYWluaW5nUnVsZXNGcm9tUnVsZU5hbWVEZWZhdWx0Qk5GQW5kQk5GcyIsInJlbWFpbmluZ1J1bGVzRnJvbVJ1bGVzQW5kTWFpblJ1bGUiLCJmaWx0ZXIiLCJydWxlIiwiZGVmYXVsdFJ1bGVzIiwiZGVmYXVsdE1haW5SdWxlIiwiZGVmYXVsdE1haW5SdWxlRGVmaW5pdGlvbnMiLCJnZXREZWZpbml0aW9ucyIsImZvckVhY2giLCJibmYiLCJtYWluUnVsZURlZmluaXRpb25zIiwiZGVmYXVsdFJlbWFpbmluZ1J1bGVzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBRUEsSUFBTUEsU0FBU0MsUUFBUSxjQUFSLENBQWY7QUFBQSxJQUNNQyxVQUFVRCxRQUFRLGVBQVIsQ0FEaEI7QUFBQSxJQUVNRSxZQUFZRixRQUFRLFdBQVIsQ0FGbEI7QUFBQSxJQUdNRyxtQkFBbUJILFFBQVEseUJBQVIsQ0FIekI7O0FBS0EsSUFBTUksaUJBQWlCSixRQUFRLG1CQUFSLENBQXZCO0FBQUEsSUFDTUssb0JBQW9CTCxRQUFRLHNCQUFSLENBRDFCO0FBQUEsSUFFTU0sMEJBQTBCTixRQUFRLDRCQUFSLENBRmhDOztBQUlNLElBQUVPLFlBQUYsR0FBbUJILGNBQW5CLENBQUVHLFlBQUY7QUFBQSxJQUNFQyxjQURGLEdBQ3FCTixTQURyQixDQUNFTSxjQURGO0FBQUEsSUFFRUMsT0FGRixHQUVjRCxjQUZkLENBRUVDLE9BRkY7QUFBQSxJQUdFQyxrQkFIRixHQUd5QkwsaUJBSHpCLENBR0VLLGtCQUhGO0FBQUEsSUFJRUMscUJBSkYsR0FJNEJaLE1BSjVCLENBSUVZLHFCQUpGO0FBQUEsSUFLRUMsc0JBTEYsR0FLNkJULGdCQUw3QixDQUtFUyxzQkFMRjtBQUFBLElBTUVDLGlDQU5GLEdB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RHhCO0FBQUEsTUFFTU8sd0JBQXdCVixtQ0FBbUNHLFlBQW5DLEVBQWlEQyxlQUFqRCxDQUY5Qjs7QUFJQVQsT0FBS1ksT0FBTCxDQUFhLFVBQVNDLEdBQVQsRUFBYztBQUN6QixRQUFNckMsUUFBUWQsYUFBYW1ELEdBQWIsQ0FBZDtBQUFBLFFBQ01aLFdBQVdwQyxtQkFBbUJpQyxRQUFuQixFQUE2QnRCLEtBQTdCLENBRGpCO0FBQUEsUUFFTTJCLGlCQUFpQkUsbUNBQW1DN0IsS0FBbkMsRUFBMEN5QixRQUExQyxDQUZ2Qjs7QUFJQXJDLFlBQVFtRCxxQkFBUixFQUErQlosY0FBL0I7QUFDRCxHQU5EOztBQVFBLE1BQU1BLGlCQUFpQlkscUJBQXZCLENBYitFLENBYWpDOztBQUU5QyxTQUFPWixjQUFQO0FBQ0QiLCJmaWxlIjoiY29tYmluZWRDdXN0b21HcmFtbWFyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBsZXhlcnMgPSByZXF1aXJlKCdvY2NhbS1sZXhlcnMnKSxcbiAgICAgIHBhcnNlcnMgPSByZXF1aXJlKCdvY2NhbS1wYXJzZXJzJyksXG4gICAgICBuZWNlc3NhcnkgPSByZXF1aXJlKCduZWNlc3NhcnknKSxcbiAgICAgIGdyYW1tYXJVdGlsaXRpZXMgPSByZXF1aXJlKCdvY2NhbS1ncmFtbWFyLXV0aWxpdGllcycpO1xuXG5jb25zdCBydWxlc1V0aWxpdGllcyA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzL3J1bGVzJyksXG4gICAgICBydWxlTmFtZVV0aWxpdGllcyA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzL3J1bGVOYW1lJyksXG4gICAgICBjdXN0b21HcmFtbWFyc1V0aWxpdGllcyA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzL2N1c3RvbUdyYW1tYXJzJyk7XG5cbmNvbnN0IHsgcnVsZXNGcm9tQk5GIH0gPSBydWxlc1V0aWxpdGllcyxcbiAgICAgIHsgYXJyYXlVdGlsaXRpZXMgfSA9IG5lY2Vzc2FyeSxcbiAgICAgIHsgdW5zaGlmdCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IGZpbmRSdWxlQnlSdWxlTmFtZSB9ID0gcnVsZU5hbWVVdGlsaXRpZXMsXG4gICAgICB7IGRlZmF1bHRMZXhpY2FsUGF0dGVybiB9ID0gbGV4ZXJzLFxuICAgICAgeyBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uIH0gPSBncmFtbWFyVXRpbGl0aWVzLFxuICAgICAgeyBsZXhpY2FsUGF0dGVybnNGcm9tQ3VzdG9tR3JhbW1hcnMsIGJuZnNGcm9tUnVsZU5hbWVBbmRDdXN0b21HcmFtbWFycyB9ID0gY3VzdG9tR3JhbW1hcnNVdGlsaXRpZXMsXG4gICAgICB7IHRlcm1EZWZhdWx0Qk5GLCBzdGF0ZW1lbnREZWZhdWx0Qk5GLCBleHByZXNzaW9uRGVmYXVsdEJORiwgbWV0YXN0YXRlbWVudERlZmF1bHRCTkYgfSA9IHBhcnNlcnM7XG5cbmNsYXNzIENvbWJpbmVkQ3VzdG9tR3JhbW1hciB7XG4gIGNvbnN0cnVjdG9yKGxleGljYWxQYXR0ZXJuLCBydWxlcykge1xuICAgIHRoaXMubGV4aWNhbFBhdHRlcm4gPSBsZXhpY2FsUGF0dGVybjtcbiAgICB0aGlzLnJ1bGVzID0gcnVsZXM7XG4gIH1cbiAgXG4gIGdldExleGljYWxQYXR0ZXJuKCkge1xuICAgIHJldHVybiB0aGlzLmxleGljYWxQYXR0ZXJuO1xuICB9XG5cbiAgZ2V0UnVsZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXM7XG4gIH1cblxuICBzdGF0aWMgZnJvbUN1c3RvbUdyYW1tYXJzKGN1c3RvbUdyYW1tYXJzKSB7XG4gICAgY29uc3QgY29tYmluZWRMZXhpY2FsUGF0dGVybiA9IGNvbWJpbmVkTGV4aWNhbFBhdHRlcm5Gcm9tQ3VzdG9tR3JhbW1hcnMoY3VzdG9tR3JhbW1hcnMpLFxuICAgICAgICAgIGNvbWJpbmVkUnVsZXMgPSBjb21iaW5lZFJ1bGVzRnJvbUN1c3RvbUdyYW1tYXJzKGN1c3RvbUdyYW1tYXJzKSxcbiAgICAgICAgICBsZXhpY2FsUGF0dGVybiA9IGNvbWJpbmVkTGV4aWNhbFBhdHRlcm4sICAvLy9cbiAgICAgICAgICBydWxlcyA9IGNvbWJpbmVkUnVsZXMsICAvLy9cbiAgICAgICAgICBjb21iaW5lZEN1c3RvbUdyYW1tYXIgPSBuZXcgQ29tYmluZWRDdXN0b21HcmFtbWFyKGxleGljYWxQYXR0ZXJuLCBydWxlcyk7XG4gICAgXG4gICAgcmV0dXJuIGNvbWJpbmVkQ3VzdG9tR3JhbW1hcjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbWJpbmVkQ3VzdG9tR3JhbW1hcjtcblxuZnVuY3Rpb24gY29tYmluZWRMZXhpY2FsUGF0dGVybkZyb21DdXN0b21HcmFtbWFycyhjdXN0b21HcmFtbWFycykge1xuICBjb25zdCBsZXhpY2FsUGF0dGVybnMgPSBsZXhpY2FsUGF0dGVybnNGcm9tQ3VzdG9tR3JhbW1hcnMoY3VzdG9tR3JhbW1hcnMpO1xuXG4gIGxleGljYWxQYXR0ZXJucy51bnNoaWZ0KGRlZmF1bHRMZXhpY2FsUGF0dGVybik7XG5cbiAgY29uc3QgY29tYmluZWRMZXhpY2FsUGF0dGVybiA9IGxleGljYWxQYXR0ZXJucy5yZXZlcnNlKCkuam9pbignfCcpOyAvLy9cblxuICByZXR1cm4gY29tYmluZWRMZXhpY2FsUGF0dGVybjtcbn1cblxuZnVuY3Rpb24gY29tYmluZWRSdWxlc0Zyb21DdXN0b21HcmFtbWFycyhjdXN0b21HcmFtbWFycykge1xuICBjb25zdCBtZXRhc3RhdGVtZW50UnVsZU5hbWUgPSAnbWV0YXN0YXRlbWVudCcsXG4gICAgICAgIHN0YXRlbWVudFJ1bGVOYW1lID0gJ3N0YXRlbWVudCcsXG4gICAgICAgIGV4cHJlc3Npb25SdWxlTmFtZSA9ICdleHByZXNzaW9uJyxcbiAgICAgICAgdGVybVJ1bGVOYW1lID0gJ3Rlcm0nLFxuICAgICAgICBtZXRhc3RhdGVtZW50UnVsZXMgPSBydWxlc0Zyb21SdWxlTmFtZUN1c3RvbUdyYW1tYXJzQW5kRGVmYXVsdEJORihtZXRhc3RhdGVtZW50UnVsZU5hbWUsIGN1c3RvbUdyYW1tYXJzLCBtZXRhc3RhdGVtZW50RGVmYXVsdEJORiksXG4gICAgICAgIHN0YXRlbWVudFJ1bGVzID0gcnVsZXNGcm9tUnVsZU5hbWVDdXN0b21HcmFtbWFyc0FuZERlZmF1bHRCTkYoc3RhdGVtZW50UnVsZU5hbWUsIGN1c3RvbUdyYW1tYXJzLCBzdGF0ZW1lbnREZWZhdWx0Qk5GKSxcbiAgICAgICAgZXhwcmVzc2lvblJ1bGVzID0gcnVsZXNGcm9tUnVsZU5hbWVDdXN0b21HcmFtbWFyc0FuZERlZmF1bHRCTkYoZXhwcmVzc2lvblJ1bGVOYW1lLCBjdXN0b21HcmFtbWFycywgZXhwcmVzc2lvbkRlZmF1bHRCTkYpLFxuICAgICAgICB0ZXJtUnVsZXMgPSBydWxlc0Zyb21SdWxlTmFtZUN1c3RvbUdyYW1tYXJzQW5kRGVmYXVsdEJORih0ZXJtUnVsZU5hbWUsIGN1c3RvbUdyYW1tYXJzLCB0ZXJtRGVmYXVsdEJORiksXG4gICAgICAgIGNvbWJpbmVkUnVsZXMgPSBbXS5jb25jYXQobWV0YXN0YXRlbWVudFJ1bGVzKS5jb25jYXQoc3RhdGVtZW50UnVsZXMpLmNvbmNhdChleHByZXNzaW9uUnVsZXMpLmNvbmNhdCh0ZXJtUnVsZXMpO1xuXG4gIHJldHVybiBjb21iaW5lZFJ1bGVzO1xufVxuXG5mdW5jdGlvbiBydWxlc0Zyb21SdWxlTmFtZUN1c3RvbUdyYW1tYXJzQW5kRGVmYXVsdEJORihydWxlTmFtZSwgY3VzdG9tR3JhbW1hcnMsIGRlZmF1bHRCTkYpIHtcbiAgY29uc3QgYm5mcyA9IGJuZnNGcm9tUnVsZU5hbWVBbmRDdXN0b21HcmFtbWFycyhydWxlTmFtZSwgY3VzdG9tR3JhbW1hcnMpLFxuICAgICAgICBtYWluUnVsZSA9IG1haW5SdWxlRnJvbVJ1bGVOYW1lRGVmYXVsdEJORkFuZEJORnMocnVsZU5hbWUsIGRlZmF1bHRCTkYsIGJuZnMpLFxuICAgICAgICByZW1haW5pbmdSdWxlcyA9IHJlbWFpbmluZ1J1bGVzRnJvbVJ1bGVOYW1lRGVmYXVsdEJORkFuZEJORnMocnVsZU5hbWUsIGRlZmF1bHRCTkYsIGJuZnMpO1xuXG4gIGxldCBydWxlcztcblxuICBydWxlcyA9IFtdLmNvbmNhdChyZW1haW5pbmdSdWxlcykuY29uY2F0KG1haW5SdWxlKTtcblxuICBydWxlcyA9IGVsaW1pbmF0ZUxlZnRSZWN1cnNpb24ocnVsZXMpO1xuXG4gIHJldHVybiBydWxlcztcbn1cblxuZnVuY3Rpb24gcmVtYWluaW5nUnVsZXNGcm9tUnVsZXNBbmRNYWluUnVsZShydWxlcywgbWFpblJ1bGUpIHtcbiAgY29uc3QgcmVtYWluaW5nUnVsZXMgPSBydWxlcy5maWx0ZXIoZnVuY3Rpb24ocnVsZSkge1xuICAgIGlmIChydWxlICE9PSBtYWluUnVsZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcmVtYWluaW5nUnVsZXM7XG59XG5cbmZ1bmN0aW9uIG1haW5SdWxlRnJvbVJ1bGVOYW1lRGVmYXVsdEJORkFuZEJORnMocnVsZU5hbWUsIGRlZmF1bHRCTkYsIGJuZnMpIHtcbiAgY29uc3QgZGVmYXVsdFJ1bGVzID0gcnVsZXNGcm9tQk5GKGRlZmF1bHRCTkYpLFxuICAgICAgICBkZWZhdWx0TWFpblJ1bGUgPSBmaW5kUnVsZUJ5UnVsZU5hbWUocnVsZU5hbWUsIGRlZmF1bHRSdWxlcyksXG4gICAgICAgIGRlZmF1bHRNYWluUnVsZURlZmluaXRpb25zID0gZGVmYXVsdE1haW5SdWxlLmdldERlZmluaXRpb25zKCk7XG5cbiAgYm5mcy5mb3JFYWNoKGZ1bmN0aW9uKGJuZikge1xuICAgIGNvbnN0IHJ1bGVzID0gcnVsZXNGcm9tQk5GKGJuZiksXG4gICAgICAgICAgbWFpblJ1bGUgPSBmaW5kUnVsZUJ5UnVsZU5hbWUocnVsZU5hbWUsIHJ1bGVzKSxcbiAgICAgICAgICBtYWluUnVsZURlZmluaXRpb25zID0gKG1haW5SdWxlICE9PSBudWxsKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFpblJ1bGUuZ2V0RGVmaW5pdGlvbnMoKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXTtcblxuICAgIHVuc2hpZnQoZGVmYXVsdE1haW5SdWxlRGVmaW5pdGlvbnMsIG1haW5SdWxlRGVmaW5pdGlvbnMpO1xuICB9KTtcblxuICBjb25zdCBtYWluUnVsZSA9IGRlZmF1bHRNYWluUnVsZTsgLy8vXG5cbiAgcmV0dXJuIG1haW5SdWxlO1xufVxuXG5mdW5jdGlvbiByZW1haW5pbmdSdWxlc0Zyb21SdWxlTmFtZURlZmF1bHRCTkZBbmRCTkZzKHJ1bGVOYW1lLCBkZWZhdWx0Qk5GLCBibmZzKSB7XG4gIGNvbnN0IGRlZmF1bHRSdWxlcyA9IHJ1bGVzRnJvbUJORihkZWZhdWx0Qk5GKSxcbiAgICAgICAgZGVmYXVsdE1haW5SdWxlID0gZmluZFJ1bGVCeVJ1bGVOYW1lKHJ1bGVOYW1lLCBkZWZhdWx0UnVsZXMpLFxuICAgICAgICBkZWZhdWx0UmVtYWluaW5nUnVsZXMgPSByZW1haW5pbmdSdWxlc0Zyb21SdWxlc0FuZE1haW5SdWxlKGRlZmF1bHRSdWxlcywgZGVmYXVsdE1haW5SdWxlKTtcblxuICBibmZzLmZvckVhY2goZnVuY3Rpb24oYm5mKSB7XG4gICAgY29uc3QgcnVsZXMgPSBydWxlc0Zyb21CTkYoYm5mKSxcbiAgICAgICAgICBtYWluUnVsZSA9IGZpbmRSdWxlQnlSdWxlTmFtZShydWxlTmFtZSwgcnVsZXMpLFxuICAgICAgICAgIHJlbWFpbmluZ1J1bGVzID0gcmVtYWluaW5nUnVsZXNGcm9tUnVsZXNBbmRNYWluUnVsZShydWxlcywgbWFpblJ1bGUpO1xuXG4gICAgdW5zaGlmdChkZWZhdWx0UmVtYWluaW5nUnVsZXMsIHJlbWFpbmluZ1J1bGVzKTtcbiAgfSk7XG5cbiAgY29uc3QgcmVtYWluaW5nUnVsZXMgPSBkZWZhdWx0UmVtYWluaW5nUnVsZXM7IC8vL1xuXG4gIHJldHVybiByZW1haW5pbmdSdWxlcztcbn1cbiJdfQ==