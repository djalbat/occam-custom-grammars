"use strict";

var _necessary = require("necessary");

var _occamLexers = require("occam-lexers");

var _occamGrammarUtilities = require("occam-grammar-utilities");

var _occamParsers = require("occam-parsers");

var _rules = require("./utilities/rules");

var _ruleName = require("./utilities/ruleName");

var _customGrammars = require("./utilities/customGrammars");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var first = _necessary.arrayUtilities.first,
    filter = _necessary.arrayUtilities.filter,
    unshift = _necessary.arrayUtilities.unshift;

var CombinedCustomGrammar = /*#__PURE__*/function () {
  function CombinedCustomGrammar(lexicalPattern, rules) {
    _classCallCheck(this, CombinedCustomGrammar);

    this.lexicalPattern = lexicalPattern;
    this.rules = rules;
  }

  _createClass(CombinedCustomGrammar, [{
    key: "getLexicalPattern",
    value: function getLexicalPattern() {
      return this.lexicalPattern;
    }
  }, {
    key: "getRules",
    value: function getRules() {
      return this.rules;
    }
  }], [{
    key: "fromCustomGrammars",
    value: function fromCustomGrammars(customGrammars) {
      var lexicalPattern = lexicalPatternFromCustomGrammars(customGrammars),
          rules = rulesFromCustomGrammars(customGrammars);
      addStartRule(rules);
      (0, _occamGrammarUtilities.eliminateLeftRecursion)(rules);
      removeStartRule(rules);
      var combinedCustomGrammar = new CombinedCustomGrammar(lexicalPattern, rules);
      return combinedCustomGrammar;
    }
  }]);

  return CombinedCustomGrammar;
}();

module.exports = CombinedCustomGrammar;

function lexicalPatternFromCustomGrammars(customGrammars) {
  var lexicalPatterns = (0, _customGrammars.lexicalPatternsFromCustomGrammars)(customGrammars);
  lexicalPatterns.unshift(_occamLexers.defaultLexicalPattern);
  var lexicalPatternsString = lexicalPatterns.reverse().join("|"),
      ///
  lexicalPattern = "^(?:".concat(lexicalPatternsString, ")");
  return lexicalPattern;
}

function rulesFromCustomGrammars(customGrammars) {
  var metastatementRuleName = "metastatement",
      statementRuleName = "statement",
      expressionRuleName = "expression",
      termRuleName = "term",
      metastatementRules = rulesFromRuleNameCustomGrammarsAndDefaultBNF(metastatementRuleName, customGrammars, _occamParsers.metastatementDefaultBNF),
      statementRules = rulesFromRuleNameCustomGrammarsAndDefaultBNF(statementRuleName, customGrammars, _occamParsers.statementDefaultBNF),
      expressionRules = rulesFromRuleNameCustomGrammarsAndDefaultBNF(expressionRuleName, customGrammars, _occamParsers.expressionDefaultBNF),
      termRules = rulesFromRuleNameCustomGrammarsAndDefaultBNF(termRuleName, customGrammars, _occamParsers.termDefaultBNF),
      rules = [].concat(metastatementRules).concat(statementRules).concat(expressionRules).concat(termRules);
  return rules;
}

function addStartRule(rules) {
  var startRulesBNF = " start ::= metastatement | statement | expression | term ; ",
      startRules = (0, _rules.rulesFromBNF)(startRulesBNF),
      firstStartRule = first(startRules),
      startRule = firstStartRule; ///

  rules.unshift(startRule);
}

function removeStartRule(rules) {
  var firstRule = first(rules),
      startRule = firstRule; ///

  filter(rules, function (rule) {
    if (rule !== startRule) {
      return true;
    }
  });
}

function remainingRulesFromRulesAndMainRule(rules, mainRule) {
  var remainingRules = rules.filter(function (rule) {
    if (rule !== mainRule) {
      return true;
    }
  });
  return remainingRules;
}

function mainRuleFromRuleNameDefaultBNFAndBNFs(ruleName, defaultBNF, bnfs) {
  var defaultRules = (0, _rules.rulesFromBNF)(defaultBNF),
      defaultMainRule = (0, _ruleName.findRuleByRuleName)(ruleName, defaultRules),
      defaultMainRuleDefinitions = defaultMainRule.getDefinitions();
  bnfs.forEach(function (bnf) {
    var rules = (0, _rules.rulesFromBNF)(bnf),
        mainRule = (0, _ruleName.findRuleByRuleName)(ruleName, rules),
        mainRuleDefinitions = mainRule !== null ? mainRule.getDefinitions() : [];
    unshift(defaultMainRuleDefinitions, mainRuleDefinitions);
  });
  var mainRule = defaultMainRule; ///

  return mainRule;
}

function remainingRulesFromRuleNameDefaultBNFAndBNFs(ruleName, defaultBNF, bnfs) {
  var defaultRules = (0, _rules.rulesFromBNF)(defaultBNF),
      defaultMainRule = (0, _ruleName.findRuleByRuleName)(ruleName, defaultRules),
      defaultRemainingRules = remainingRulesFromRulesAndMainRule(defaultRules, defaultMainRule);
  bnfs.forEach(function (bnf) {
    var rules = (0, _rules.rulesFromBNF)(bnf),
        mainRule = (0, _ruleName.findRuleByRuleName)(ruleName, rules),
        remainingRules = remainingRulesFromRulesAndMainRule(rules, mainRule);
    unshift(defaultRemainingRules, remainingRules);
  });
  var remainingRules = defaultRemainingRules; ///

  return remainingRules;
}

function rulesFromRuleNameCustomGrammarsAndDefaultBNF(ruleName, customGrammars, defaultBNF) {
  var bnfs = (0, _customGrammars.bnfsFromRuleNameAndCustomGrammars)(ruleName, customGrammars),
      mainRule = mainRuleFromRuleNameDefaultBNFAndBNFs(ruleName, defaultBNF, bnfs),
      remainingRules = remainingRulesFromRuleNameDefaultBNFAndBNFs(ruleName, defaultBNF, bnfs),
      rules = [].concat(mainRule).concat(remainingRules);
  return rules;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,