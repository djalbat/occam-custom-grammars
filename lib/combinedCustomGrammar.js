"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _necessary = require("necessary");
var _defaultCustomGrammar = _interopRequireDefault(require("./defaultCustomGrammar"));
var _constants = require("./constants");
var _ruleName = require("./utilities/ruleName");
var _rules = require("./utilities/rules");
var _customGrammars = require("./utilities/customGrammars");
var _ruleNames = require("./ruleNames");
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var filter = _necessary.arrayUtilities.filter, unshift = _necessary.arrayUtilities.unshift;
var CombinedCustomGrammar = /*#__PURE__*/ function() {
    function CombinedCustomGrammar(lexicalPattern, ruleMap) {
        _classCallCheck(this, CombinedCustomGrammar);
        this.lexicalPattern = lexicalPattern;
        this.ruleMap = ruleMap;
    }
    _createClass(CombinedCustomGrammar, [
        {
            key: "getLexicalPattern",
            value: function getLexicalPattern() {
                return this.lexicalPattern;
            }
        },
        {
            key: "getRuleMap",
            value: function getRuleMap() {
                return this.ruleMap;
            }
        }
    ], [
        {
            key: "fromCustomGrammars",
            value: function fromCustomGrammars(customGrammars) {
                var metastatementRules = metastatementRulesFromCustomGrammarsAndDefaultBNF(customGrammars), statementRules = statementRulesFromCustomGrammarsAndDefaultBNF(customGrammars), expressionRules = expressionRulesFromCustomGrammarsAndDefaultBNF(customGrammars), termRules = termRulesFromCustomGrammarsAndDefaultBNF(customGrammars), lexicalPattern = lexicalPatternFromCustomGrammars(customGrammars), rules = _toConsumableArray(metastatementRules).concat(_toConsumableArray(statementRules), _toConsumableArray(expressionRules), _toConsumableArray(termRules)), ruleMap = (0, _rules).ruleMapFromRules(rules);
                var combinedCustomGrammar = new CombinedCustomGrammar(lexicalPattern, ruleMap);
                return combinedCustomGrammar;
            }
        }
    ]);
    return CombinedCustomGrammar;
}();
exports.default = CombinedCustomGrammar;
function metastatementRulesFromCustomGrammarsAndDefaultBNF(customGrammars) {
    var metastatementRuleName = _ruleNames.METASTATEMENT_RULE_NAME, metastatementRules = rulesFromRuleNameCustomGrammarsAndDefaultBNF(metastatementRuleName, customGrammars);
    return metastatementRules;
}
function statementRulesFromCustomGrammarsAndDefaultBNF(customGrammars) {
    var statementRuleName = _ruleNames.STATEMENT_RULE_NAME, statementRules = rulesFromRuleNameCustomGrammarsAndDefaultBNF(statementRuleName, customGrammars);
    return statementRules;
}
function expressionRulesFromCustomGrammarsAndDefaultBNF(customGrammars) {
    var expressionRuleName = _ruleNames.EXPRESSION_RULE_NAME, expressionRules = rulesFromRuleNameCustomGrammarsAndDefaultBNF(expressionRuleName, customGrammars);
    return expressionRules;
}
function termRulesFromCustomGrammarsAndDefaultBNF(customGrammars) {
    var termRuleName = _ruleNames.TERM_RULE_NAME, termRules = rulesFromRuleNameCustomGrammarsAndDefaultBNF(termRuleName, customGrammars);
    return termRules;
}
function lexicalPatternFromCustomGrammars(customGrammars) {
    var lexicalPatterns = (0, _customGrammars).lexicalPatternsFromCustomGrammars(customGrammars), defaultCustomGrammarLexicalPattern = _defaultCustomGrammar.default.getLexicalPattern(), defaultLexicalPattern = defaultCustomGrammarLexicalPattern; ///
    lexicalPatterns.reverse();
    lexicalPatterns.push(defaultLexicalPattern);
    filter(lexicalPatterns, function(lexicalPattern) {
        if (lexicalPattern !== _constants.EMPTY_STRING) {
            return true;
        }
    });
    var lexicalPatternsString = lexicalPatterns.join("|"), lexicalPattern1 = "^(?:".concat(lexicalPatternsString, ")");
    return lexicalPattern1;
}
function remainingRulesFromRulesAndMainRule(rules, mainRule) {
    var remainingRules = rules.filter(function(rule) {
        if (rule !== mainRule) {
            return true;
        }
    });
    return remainingRules;
}
function mainRuleFromRuleNameDefaultBNFAndBNFs(ruleName, bnfs) {
    var defaultCustomGrammarBNF = _defaultCustomGrammar.default.getBNF(ruleName), defaultBNF = defaultCustomGrammarBNF, defaultRules = (0, _rules).rulesFromBNF(defaultBNF), defaultMainRule = (0, _ruleName).findRuleByRuleName(ruleName, defaultRules), defaultMainRuleDefinitions = defaultMainRule.getDefinitions();
    bnfs.forEach(function(bnf) {
        var rules = (0, _rules).rulesFromBNF(bnf), mainRule = (0, _ruleName).findRuleByRuleName(ruleName, rules), mainRuleDefinitions = mainRule !== null ? mainRule.getDefinitions() : [];
        unshift(defaultMainRuleDefinitions, mainRuleDefinitions);
    });
    var mainRule1 = defaultMainRule; ///
    return mainRule1;
}
function remainingRulesFromRuleNameDefaultBNFAndBNFs(ruleName, bnfs) {
    var defaultCustomGrammarBNF = _defaultCustomGrammar.default.getBNF(ruleName), defaultBNF = defaultCustomGrammarBNF, defaultRules = (0, _rules).rulesFromBNF(defaultBNF), defaultMainRule = (0, _ruleName).findRuleByRuleName(ruleName, defaultRules), defaultRemainingRules = remainingRulesFromRulesAndMainRule(defaultRules, defaultMainRule);
    bnfs.forEach(function(bnf) {
        var rules = (0, _rules).rulesFromBNF(bnf), mainRule = (0, _ruleName).findRuleByRuleName(ruleName, rules), remainingRules = remainingRulesFromRulesAndMainRule(rules, mainRule);
        unshift(defaultRemainingRules, remainingRules);
    });
    var remainingRules1 = defaultRemainingRules; ///
    return remainingRules1;
}
function rulesFromRuleNameCustomGrammarsAndDefaultBNF(ruleName, customGrammars) {
    var bnfs = (0, _customGrammars).bnfsFromRuleNameAndCustomGrammars(ruleName, customGrammars), mainRule = mainRuleFromRuleNameDefaultBNFAndBNFs(ruleName, bnfs), remainingRules = remainingRulesFromRuleNameDefaultBNFAndBNFs(ruleName, bnfs), rules = [].concat(mainRule).concat(remainingRules);
    return rules;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb21iaW5lZEN1c3RvbUdyYW1tYXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5pbXBvcnQgZGVmYXVsdEN1c3RvbUdyYW1tYXIgZnJvbSBcIi4vZGVmYXVsdEN1c3RvbUdyYW1tYXJcIjtcblxuaW1wb3J0IHsgRU1QVFlfU1RSSU5HIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgeyBmaW5kUnVsZUJ5UnVsZU5hbWUgfSBmcm9tIFwiLi91dGlsaXRpZXMvcnVsZU5hbWVcIjtcbmltcG9ydCB7IHJ1bGVzRnJvbUJORiwgcnVsZU1hcEZyb21SdWxlcyB9IGZyb20gXCIuL3V0aWxpdGllcy9ydWxlc1wiO1xuaW1wb3J0IHsgbGV4aWNhbFBhdHRlcm5zRnJvbUN1c3RvbUdyYW1tYXJzLCBibmZzRnJvbVJ1bGVOYW1lQW5kQ3VzdG9tR3JhbW1hcnMgfSBmcm9tIFwiLi91dGlsaXRpZXMvY3VzdG9tR3JhbW1hcnNcIjtcbmltcG9ydCB7IFRFUk1fUlVMRV9OQU1FLCBFWFBSRVNTSU9OX1JVTEVfTkFNRSwgU1RBVEVNRU5UX1JVTEVfTkFNRSwgTUVUQVNUQVRFTUVOVF9SVUxFX05BTUUgfSBmcm9tIFwiLi9ydWxlTmFtZXNcIjtcblxuY29uc3QgeyBmaWx0ZXIsIHVuc2hpZnQgfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21iaW5lZEN1c3RvbUdyYW1tYXIge1xuICBjb25zdHJ1Y3RvcihsZXhpY2FsUGF0dGVybiwgcnVsZU1hcCkge1xuICAgIHRoaXMubGV4aWNhbFBhdHRlcm4gPSBsZXhpY2FsUGF0dGVybjtcbiAgICB0aGlzLnJ1bGVNYXAgPSBydWxlTWFwO1xuICB9XG4gIFxuICBnZXRMZXhpY2FsUGF0dGVybigpIHtcbiAgICByZXR1cm4gdGhpcy5sZXhpY2FsUGF0dGVybjtcbiAgfVxuXG4gIGdldFJ1bGVNYXAoKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZU1hcDtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tQ3VzdG9tR3JhbW1hcnMoY3VzdG9tR3JhbW1hcnMpIHtcbiAgICBjb25zdCBtZXRhc3RhdGVtZW50UnVsZXMgPSBtZXRhc3RhdGVtZW50UnVsZXNGcm9tQ3VzdG9tR3JhbW1hcnNBbmREZWZhdWx0Qk5GKGN1c3RvbUdyYW1tYXJzKSxcbiAgICAgICAgICBzdGF0ZW1lbnRSdWxlcyA9IHN0YXRlbWVudFJ1bGVzRnJvbUN1c3RvbUdyYW1tYXJzQW5kRGVmYXVsdEJORihjdXN0b21HcmFtbWFycyksXG4gICAgICAgICAgZXhwcmVzc2lvblJ1bGVzID0gZXhwcmVzc2lvblJ1bGVzRnJvbUN1c3RvbUdyYW1tYXJzQW5kRGVmYXVsdEJORihjdXN0b21HcmFtbWFycyksXG4gICAgICAgICAgdGVybVJ1bGVzID0gdGVybVJ1bGVzRnJvbUN1c3RvbUdyYW1tYXJzQW5kRGVmYXVsdEJORihjdXN0b21HcmFtbWFycyksXG4gICAgICAgICAgbGV4aWNhbFBhdHRlcm4gPSBsZXhpY2FsUGF0dGVybkZyb21DdXN0b21HcmFtbWFycyhjdXN0b21HcmFtbWFycyksXG4gICAgICAgICAgcnVsZXMgPSBbXG4gICAgICAgICAgICAuLi5tZXRhc3RhdGVtZW50UnVsZXMsXG4gICAgICAgICAgICAuLi5zdGF0ZW1lbnRSdWxlcyxcbiAgICAgICAgICAgIC4uLmV4cHJlc3Npb25SdWxlcyxcbiAgICAgICAgICAgIC4uLnRlcm1SdWxlc1xuICAgICAgICAgIF0sXG4gICAgICAgICAgcnVsZU1hcCA9IHJ1bGVNYXBGcm9tUnVsZXMocnVsZXMpO1xuXG4gICAgY29uc3QgY29tYmluZWRDdXN0b21HcmFtbWFyID0gbmV3IENvbWJpbmVkQ3VzdG9tR3JhbW1hcihsZXhpY2FsUGF0dGVybiwgcnVsZU1hcCk7XG4gICAgXG4gICAgcmV0dXJuIGNvbWJpbmVkQ3VzdG9tR3JhbW1hcjtcbiAgfVxufVxuXG5mdW5jdGlvbiBtZXRhc3RhdGVtZW50UnVsZXNGcm9tQ3VzdG9tR3JhbW1hcnNBbmREZWZhdWx0Qk5GKGN1c3RvbUdyYW1tYXJzKSB7XG4gIGNvbnN0IG1ldGFzdGF0ZW1lbnRSdWxlTmFtZSA9IE1FVEFTVEFURU1FTlRfUlVMRV9OQU1FLCAgLy8vXG4gICAgICAgIG1ldGFzdGF0ZW1lbnRSdWxlcyA9IHJ1bGVzRnJvbVJ1bGVOYW1lQ3VzdG9tR3JhbW1hcnNBbmREZWZhdWx0Qk5GKG1ldGFzdGF0ZW1lbnRSdWxlTmFtZSwgY3VzdG9tR3JhbW1hcnMpO1xuXG4gIHJldHVybiBtZXRhc3RhdGVtZW50UnVsZXM7XG59XG5cbmZ1bmN0aW9uIHN0YXRlbWVudFJ1bGVzRnJvbUN1c3RvbUdyYW1tYXJzQW5kRGVmYXVsdEJORihjdXN0b21HcmFtbWFycykge1xuICBjb25zdCBzdGF0ZW1lbnRSdWxlTmFtZSA9IFNUQVRFTUVOVF9SVUxFX05BTUUsICAvLy9cbiAgICAgICAgc3RhdGVtZW50UnVsZXMgPSBydWxlc0Zyb21SdWxlTmFtZUN1c3RvbUdyYW1tYXJzQW5kRGVmYXVsdEJORihzdGF0ZW1lbnRSdWxlTmFtZSwgY3VzdG9tR3JhbW1hcnMpO1xuXG4gIHJldHVybiBzdGF0ZW1lbnRSdWxlcztcbn1cblxuZnVuY3Rpb24gZXhwcmVzc2lvblJ1bGVzRnJvbUN1c3RvbUdyYW1tYXJzQW5kRGVmYXVsdEJORihjdXN0b21HcmFtbWFycykge1xuICBjb25zdCBleHByZXNzaW9uUnVsZU5hbWUgPSBFWFBSRVNTSU9OX1JVTEVfTkFNRSwgIC8vL1xuICAgICAgICBleHByZXNzaW9uUnVsZXMgPSBydWxlc0Zyb21SdWxlTmFtZUN1c3RvbUdyYW1tYXJzQW5kRGVmYXVsdEJORihleHByZXNzaW9uUnVsZU5hbWUsIGN1c3RvbUdyYW1tYXJzKTtcblxuICByZXR1cm4gZXhwcmVzc2lvblJ1bGVzO1xufVxuXG5mdW5jdGlvbiB0ZXJtUnVsZXNGcm9tQ3VzdG9tR3JhbW1hcnNBbmREZWZhdWx0Qk5GKGN1c3RvbUdyYW1tYXJzKSB7XG4gIGNvbnN0IHRlcm1SdWxlTmFtZSA9IFRFUk1fUlVMRV9OQU1FLCAgLy8vXG4gICAgICAgIHRlcm1SdWxlcyA9IHJ1bGVzRnJvbVJ1bGVOYW1lQ3VzdG9tR3JhbW1hcnNBbmREZWZhdWx0Qk5GKHRlcm1SdWxlTmFtZSwgY3VzdG9tR3JhbW1hcnMpO1xuXG4gIHJldHVybiB0ZXJtUnVsZXM7XG59XG5cbmZ1bmN0aW9uIGxleGljYWxQYXR0ZXJuRnJvbUN1c3RvbUdyYW1tYXJzKGN1c3RvbUdyYW1tYXJzKSB7XG4gIGNvbnN0IGxleGljYWxQYXR0ZXJucyA9IGxleGljYWxQYXR0ZXJuc0Zyb21DdXN0b21HcmFtbWFycyhjdXN0b21HcmFtbWFycyksXG4gICAgICAgIGRlZmF1bHRDdXN0b21HcmFtbWFyTGV4aWNhbFBhdHRlcm4gPSBkZWZhdWx0Q3VzdG9tR3JhbW1hci5nZXRMZXhpY2FsUGF0dGVybigpLFxuICAgICAgICBkZWZhdWx0TGV4aWNhbFBhdHRlcm4gPSBkZWZhdWx0Q3VzdG9tR3JhbW1hckxleGljYWxQYXR0ZXJuOyAvLy9cblxuICBsZXhpY2FsUGF0dGVybnMucmV2ZXJzZSgpO1xuXG4gIGxleGljYWxQYXR0ZXJucy5wdXNoKGRlZmF1bHRMZXhpY2FsUGF0dGVybik7XG5cbiAgZmlsdGVyKGxleGljYWxQYXR0ZXJucywgKGxleGljYWxQYXR0ZXJuKSA9PiB7XG4gICAgaWYgKGxleGljYWxQYXR0ZXJuICE9PSBFTVBUWV9TVFJJTkcpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3QgbGV4aWNhbFBhdHRlcm5zU3RyaW5nID0gbGV4aWNhbFBhdHRlcm5zLmpvaW4oXCJ8XCIpLCAvLy9cbiAgICAgICAgbGV4aWNhbFBhdHRlcm4gPSBgXig/OiR7bGV4aWNhbFBhdHRlcm5zU3RyaW5nfSlgO1xuXG4gIHJldHVybiBsZXhpY2FsUGF0dGVybjtcbn1cblxuZnVuY3Rpb24gcmVtYWluaW5nUnVsZXNGcm9tUnVsZXNBbmRNYWluUnVsZShydWxlcywgbWFpblJ1bGUpIHtcbiAgY29uc3QgcmVtYWluaW5nUnVsZXMgPSBydWxlcy5maWx0ZXIoKHJ1bGUpID0+IHtcbiAgICBpZiAocnVsZSAhPT0gbWFpblJ1bGUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHJlbWFpbmluZ1J1bGVzO1xufVxuXG5mdW5jdGlvbiBtYWluUnVsZUZyb21SdWxlTmFtZURlZmF1bHRCTkZBbmRCTkZzKHJ1bGVOYW1lLCBibmZzKSB7XG4gIGNvbnN0IGRlZmF1bHRDdXN0b21HcmFtbWFyQk5GID0gZGVmYXVsdEN1c3RvbUdyYW1tYXIuZ2V0Qk5GKHJ1bGVOYW1lKSxcbiAgICAgICAgZGVmYXVsdEJORiA9IGRlZmF1bHRDdXN0b21HcmFtbWFyQk5GLCAvLy9cbiAgICAgICAgZGVmYXVsdFJ1bGVzID0gcnVsZXNGcm9tQk5GKGRlZmF1bHRCTkYpLFxuICAgICAgICBkZWZhdWx0TWFpblJ1bGUgPSBmaW5kUnVsZUJ5UnVsZU5hbWUocnVsZU5hbWUsIGRlZmF1bHRSdWxlcyksXG4gICAgICAgIGRlZmF1bHRNYWluUnVsZURlZmluaXRpb25zID0gZGVmYXVsdE1haW5SdWxlLmdldERlZmluaXRpb25zKCk7XG5cbiAgYm5mcy5mb3JFYWNoKChibmYpID0+IHtcbiAgICBjb25zdCBydWxlcyA9IHJ1bGVzRnJvbUJORihibmYpLFxuICAgICAgICAgIG1haW5SdWxlID0gZmluZFJ1bGVCeVJ1bGVOYW1lKHJ1bGVOYW1lLCBydWxlcyksXG4gICAgICAgICAgbWFpblJ1bGVEZWZpbml0aW9ucyA9IChtYWluUnVsZSAhPT0gbnVsbCkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1haW5SdWxlLmdldERlZmluaXRpb25zKCkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW107XG5cbiAgICB1bnNoaWZ0KGRlZmF1bHRNYWluUnVsZURlZmluaXRpb25zLCBtYWluUnVsZURlZmluaXRpb25zKTtcbiAgfSk7XG5cbiAgY29uc3QgbWFpblJ1bGUgPSBkZWZhdWx0TWFpblJ1bGU7IC8vL1xuXG4gIHJldHVybiBtYWluUnVsZTtcbn1cblxuZnVuY3Rpb24gcmVtYWluaW5nUnVsZXNGcm9tUnVsZU5hbWVEZWZhdWx0Qk5GQW5kQk5GcyhydWxlTmFtZSwgYm5mcykge1xuICBjb25zdCBkZWZhdWx0Q3VzdG9tR3JhbW1hckJORiA9IGRlZmF1bHRDdXN0b21HcmFtbWFyLmdldEJORihydWxlTmFtZSksXG4gICAgICAgIGRlZmF1bHRCTkYgPSBkZWZhdWx0Q3VzdG9tR3JhbW1hckJORiwgLy8vXG4gICAgICAgIGRlZmF1bHRSdWxlcyA9IHJ1bGVzRnJvbUJORihkZWZhdWx0Qk5GKSxcbiAgICAgICAgZGVmYXVsdE1haW5SdWxlID0gZmluZFJ1bGVCeVJ1bGVOYW1lKHJ1bGVOYW1lLCBkZWZhdWx0UnVsZXMpLFxuICAgICAgICBkZWZhdWx0UmVtYWluaW5nUnVsZXMgPSByZW1haW5pbmdSdWxlc0Zyb21SdWxlc0FuZE1haW5SdWxlKGRlZmF1bHRSdWxlcywgZGVmYXVsdE1haW5SdWxlKTtcblxuICBibmZzLmZvckVhY2goKGJuZikgPT4ge1xuICAgIGNvbnN0IHJ1bGVzID0gcnVsZXNGcm9tQk5GKGJuZiksXG4gICAgICAgICAgbWFpblJ1bGUgPSBmaW5kUnVsZUJ5UnVsZU5hbWUocnVsZU5hbWUsIHJ1bGVzKSxcbiAgICAgICAgICByZW1haW5pbmdSdWxlcyA9IHJlbWFpbmluZ1J1bGVzRnJvbVJ1bGVzQW5kTWFpblJ1bGUocnVsZXMsIG1haW5SdWxlKTtcblxuICAgIHVuc2hpZnQoZGVmYXVsdFJlbWFpbmluZ1J1bGVzLCByZW1haW5pbmdSdWxlcyk7XG4gIH0pO1xuXG4gIGNvbnN0IHJlbWFpbmluZ1J1bGVzID0gZGVmYXVsdFJlbWFpbmluZ1J1bGVzOyAvLy9cblxuICByZXR1cm4gcmVtYWluaW5nUnVsZXM7XG59XG5cbmZ1bmN0aW9uIHJ1bGVzRnJvbVJ1bGVOYW1lQ3VzdG9tR3JhbW1hcnNBbmREZWZhdWx0Qk5GKHJ1bGVOYW1lLCBjdXN0b21HcmFtbWFycykge1xuICBjb25zdCBibmZzID0gYm5mc0Zyb21SdWxlTmFtZUFuZEN1c3RvbUdyYW1tYXJzKHJ1bGVOYW1lLCBjdXN0b21HcmFtbWFycyksXG4gICAgICAgIG1haW5SdWxlID0gbWFpblJ1bGVGcm9tUnVsZU5hbWVEZWZhdWx0Qk5GQW5kQk5GcyhydWxlTmFtZSwgYm5mcyksXG4gICAgICAgIHJlbWFpbmluZ1J1bGVzID0gcmVtYWluaW5nUnVsZXNGcm9tUnVsZU5hbWVEZWZhdWx0Qk5GQW5kQk5GcyhydWxlTmFtZSwgYm5mcyksXG4gICAgICAgIHJ1bGVzID0gW10uY29uY2F0KG1haW5SdWxlKS5jb25jYXQocmVtYWluaW5nUnVsZXMpO1xuXG4gIHJldHVybiBydWxlcztcbn1cbiJdLCJuYW1lcyI6WyJmaWx0ZXIiLCJhcnJheVV0aWxpdGllcyIsInVuc2hpZnQiLCJDb21iaW5lZEN1c3RvbUdyYW1tYXIiLCJsZXhpY2FsUGF0dGVybiIsInJ1bGVNYXAiLCJnZXRMZXhpY2FsUGF0dGVybiIsImdldFJ1bGVNYXAiLCJmcm9tQ3VzdG9tR3JhbW1hcnMiLCJjdXN0b21HcmFtbWFycyIsIm1ldGFzdGF0ZW1lbnRSdWxlcyIsIm1ldGFzdGF0ZW1lbnRSdWxlc0Zyb21DdXN0b21HcmFtbWFyc0FuZERlZmF1bHRCTkYiLCJzdGF0ZW1lbnRSdWxlcyIsInN0YXRlbWVudFJ1bGVzRnJvbUN1c3RvbUdyYW1tYXJzQW5kRGVmYXVsdEJORiIsImV4cHJlc3Npb25SdWxlcyIsImV4cHJlc3Npb25SdWxlc0Zyb21DdXN0b21HcmFtbWFyc0FuZERlZmF1bHRCTkYiLCJ0ZXJtUnVsZXMiLCJ0ZXJtUnVsZXNGcm9tQ3VzdG9tR3JhbW1hcnNBbmREZWZhdWx0Qk5GIiwibGV4aWNhbFBhdHRlcm5Gcm9tQ3VzdG9tR3JhbW1hcnMiLCJydWxlcyIsInJ1bGVNYXBGcm9tUnVsZXMiLCJjb21iaW5lZEN1c3RvbUdyYW1tYXIiLCJtZXRhc3RhdGVtZW50UnVsZU5hbWUiLCJNRVRBU1RBVEVNRU5UX1JVTEVfTkFNRSIsInJ1bGVzRnJvbVJ1bGVOYW1lQ3VzdG9tR3JhbW1hcnNBbmREZWZhdWx0Qk5GIiwic3RhdGVtZW50UnVsZU5hbWUiLCJTVEFURU1FTlRfUlVMRV9OQU1FIiwiZXhwcmVzc2lvblJ1bGVOYW1lIiwiRVhQUkVTU0lPTl9SVUxFX05BTUUiLCJ0ZXJtUnVsZU5hbWUiLCJURVJNX1JVTEVfTkFNRSIsImxleGljYWxQYXR0ZXJucyIsImxleGljYWxQYXR0ZXJuc0Zyb21DdXN0b21HcmFtbWFycyIsImRlZmF1bHRDdXN0b21HcmFtbWFyTGV4aWNhbFBhdHRlcm4iLCJkZWZhdWx0Q3VzdG9tR3JhbW1hciIsImRlZmF1bHRMZXhpY2FsUGF0dGVybiIsInJldmVyc2UiLCJwdXNoIiwiRU1QVFlfU1RSSU5HIiwibGV4aWNhbFBhdHRlcm5zU3RyaW5nIiwiam9pbiIsInJlbWFpbmluZ1J1bGVzRnJvbVJ1bGVzQW5kTWFpblJ1bGUiLCJtYWluUnVsZSIsInJlbWFpbmluZ1J1bGVzIiwicnVsZSIsIm1haW5SdWxlRnJvbVJ1bGVOYW1lRGVmYXVsdEJORkFuZEJORnMiLCJydWxlTmFtZSIsImJuZnMiLCJkZWZhdWx0Q3VzdG9tR3JhbW1hckJORiIsImdldEJORiIsImRlZmF1bHRCTkYiLCJkZWZhdWx0UnVsZXMiLCJydWxlc0Zyb21CTkYiLCJkZWZhdWx0TWFpblJ1bGUiLCJmaW5kUnVsZUJ5UnVsZU5hbWUiLCJkZWZhdWx0TWFpblJ1bGVEZWZpbml0aW9ucyIsImdldERlZmluaXRpb25zIiwiZm9yRWFjaCIsImJuZiIsIm1haW5SdWxlRGVmaW5pdGlvbnMiLCJyZW1haW5pbmdSdWxlc0Zyb21SdWxlTmFtZURlZmF1bHRCTkZBbmRCTkZzIiwiZGVmYXVsdFJlbWFpbmluZ1J1bGVzIiwiYm5mc0Zyb21SdWxlTmFtZUFuZEN1c3RvbUdyYW1tYXJzIiwiY29uY2F0Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7O0FBRWtCLElBQUEsVUFBVyxXQUFYLFdBQVcsQ0FBQTtBQUVULElBQUEscUJB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