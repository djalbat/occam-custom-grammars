"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _necessary = require("necessary");

var _occamGrammarUtilities = require("occam-grammar-utilities");

var _defaultCustomGrammar = _interopRequireDefault(require("./defaultCustomGrammar"));

var _rules = require("./utilities/rules");

var _ruleName = require("./utilities/ruleName");

var _customGrammars = require("./utilities/customGrammars");

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var first = _necessary.arrayUtilities.first,
    unshift = _necessary.arrayUtilities.unshift;

var CombinedCustomGrammar = /*#__PURE__*/function () {
  function CombinedCustomGrammar(lexicalPattern, ruleMap) {
    _classCallCheck(this, CombinedCustomGrammar);

    this.lexicalPattern = lexicalPattern;
    this.ruleMap = ruleMap;
  }

  _createClass(CombinedCustomGrammar, [{
    key: "getLexicalPattern",
    value: function getLexicalPattern() {
      return this.lexicalPattern;
    }
  }, {
    key: "getRuleMap",
    value: function getRuleMap() {
      return this.ruleMap;
    }
  }], [{
    key: "fromCustomGrammars",
    value: function fromCustomGrammars(customGrammars) {
      var lexicalPattern = lexicalPatternFromCustomGrammars(customGrammars),
          startRule = startRuleFromNothing(),
          ruleMap = ruleMapFromCustomGrammars(customGrammars);
      ruleMap[_constants.START_RULE_NAME] = startRule;
      (0, _occamGrammarUtilities.eliminateLeftRecursion)(startRule, ruleMap);
      delete ruleMap[_constants.START_RULE_NAME];
      var combinedCustomGrammar = new CombinedCustomGrammar(lexicalPattern, ruleMap);
      return combinedCustomGrammar;
    }
  }]);

  return CombinedCustomGrammar;
}();

exports["default"] = CombinedCustomGrammar;

function lexicalPatternFromCustomGrammars(customGrammars) {
  var lexicalPatterns = (0, _customGrammars.lexicalPatternsFromCustomGrammars)(customGrammars),
      defaultCustomGrammarLexicalPattern = _defaultCustomGrammar["default"].getLexicalPattern(),
      defaultLexicalPattern = defaultCustomGrammarLexicalPattern; ///


  lexicalPatterns.unshift(defaultLexicalPattern);
  var lexicalPatternsString = lexicalPatterns.reverse().join("|"),
      ///
  lexicalPattern = "^(?:".concat(lexicalPatternsString, ")");
  return lexicalPattern;
}

function ruleMapFromCustomGrammars(customGrammars) {
  var metastatementRuleName = _constants.METASTATEMENT_RULE_NAME,
      ///
  statementRuleName = _constants.STATEMENT_RULE_NAME,
      ///
  expressionRuleName = _constants.EXPRESSION_RULE_NAME,
      ///
  termRuleName = _constants.TERM_RULE_NAME,
      ///
  metastatementRules = rulesFromRuleNameCustomGrammarsAndDefaultBNF(metastatementRuleName, customGrammars),
      statementRules = rulesFromRuleNameCustomGrammarsAndDefaultBNF(statementRuleName, customGrammars),
      expressionRules = rulesFromRuleNameCustomGrammarsAndDefaultBNF(expressionRuleName, customGrammars),
      termRules = rulesFromRuleNameCustomGrammarsAndDefaultBNF(termRuleName, customGrammars),
      rules = [].concat(metastatementRules).concat(statementRules).concat(expressionRules).concat(termRules),
      ruleMap = rules.reduce(function (ruleMap, rule) {
    var ruleName = rule.getName();
    ruleMap[ruleName] = rule;
    return ruleMap;
  }, []);
  return ruleMap;
}

function startRuleFromNothing() {
  var startRulesBNF = " ".concat(_constants.START_RULE_NAME, " ::= ").concat(_constants.METASTATEMENT_RULE_NAME, " | ").concat(_constants.STATEMENT_RULE_NAME, " | ").concat(_constants.EXPRESSION_RULE_NAME, " | ").concat(_constants.TERM_RULE_NAME, " ; "),
      startRules = (0, _rules.rulesFromBNF)(startRulesBNF),
      firstStartRule = first(startRules),
      startRule = firstStartRule; ///

  return startRule;
}

function remainingRulesFromRulesAndMainRule(rules, mainRule) {
  var remainingRules = rules.filter(function (rule) {
    if (rule !== mainRule) {
      return true;
    }
  });
  return remainingRules;
}

function mainRuleFromRuleNameDefaultBNFAndBNFs(ruleName, bnfs) {
  var defaultCustomGrammarBNF = _defaultCustomGrammar["default"].getBNF(ruleName),
      defaultBNF = defaultCustomGrammarBNF,
      ///
  defaultRules = (0, _rules.rulesFromBNF)(defaultBNF),
      defaultMainRule = (0, _ruleName.findRuleByRuleName)(ruleName, defaultRules),
      defaultMainRuleDefinitions = defaultMainRule.getDefinitions();

  bnfs.forEach(function (bnf) {
    var rules = (0, _rules.rulesFromBNF)(bnf),
        mainRule = (0, _ruleName.findRuleByRuleName)(ruleName, rules),
        mainRuleDefinitions = mainRule !== null ? mainRule.getDefinitions() : [];
    unshift(defaultMainRuleDefinitions, mainRuleDefinitions);
  });
  var mainRule = defaultMainRule; ///

  return mainRule;
}

function remainingRulesFromRuleNameDefaultBNFAndBNFs(ruleName, bnfs) {
  var defaultCustomGrammarBNF = _defaultCustomGrammar["default"].getBNF(ruleName),
      defaultBNF = defaultCustomGrammarBNF,
      ///
  defaultRules = (0, _rules.rulesFromBNF)(defaultBNF),
      defaultMainRule = (0, _ruleName.findRuleByRuleName)(ruleName, defaultRules),
      defaultRemainingRules = remainingRulesFromRulesAndMainRule(defaultRules, defaultMainRule);

  bnfs.forEach(function (bnf) {
    var rules = (0, _rules.rulesFromBNF)(bnf),
        mainRule = (0, _ruleName.findRuleByRuleName)(ruleName, rules),
        remainingRules = remainingRulesFromRulesAndMainRule(rules, mainRule);
    unshift(defaultRemainingRules, remainingRules);
  });
  var remainingRules = defaultRemainingRules; ///

  return remainingRules;
}

function rulesFromRuleNameCustomGrammarsAndDefaultBNF(ruleName, customGrammars) {
  var bnfs = (0, _customGrammars.bnfsFromRuleNameAndCustomGrammars)(ruleName, customGrammars),
      mainRule = mainRuleFromRuleNameDefaultBNFAndBNFs(ruleName, bnfs),
      remainingRules = remainingRulesFromRuleNameDefaultBNFAndBNFs(ruleName, bnfs),
      rules = [].concat(mainRule).concat(remainingRules);
  return rules;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,