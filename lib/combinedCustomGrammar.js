'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var parsers = require('occam-parsers'),
    ///
necessary = require('necessary'),
    grammarUtilities = require('occam-grammar-utilities'); ///

var rulesUtilities = require('./utilities/rules'),
    ruleNameUtilities = require('./utilities/ruleName'),
    customGrammarsUtilities = require('./utilities/customGrammars');

var rulesFromBNF = rulesUtilities.rulesFromBNF,
    arrayUtilities = necessary.arrayUtilities,
    unshift = arrayUtilities.unshift,
    findRuleByRuleName = ruleNameUtilities.findRuleByRuleName,
    eliminateImplicitLeftRecursion = grammarUtilities.eliminateImplicitLeftRecursion,
    lexicalPatternsFromCustomGrammars = customGrammarsUtilities.lexicalPatternsFromCustomGrammars,
    bnfsFromRuleNameAndCustomGrammars = customGrammarsUtilities.bnfsFromRuleNameAndCustomGrammars,
    termDefaultCustomGrammarBNF = parsers.termDefaultCustomGrammarBNF,
    statementDefaultCustomGrammarBNF = parsers.statementDefaultCustomGrammarBNF,
    expressionDefaultCustomGrammarBNF = parsers.expressionDefaultCustomGrammarBNF,
    metastatementDefaultCustomGrammarBNF = parsers.metastatementDefaultCustomGrammarBNF;

var CombinedCustomGrammar = function () {
  function CombinedCustomGrammar(lexicalPattern, rules) {
    _classCallCheck(this, CombinedCustomGrammar);

    this.lexicalPattern = lexicalPattern;
    this.rules = rules;
  }

  _createClass(CombinedCustomGrammar, [{
    key: 'getLexicalPattern',
    value: function getLexicalPattern() {
      return this.lexicalPattern;
    }
  }, {
    key: 'getRules',
    value: function getRules() {
      return this.rules;
    }
  }], [{
    key: 'fromCustomGrammars',
    value: function fromCustomGrammars(customGrammars) {
      var combinedLexicalPattern = combinedLexicalPatternFromCustomGrammars(customGrammars),
          combinedRules = combinedRulesFromCustomGrammars(customGrammars),
          lexicalPattern = combinedLexicalPattern,
          ///
      rules = combinedRules,
          ///
      combinedCustomGrammar = new CombinedCustomGrammar(lexicalPattern, rules);

      return combinedCustomGrammar;
    }
  }]);

  return CombinedCustomGrammar;
}();

module.exports = CombinedCustomGrammar;

function combinedLexicalPatternFromCustomGrammars(customGrammars) {
  var lexicalPatterns = lexicalPatternsFromCustomGrammars(customGrammars),
      combinedLexicalPattern = lexicalPatterns.reverse().join('|'); ///

  return combinedLexicalPattern;
}

function combinedRulesFromCustomGrammars(customGrammars) {
  var metastatementRuleName = 'metastatement',
      statementRuleName = 'statement',
      expressionRuleName = 'expression',
      termRuleName = 'term',
      metastatementRules = rulesFromRuleNameCustomGrammarsAndDefaultCustomGrammarBNF(metastatementRuleName, customGrammars, metastatementDefaultCustomGrammarBNF),
      statementRules = rulesFromRuleNameCustomGrammarsAndDefaultCustomGrammarBNF(statementRuleName, customGrammars, statementDefaultCustomGrammarBNF),
      expressionRules = rulesFromRuleNameCustomGrammarsAndDefaultCustomGrammarBNF(expressionRuleName, customGrammars, expressionDefaultCustomGrammarBNF),
      termRules = rulesFromRuleNameCustomGrammarsAndDefaultCustomGrammarBNF(termRuleName, customGrammars, termDefaultCustomGrammarBNF),
      combinedRules = [].concat(metastatementRules).concat(statementRules).concat(expressionRules).concat(termRules);

  return combinedRules;
}

function rulesFromRuleNameCustomGrammarsAndDefaultCustomGrammarBNF(ruleName, customGrammars, defaultCustomGrammarBNF) {
  var defaultBNF = defaultCustomGrammarBNF,
      ///
  bnfs = bnfsFromRuleNameAndCustomGrammars(ruleName, customGrammars),
      mainRule = mainRuleFromRuleNameDefaultBNFAndBNFs(ruleName, defaultBNF, bnfs),
      remainingRules = remainingRulesFromRuleNameDefaultBNFAndBNFs(ruleName, defaultBNF, bnfs);

  var rules = void 0;

  rules = [].concat(mainRule).concat(remainingRules);

  rules = eliminateImplicitLeftRecursion(rules);

  return rules;
}

function remainingRulesFromRulesAndMainRule(rules, mainRule) {
  var remainingRules = rules.filter(function (rule) {
    if (rule !== mainRule) {
      return true;
    }
  });

  return remainingRules;
}

function mainRuleFromRuleNameDefaultBNFAndBNFs(ruleName, defaultBNF, bnfs) {
  var defaultRules = rulesFromBNF(defaultBNF),
      defaultMainRule = findRuleByRuleName(ruleName, defaultRules),
      defaultMainRuleDefinitions = defaultMainRule.getDefinitions();

  bnfs.forEach(function (bnf) {
    var rules = rulesFromBNF(bnf),
        mainRule = findRuleByRuleName(ruleName, rules),
        mainRuleDefinitions = mainRule !== null ? mainRule.getDefinitions() : [];

    unshift(defaultMainRuleDefinitions, mainRuleDefinitions);
  });

  var mainRule = defaultMainRule; ///

  return mainRule;
}

function remainingRulesFromRuleNameDefaultBNFAndBNFs(ruleName, defaultBNF, bnfs) {
  var defaultRules = rulesFromBNF(defaultBNF),
      defaultMainRule = findRuleByRuleName(ruleName, defaultRules),
      defaultRemainingRules = remainingRulesFromRulesAndMainRule(defaultRules, defaultMainRule);

  bnfs.forEach(function (bnf) {
    var rules = rulesFromBNF(bnf),
        mainRule = findRuleByRuleName(ruleName, rules),
        remainingRules = remainingRulesFromRulesAndMainRule(rules, mainRule);

    unshift(defaultRemainingRules, remainingRules);
  });

  var remainingRules = defaultRemainingRules; ///

  return remainingRules;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,