'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var lexers = require('occam-lexers'),
    parsers = require('occam-parsers'),
    necessary = require('necessary'),
    grammarUtilities = require('occam-grammar-utilities');

var rulesUtilities = require('./utilities/rules'),
    ruleNameUtilities = require('./utilities/ruleName'),
    customGrammarsUtilities = require('./utilities/customGrammars');

var rulesFromBNF = rulesUtilities.rulesFromBNF,
    arrayUtilities = necessary.arrayUtilities,
    unshift = arrayUtilities.unshift,
    findRuleByRuleName = ruleNameUtilities.findRuleByRuleName,
    defaultLexicalPattern = lexers.defaultLexicalPattern,
    eliminateImplicitLeftRecursion = grammarUtilities.eliminateImplicitLeftRecursion,
    lexicalPatternsFromCustomGrammars = customGrammarsUtilities.lexicalPatternsFromCustomGrammars,
    bnfsFromRuleNameAndCustomGrammars = customGrammarsUtilities.bnfsFromRuleNameAndCustomGrammars,
    termDefaultBNF = parsers.termDefaultBNF,
    statementDefaultBNF = parsers.statementDefaultBNF,
    expressionDefaultBNF = parsers.expressionDefaultBNF,
    metastatementDefaultBNF = parsers.metastatementDefaultBNF;

var CombinedCustomGrammar = function () {
  function CombinedCustomGrammar(lexicalPattern, rules) {
    _classCallCheck(this, CombinedCustomGrammar);

    this.lexicalPattern = lexicalPattern;
    this.rules = rules;
  }

  _createClass(CombinedCustomGrammar, [{
    key: 'getLexicalPattern',
    value: function getLexicalPattern() {
      return this.lexicalPattern;
    }
  }, {
    key: 'getRules',
    value: function getRules() {
      return this.rules;
    }
  }], [{
    key: 'fromCustomGrammars',
    value: function fromCustomGrammars(customGrammars) {
      var combinedLexicalPattern = combinedLexicalPatternFromCustomGrammars(customGrammars),
          combinedRules = combinedRulesFromCustomGrammars(customGrammars),
          lexicalPattern = combinedLexicalPattern,
          ///
      rules = combinedRules,
          ///
      combinedCustomGrammar = new CombinedCustomGrammar(lexicalPattern, rules);

      return combinedCustomGrammar;
    }
  }]);

  return CombinedCustomGrammar;
}();

module.exports = CombinedCustomGrammar;

function combinedLexicalPatternFromCustomGrammars(customGrammars) {
  var lexicalPatterns = lexicalPatternsFromCustomGrammars(customGrammars);

  lexicalPatterns.push(defaultLexicalPattern);

  var combinedLexicalPattern = lexicalPatterns.reverse().join('|'); ///

  return combinedLexicalPattern;
}

function combinedRulesFromCustomGrammars(customGrammars) {
  var metastatementRuleName = 'metastatement',
      statementRuleName = 'statement',
      expressionRuleName = 'expression',
      termRuleName = 'term',
      metastatementRules = rulesFromRuleNameCustomGrammarsAndDefaultBNF(metastatementRuleName, customGrammars, metastatementDefaultBNF),
      statementRules = rulesFromRuleNameCustomGrammarsAndDefaultBNF(statementRuleName, customGrammars, statementDefaultBNF),
      expressionRules = rulesFromRuleNameCustomGrammarsAndDefaultBNF(expressionRuleName, customGrammars, expressionDefaultBNF),
      termRules = rulesFromRuleNameCustomGrammarsAndDefaultBNF(termRuleName, customGrammars, termDefaultBNF),
      combinedRules = [].concat(metastatementRules).concat(statementRules).concat(expressionRules).concat(termRules);

  return combinedRules;
}

function rulesFromRuleNameCustomGrammarsAndDefaultBNF(ruleName, customGrammars, defaultBNF) {
  var bnfs = bnfsFromRuleNameAndCustomGrammars(ruleName, customGrammars),
      mainRule = mainRuleFromRuleNameDefaultBNFAndBNFs(ruleName, defaultBNF, bnfs),
      remainingRules = remainingRulesFromRuleNameDefaultBNFAndBNFs(ruleName, defaultBNF, bnfs);

  var rules = void 0;

  rules = [].concat(mainRule).concat(remainingRules);

  rules = eliminateImplicitLeftRecursion(rules);

  return rules;
}

function remainingRulesFromRulesAndMainRule(rules, mainRule) {
  var remainingRules = rules.filter(function (rule) {
    if (rule !== mainRule) {
      return true;
    }
  });

  return remainingRules;
}

function mainRuleFromRuleNameDefaultBNFAndBNFs(ruleName, defaultBNF, bnfs) {
  var defaultRules = rulesFromBNF(defaultBNF),
      defaultMainRule = findRuleByRuleName(ruleName, defaultRules),
      defaultMainRuleDefinitions = defaultMainRule.getDefinitions();

  bnfs.forEach(function (bnf) {
    var rules = rulesFromBNF(bnf),
        mainRule = findRuleByRuleName(ruleName, rules),
        mainRuleDefinitions = mainRule !== null ? mainRule.getDefinitions() : [];

    unshift(defaultMainRuleDefinitions, mainRuleDefinitions);
  });

  var mainRule = defaultMainRule; ///

  return mainRule;
}

function remainingRulesFromRuleNameDefaultBNFAndBNFs(ruleName, defaultBNF, bnfs) {
  var defaultRules = rulesFromBNF(defaultBNF),
      defaultMainRule = findRuleByRuleName(ruleName, defaultRules),
      defaultRemainingRules = remainingRulesFromRulesAndMainRule(defaultRules, defaultMainRule);

  bnfs.forEach(function (bnf) {
    var rules = rulesFromBNF(bnf),
        mainRule = findRuleByRuleName(ruleName, rules),
        remainingRules = remainingRulesFromRulesAndMainRule(rules, mainRule);

    unshift(defaultRemainingRules, remainingRules);
  });

  var remainingRules = defaultRemainingRules; ///

  return remainingRules;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9jb21iaW5lZEN1c3RvbUdyYW1tYXIuanMiXSwibmFtZXMiOlsibGV4ZXJzIiwicmVxdWlyZSIsInBhcnNlcnMiLCJuZWNlc3NhcnkiLCJncmFtbWFyVXRpbGl0aWVzIiwicnVsZXNVdGlsaXRpZXMiLCJydWxlTmFtZVV0aWxpdGllcyIsImN1c3RvbUdyYW1tYXJzVXRpbGl0aWVzIiwicnVsZXNGcm9tQk5GIiwiYXJyYXlVdGlsaXRpZXMiLCJ1bnNoaWZ0IiwiZmluZFJ1bGVCeVJ1bGVOYW1lIiwiZGVmYXVsdExleGljYWxQYXR0ZXJuIiwiZWxpbWluYXRlSW1wbGljaXRMZWZ0UmVjdXJzaW9uIiwibGV4aWNhbFBhdHRlcm5zRnJvbUN1c3RvbUdyYW1tYXJzIiwiYm5mc0Zyb21SdWxlTmFtZUFuZEN1c3RvbUdyYW1tYXJzIiwidGVybURlZmF1bHRCTkYiLCJzdGF0ZW1lbnREZWZhdWx0Qk5GIiwiZXhwcmVzc2lvbkRlZmF1bHRCTkYiLCJtZXRhc3RhdGVtZW50RGVmYXVsdEJORiIsIkNvbWJpbmVkQ3VzdG9tR3JhbW1hciIsImxleGljYWxQYXR0ZXJuIiwicnVsZXMiLCJjdXN0b21HcmFtbWFycyIsImNvbWJpbmVkTGV4aWNhbFBhdHRlcm4iLCJjb21iaW5lZExleGljYWxQYXR0ZXJuRnJvbUN1c3RvbUdyYW1tYXJzIiwiY29tYmluZWRSdWxlcyIsImNvbWJpbmVkUnVsZXNGcm9tQ3VzdG9tR3JhbW1hcnMiLCJjb21iaW5lZEN1c3RvbUdyYW1tYXIiLCJtb2R1bGUiLCJleHBvcnRzIiwibGV4aWNhbFBhdHRlcm5zIiwicHVzaCIsInJldmVyc2UiLCJqb2luIiwibWV0YXN0YXRlbWVudFJ1bGVOYW1lIiwic3RhdGVtZW50UnVsZU5hbWUiLCJleHByZXNzaW9uUnVsZU5hbWUiLCJ0ZXJtUnVsZU5hbWUiLCJtZXRhc3RhdGVtZW50UnVsZXMiLCJydWxlc0Zyb21SdWxlTmFtZUN1c3RvbUdyYW1tYXJzQW5kRGVmYXVsdEJORiIsInN0YXRlbWVudFJ1bGVzIiwiZXhwcmVzc2lvblJ1bGVzIiwidGVybVJ1bGVzIiwiY29uY2F0IiwicnVsZU5hbWUiLCJkZWZhdWx0Qk5GIiwiYm5mcyIsIm1haW5SdWxlIiwibWFpblJ1bGVGcm9tUnVsZU5hbWVEZWZhdWx0Qk5GQW5kQk5GcyIsInJlbWFpbmluZ1J1bGVzIiwicmVtYWluaW5nUnVsZXNGcm9tUnVsZU5hbWVEZWZhdWx0Qk5GQW5kQk5GcyIsInJlbWFpbmluZ1J1bGVzRnJvbVJ1bGVzQW5kTWFpblJ1bGUiLCJmaWx0ZXIiLCJydWxlIiwiZGVmYXVsdFJ1bGVzIiwiZGVmYXVsdE1haW5SdWxlIiwiZGVmYXVsdE1haW5SdWxlRGVmaW5pdGlvbnMiLCJnZXREZWZpbml0aW9ucyIsImZvckVhY2giLCJibmYiLCJtYWluUnVsZURlZmluaXRpb25zIiwiZGVmYXVsdFJlbWFpbmluZ1J1bGVzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBRUEsSUFBTUEsU0FBU0MsUUFBUSxjQUFSLENBQWY7QUFBQSxJQUNNQyxVQUFVRCxRQUFRLGVBQVIsQ0FEaEI7QUFBQSxJQUVNRSxZQUFZRixRQUFRLFdBQVIsQ0FGbEI7QUFBQSxJQUdNRyxtQkFBbUJILFFBQVEseUJBQVIsQ0FIekI7O0FBS0EsSUFBTUksaUJBQWlCSixRQUFRLG1CQUFSLENBQXZCO0FBQUEsSUFDTUssb0JBQW9CTCxRQUFRLHNCQUFSLENBRDFCO0FBQUEsSUFFTU0sMEJBQTBCTixRQUFRLDRCQUFSLENBRmhDOztBQUlNLElBQUVPLFlBQUYsR0FBbUJILGNBQW5CLENBQUVHLFlBQUY7QUFBQSxJQUNFQyxjQURGLEdBQ3FCTixTQURyQixDQUNFTSxjQURGO0FBQUEsSUFFRUMsT0FGRixHQUVjRCxjQUZkLENBRUVDLE9BRkY7QUFBQSxJQUdFQyxrQkFIRixHQUd5QkwsaUJBSHpCLENBR0VLLGtCQUhGO0FBQUEsSUFJRUMscUJBSkYsR0FJNEJaLE1BSjVCLENBSUVZLHFCQUpGO0FBQUEsSUFLRUMsOEJBTEYsR0FLcUNULGdCQUxyQyxDQUtFUyw4QkFMRjtBQUFB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RUFBNkJVLFlBQTdCLENBRHhCO0FBQUEsTUFFTU8sd0JBQXdCVixtQ0FBbUNHLFlBQW5DLEVBQWlEQyxlQUFqRCxDQUY5Qjs7QUFJQVQsT0FBS1ksT0FBTCxDQUFhLFVBQVNDLEdBQVQsRUFBYztBQUN6QixRQUFNdEMsUUFBUWQsYUFBYW9ELEdBQWIsQ0FBZDtBQUFBLFFBQ01aLFdBQVdyQyxtQkFBbUJrQyxRQUFuQixFQUE2QnZCLEtBQTdCLENBRGpCO0FBQUEsUUFFTTRCLGlCQUFpQkUsbUNBQW1DOUIsS0FBbkMsRUFBMEMwQixRQUExQyxDQUZ2Qjs7QUFJQXRDLFlBQVFvRCxxQkFBUixFQUErQlosY0FBL0I7QUFDRCxHQU5EOztBQVFBLE1BQU1BLGlCQUFpQlkscUJBQXZCLENBYitFLENBYWpDOztBQUU5QyxTQUFPWixjQUFQO0FBQ0QiLCJmaWxlIjoiY29tYmluZWRDdXN0b21HcmFtbWFyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBsZXhlcnMgPSByZXF1aXJlKCdvY2NhbS1sZXhlcnMnKSxcbiAgICAgIHBhcnNlcnMgPSByZXF1aXJlKCdvY2NhbS1wYXJzZXJzJyksXG4gICAgICBuZWNlc3NhcnkgPSByZXF1aXJlKCduZWNlc3NhcnknKSxcbiAgICAgIGdyYW1tYXJVdGlsaXRpZXMgPSByZXF1aXJlKCdvY2NhbS1ncmFtbWFyLXV0aWxpdGllcycpO1xuXG5jb25zdCBydWxlc1V0aWxpdGllcyA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzL3J1bGVzJyksXG4gICAgICBydWxlTmFtZVV0aWxpdGllcyA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzL3J1bGVOYW1lJyksXG4gICAgICBjdXN0b21HcmFtbWFyc1V0aWxpdGllcyA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzL2N1c3RvbUdyYW1tYXJzJyk7XG5cbmNvbnN0IHsgcnVsZXNGcm9tQk5GIH0gPSBydWxlc1V0aWxpdGllcyxcbiAgICAgIHsgYXJyYXlVdGlsaXRpZXMgfSA9IG5lY2Vzc2FyeSxcbiAgICAgIHsgdW5zaGlmdCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IGZpbmRSdWxlQnlSdWxlTmFtZSB9ID0gcnVsZU5hbWVVdGlsaXRpZXMsXG4gICAgICB7IGRlZmF1bHRMZXhpY2FsUGF0dGVybiB9ID0gbGV4ZXJzLFxuICAgICAgeyBlbGltaW5hdGVJbXBsaWNpdExlZnRSZWN1cnNpb24gfSA9IGdyYW1tYXJVdGlsaXRpZXMsXG4gICAgICB7IGxleGljYWxQYXR0ZXJuc0Zyb21DdXN0b21HcmFtbWFycywgYm5mc0Zyb21SdWxlTmFtZUFuZEN1c3RvbUdyYW1tYXJzIH0gPSBjdXN0b21HcmFtbWFyc1V0aWxpdGllcyxcbiAgICAgIHsgdGVybURlZmF1bHRCTkYsIHN0YXRlbWVudERlZmF1bHRCTkYsIGV4cHJlc3Npb25EZWZhdWx0Qk5GLCBtZXRhc3RhdGVtZW50RGVmYXVsdEJORiB9ID0gcGFyc2VycztcblxuY2xhc3MgQ29tYmluZWRDdXN0b21HcmFtbWFyIHtcbiAgY29uc3RydWN0b3IobGV4aWNhbFBhdHRlcm4sIHJ1bGVzKSB7XG4gICAgdGhpcy5sZXhpY2FsUGF0dGVybiA9IGxleGljYWxQYXR0ZXJuO1xuICAgIHRoaXMucnVsZXMgPSBydWxlcztcbiAgfVxuICBcbiAgZ2V0TGV4aWNhbFBhdHRlcm4oKSB7XG4gICAgcmV0dXJuIHRoaXMubGV4aWNhbFBhdHRlcm47XG4gIH1cblxuICBnZXRSdWxlcygpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcztcbiAgfVxuXG4gIHN0YXRpYyBmcm9tQ3VzdG9tR3JhbW1hcnMoY3VzdG9tR3JhbW1hcnMpIHtcbiAgICBjb25zdCBjb21iaW5lZExleGljYWxQYXR0ZXJuID0gY29tYmluZWRMZXhpY2FsUGF0dGVybkZyb21DdXN0b21HcmFtbWFycyhjdXN0b21HcmFtbWFycyksXG4gICAgICAgICAgY29tYmluZWRSdWxlcyA9IGNvbWJpbmVkUnVsZXNGcm9tQ3VzdG9tR3JhbW1hcnMoY3VzdG9tR3JhbW1hcnMpLFxuICAgICAgICAgIGxleGljYWxQYXR0ZXJuID0gY29tYmluZWRMZXhpY2FsUGF0dGVybiwgIC8vL1xuICAgICAgICAgIHJ1bGVzID0gY29tYmluZWRSdWxlcywgIC8vL1xuICAgICAgICAgIGNvbWJpbmVkQ3VzdG9tR3JhbW1hciA9IG5ldyBDb21iaW5lZEN1c3RvbUdyYW1tYXIobGV4aWNhbFBhdHRlcm4sIHJ1bGVzKTtcbiAgICBcbiAgICByZXR1cm4gY29tYmluZWRDdXN0b21HcmFtbWFyO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tYmluZWRDdXN0b21HcmFtbWFyO1xuXG5mdW5jdGlvbiBjb21iaW5lZExleGljYWxQYXR0ZXJuRnJvbUN1c3RvbUdyYW1tYXJzKGN1c3RvbUdyYW1tYXJzKSB7XG4gIGNvbnN0IGxleGljYWxQYXR0ZXJucyA9IGxleGljYWxQYXR0ZXJuc0Zyb21DdXN0b21HcmFtbWFycyhjdXN0b21HcmFtbWFycyk7XG5cbiAgbGV4aWNhbFBhdHRlcm5zLnB1c2goZGVmYXVsdExleGljYWxQYXR0ZXJuKTtcblxuICBjb25zdCBjb21iaW5lZExleGljYWxQYXR0ZXJuID0gbGV4aWNhbFBhdHRlcm5zLnJldmVyc2UoKS5qb2luKCd8Jyk7IC8vL1xuXG4gIHJldHVybiBjb21iaW5lZExleGljYWxQYXR0ZXJuO1xufVxuXG5mdW5jdGlvbiBjb21iaW5lZFJ1bGVzRnJvbUN1c3RvbUdyYW1tYXJzKGN1c3RvbUdyYW1tYXJzKSB7XG4gIGNvbnN0IG1ldGFzdGF0ZW1lbnRSdWxlTmFtZSA9ICdtZXRhc3RhdGVtZW50JyxcbiAgICAgICAgc3RhdGVtZW50UnVsZU5hbWUgPSAnc3RhdGVtZW50JyxcbiAgICAgICAgZXhwcmVzc2lvblJ1bGVOYW1lID0gJ2V4cHJlc3Npb24nLFxuICAgICAgICB0ZXJtUnVsZU5hbWUgPSAndGVybScsXG4gICAgICAgIG1ldGFzdGF0ZW1lbnRSdWxlcyA9IHJ1bGVzRnJvbVJ1bGVOYW1lQ3VzdG9tR3JhbW1hcnNBbmREZWZhdWx0Qk5GKG1ldGFzdGF0ZW1lbnRSdWxlTmFtZSwgY3VzdG9tR3JhbW1hcnMsIG1ldGFzdGF0ZW1lbnREZWZhdWx0Qk5GKSxcbiAgICAgICAgc3RhdGVtZW50UnVsZXMgPSBydWxlc0Zyb21SdWxlTmFtZUN1c3RvbUdyYW1tYXJzQW5kRGVmYXVsdEJORihzdGF0ZW1lbnRSdWxlTmFtZSwgY3VzdG9tR3JhbW1hcnMsIHN0YXRlbWVudERlZmF1bHRCTkYpLFxuICAgICAgICBleHByZXNzaW9uUnVsZXMgPSBydWxlc0Zyb21SdWxlTmFtZUN1c3RvbUdyYW1tYXJzQW5kRGVmYXVsdEJORihleHByZXNzaW9uUnVsZU5hbWUsIGN1c3RvbUdyYW1tYXJzLCBleHByZXNzaW9uRGVmYXVsdEJORiksXG4gICAgICAgIHRlcm1SdWxlcyA9IHJ1bGVzRnJvbVJ1bGVOYW1lQ3VzdG9tR3JhbW1hcnNBbmREZWZhdWx0Qk5GKHRlcm1SdWxlTmFtZSwgY3VzdG9tR3JhbW1hcnMsIHRlcm1EZWZhdWx0Qk5GKSxcbiAgICAgICAgY29tYmluZWRSdWxlcyA9IFtdLmNvbmNhdChtZXRhc3RhdGVtZW50UnVsZXMpLmNvbmNhdChzdGF0ZW1lbnRSdWxlcykuY29uY2F0KGV4cHJlc3Npb25SdWxlcykuY29uY2F0KHRlcm1SdWxlcyk7XG5cbiAgcmV0dXJuIGNvbWJpbmVkUnVsZXM7XG59XG5cbmZ1bmN0aW9uIHJ1bGVzRnJvbVJ1bGVOYW1lQ3VzdG9tR3JhbW1hcnNBbmREZWZhdWx0Qk5GKHJ1bGVOYW1lLCBjdXN0b21HcmFtbWFycywgZGVmYXVsdEJORikge1xuICBjb25zdCBibmZzID0gYm5mc0Zyb21SdWxlTmFtZUFuZEN1c3RvbUdyYW1tYXJzKHJ1bGVOYW1lLCBjdXN0b21HcmFtbWFycyksXG4gICAgICAgIG1haW5SdWxlID0gbWFpblJ1bGVGcm9tUnVsZU5hbWVEZWZhdWx0Qk5GQW5kQk5GcyhydWxlTmFtZSwgZGVmYXVsdEJORiwgYm5mcyksXG4gICAgICAgIHJlbWFpbmluZ1J1bGVzID0gcmVtYWluaW5nUnVsZXNGcm9tUnVsZU5hbWVEZWZhdWx0Qk5GQW5kQk5GcyhydWxlTmFtZSwgZGVmYXVsdEJORiwgYm5mcyk7XG5cbiAgbGV0IHJ1bGVzO1xuXG4gIHJ1bGVzID0gW10uY29uY2F0KG1haW5SdWxlKS5jb25jYXQocmVtYWluaW5nUnVsZXMpO1xuXG4gIHJ1bGVzID0gZWxpbWluYXRlSW1wbGljaXRMZWZ0UmVjdXJzaW9uKHJ1bGVzKTtcblxuICByZXR1cm4gcnVsZXM7XG59XG5cbmZ1bmN0aW9uIHJlbWFpbmluZ1J1bGVzRnJvbVJ1bGVzQW5kTWFpblJ1bGUocnVsZXMsIG1haW5SdWxlKSB7XG4gIGNvbnN0IHJlbWFpbmluZ1J1bGVzID0gcnVsZXMuZmlsdGVyKGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICBpZiAocnVsZSAhPT0gbWFpblJ1bGUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHJlbWFpbmluZ1J1bGVzO1xufVxuXG5mdW5jdGlvbiBtYWluUnVsZUZyb21SdWxlTmFtZURlZmF1bHRCTkZBbmRCTkZzKHJ1bGVOYW1lLCBkZWZhdWx0Qk5GLCBibmZzKSB7XG4gIGNvbnN0IGRlZmF1bHRSdWxlcyA9IHJ1bGVzRnJvbUJORihkZWZhdWx0Qk5GKSxcbiAgICAgICAgZGVmYXVsdE1haW5SdWxlID0gZmluZFJ1bGVCeVJ1bGVOYW1lKHJ1bGVOYW1lLCBkZWZhdWx0UnVsZXMpLFxuICAgICAgICBkZWZhdWx0TWFpblJ1bGVEZWZpbml0aW9ucyA9IGRlZmF1bHRNYWluUnVsZS5nZXREZWZpbml0aW9ucygpO1xuXG4gIGJuZnMuZm9yRWFjaChmdW5jdGlvbihibmYpIHtcbiAgICBjb25zdCBydWxlcyA9IHJ1bGVzRnJvbUJORihibmYpLFxuICAgICAgICAgIG1haW5SdWxlID0gZmluZFJ1bGVCeVJ1bGVOYW1lKHJ1bGVOYW1lLCBydWxlcyksXG4gICAgICAgICAgbWFpblJ1bGVEZWZpbml0aW9ucyA9IChtYWluUnVsZSAhPT0gbnVsbCkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1haW5SdWxlLmdldERlZmluaXRpb25zKCkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW107XG5cbiAgICB1bnNoaWZ0KGRlZmF1bHRNYWluUnVsZURlZmluaXRpb25zLCBtYWluUnVsZURlZmluaXRpb25zKTtcbiAgfSk7XG5cbiAgY29uc3QgbWFpblJ1bGUgPSBkZWZhdWx0TWFpblJ1bGU7IC8vL1xuXG4gIHJldHVybiBtYWluUnVsZTtcbn1cblxuZnVuY3Rpb24gcmVtYWluaW5nUnVsZXNGcm9tUnVsZU5hbWVEZWZhdWx0Qk5GQW5kQk5GcyhydWxlTmFtZSwgZGVmYXVsdEJORiwgYm5mcykge1xuICBjb25zdCBkZWZhdWx0UnVsZXMgPSBydWxlc0Zyb21CTkYoZGVmYXVsdEJORiksXG4gICAgICAgIGRlZmF1bHRNYWluUnVsZSA9IGZpbmRSdWxlQnlSdWxlTmFtZShydWxlTmFtZSwgZGVmYXVsdFJ1bGVzKSxcbiAgICAgICAgZGVmYXVsdFJlbWFpbmluZ1J1bGVzID0gcmVtYWluaW5nUnVsZXNGcm9tUnVsZXNBbmRNYWluUnVsZShkZWZhdWx0UnVsZXMsIGRlZmF1bHRNYWluUnVsZSk7XG5cbiAgYm5mcy5mb3JFYWNoKGZ1bmN0aW9uKGJuZikge1xuICAgIGNvbnN0IHJ1bGVzID0gcnVsZXNGcm9tQk5GKGJuZiksXG4gICAgICAgICAgbWFpblJ1bGUgPSBmaW5kUnVsZUJ5UnVsZU5hbWUocnVsZU5hbWUsIHJ1bGVzKSxcbiAgICAgICAgICByZW1haW5pbmdSdWxlcyA9IHJlbWFpbmluZ1J1bGVzRnJvbVJ1bGVzQW5kTWFpblJ1bGUocnVsZXMsIG1haW5SdWxlKTtcblxuICAgIHVuc2hpZnQoZGVmYXVsdFJlbWFpbmluZ1J1bGVzLCByZW1haW5pbmdSdWxlcyk7XG4gIH0pO1xuXG4gIGNvbnN0IHJlbWFpbmluZ1J1bGVzID0gZGVmYXVsdFJlbWFpbmluZ1J1bGVzOyAvLy9cblxuICByZXR1cm4gcmVtYWluaW5nUnVsZXM7XG59XG4iXX0=