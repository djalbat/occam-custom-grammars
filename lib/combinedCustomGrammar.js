"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _necessary = require("necessary");
var _defaultCustomGrammar = _interopRequireDefault(require("./defaultCustomGrammar"));
var _constants = require("./constants");
var _rules = require("./utilities/rules");
var _ruleName = require("./utilities/ruleName");
var _customGrammars = require("./utilities/customGrammars");
var _ruleNames = require("./ruleNames");
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
var filter = _necessary.arrayUtilities.filter, unshift = _necessary.arrayUtilities.unshift;
var CombinedCustomGrammar = /*#__PURE__*/ function() {
    function CombinedCustomGrammar(lexicalPattern, rules) {
        _classCallCheck(this, CombinedCustomGrammar);
        this.lexicalPattern = lexicalPattern;
        this.rules = rules;
    }
    _createClass(CombinedCustomGrammar, [
        {
            key: "getLexicalPattern",
            value: function getLexicalPattern() {
                return this.lexicalPattern;
            }
        },
        {
            key: "getRules",
            value: function getRules() {
                return this.rules;
            }
        }
    ], [
        {
            key: "fromCustomGrammars",
            value: function fromCustomGrammars(customGrammars) {
                var metastatementRules = metastatementRulesFromCustomGrammarsAndDefaultBNF(customGrammars), statementRules = statementRulesFromCustomGrammarsAndDefaultBNF(customGrammars), expressionRules = expressionRulesFromCustomGrammarsAndDefaultBNF(customGrammars), termRules = termRulesFromCustomGrammarsAndDefaultBNF(customGrammars), lexicalPattern = lexicalPatternFromCustomGrammars(customGrammars), rules = _toConsumableArray(metastatementRules).concat(_toConsumableArray(statementRules), _toConsumableArray(expressionRules), _toConsumableArray(termRules));
                var combinedCustomGrammar = new CombinedCustomGrammar(lexicalPattern, rules);
                return combinedCustomGrammar;
            }
        }
    ]);
    return CombinedCustomGrammar;
}();
exports.default = CombinedCustomGrammar;
function metastatementRulesFromCustomGrammarsAndDefaultBNF(customGrammars) {
    var metastatementRuleName = _ruleNames.METASTATEMENT_RULE_NAME, metastatementRules = rulesFromRuleNameCustomGrammarsAndDefaultBNF(metastatementRuleName, customGrammars);
    return metastatementRules;
}
function statementRulesFromCustomGrammarsAndDefaultBNF(customGrammars) {
    var statementRuleName = _ruleNames.STATEMENT_RULE_NAME, statementRules = rulesFromRuleNameCustomGrammarsAndDefaultBNF(statementRuleName, customGrammars);
    return statementRules;
}
function expressionRulesFromCustomGrammarsAndDefaultBNF(customGrammars) {
    var expressionRuleName = _ruleNames.EXPRESSION_RULE_NAME, expressionRules = rulesFromRuleNameCustomGrammarsAndDefaultBNF(expressionRuleName, customGrammars);
    return expressionRules;
}
function termRulesFromCustomGrammarsAndDefaultBNF(customGrammars) {
    var termRuleName = _ruleNames.TERM_RULE_NAME, termRules = rulesFromRuleNameCustomGrammarsAndDefaultBNF(termRuleName, customGrammars);
    return termRules;
}
function lexicalPatternFromCustomGrammars(customGrammars) {
    var lexicalPatterns = (0, _customGrammars).lexicalPatternsFromCustomGrammars(customGrammars), defaultCustomGrammarLexicalPattern = _defaultCustomGrammar.default.getLexicalPattern(), defaultLexicalPattern = defaultCustomGrammarLexicalPattern; ///
    lexicalPatterns.reverse();
    lexicalPatterns.push(defaultLexicalPattern);
    filter(lexicalPatterns, function(lexicalPattern) {
        if (lexicalPattern !== _constants.EMPTY_STRING) {
            return true;
        }
    });
    var lexicalPatternsString = lexicalPatterns.join("|"), lexicalPattern1 = "^(?:".concat(lexicalPatternsString, ")");
    return lexicalPattern1;
}
function remainingRulesFromRulesAndMainRule(rules, mainRule) {
    var remainingRules = rules.filter(function(rule) {
        if (rule !== mainRule) {
            return true;
        }
    });
    return remainingRules;
}
function mainRuleFromRuleNameDefaultBNFAndBNFs(ruleName, bnfs) {
    var defaultCustomGrammarBNF = _defaultCustomGrammar.default.getBNF(ruleName), defaultBNF = defaultCustomGrammarBNF, defaultRules = (0, _rules).rulesFromBNF(defaultBNF), defaultMainRule = (0, _ruleName).findRuleByRuleName(ruleName, defaultRules), defaultMainRuleDefinitions = defaultMainRule.getDefinitions();
    bnfs.forEach(function(bnf) {
        var rules = (0, _rules).rulesFromBNF(bnf), mainRule = (0, _ruleName).findRuleByRuleName(ruleName, rules), mainRuleDefinitions = mainRule !== null ? mainRule.getDefinitions() : [];
        unshift(defaultMainRuleDefinitions, mainRuleDefinitions);
    });
    var mainRule1 = defaultMainRule; ///
    return mainRule1;
}
function remainingRulesFromRuleNameDefaultBNFAndBNFs(ruleName, bnfs) {
    var defaultCustomGrammarBNF = _defaultCustomGrammar.default.getBNF(ruleName), defaultBNF = defaultCustomGrammarBNF, defaultRules = (0, _rules).rulesFromBNF(defaultBNF), defaultMainRule = (0, _ruleName).findRuleByRuleName(ruleName, defaultRules), defaultRemainingRules = remainingRulesFromRulesAndMainRule(defaultRules, defaultMainRule);
    bnfs.forEach(function(bnf) {
        var rules = (0, _rules).rulesFromBNF(bnf), mainRule = (0, _ruleName).findRuleByRuleName(ruleName, rules), remainingRules = remainingRulesFromRulesAndMainRule(rules, mainRule);
        unshift(defaultRemainingRules, remainingRules);
    });
    var remainingRules1 = defaultRemainingRules; ///
    return remainingRules1;
}
function rulesFromRuleNameCustomGrammarsAndDefaultBNF(ruleName, customGrammars) {
    var bnfs = (0, _customGrammars).bnfsFromRuleNameAndCustomGrammars(ruleName, customGrammars), mainRule = mainRuleFromRuleNameDefaultBNFAndBNFs(ruleName, bnfs), remainingRules = remainingRulesFromRuleNameDefaultBNFAndBNFs(ruleName, bnfs), rules = [].concat(mainRule).concat(remainingRules);
    return rules;
}

//# sourceMappingURL=data:application/json;base64,