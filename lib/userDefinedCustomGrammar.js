'use strict';

var constants = require('./constants'),
    CustomGrammar = require('./customGrammar');

var USER_DEFINED_CUSTOM_GRAMMAR_NAME = constants.USER_DEFINED_CUSTOM_GRAMMAR_NAME;


var name = USER_DEFINED_CUSTOM_GRAMMAR_NAME,
    ///
lexicalPattern = '<=|>=|<|>|\\+|\\-|insert|delete|empty|\\|-|\\||iff|<=>|=>|->|\u2227|\u2228|\xAC',
    termBNF = '\n\n\n\n                       term  ::=  operation\n\n                               |  operator\n                               \n                               |  substring\n\n                               |  stringLength\n\n                               ;\n\n\n                  operation  ::=  operator<NO_WHITESPACE>"(" term ")" ;\n\n\n                   operator  ::=  "insert"<NO_WHITESPACE>"(" term "," term ")"\n\n                               |  "delete"<NO_WHITESPACE>"(" term "," term ")" \n\n                               |  "empty"<NO_WHITESPACE>"("<NO_WHITESPACE>")"\n\n                               ;\n\n\n                  substring  ::=  name<NO_WHITESPACE>"[" "..." expression "]" \n\n                               |  name<NO_WHITESPACE>"[" expression "..." expression "]" \n\n                               |  name<NO_WHITESPACE>"[" expression "..."  "]" \n\n                               ;\n\n\n               stringLength  ::=  "|" term "|" ;\n\n      ',
    expressionBNF = '\n      \n\n\n                 expression  ::=  arithmeticExpression\n\n                               ;\n\n\n       arithmeticExpression  ::=  addition \n\n                               |  subtraction \n\n                               ;\n\n\n                   addition  ::=  expression "+" expression ;\n\n                subtraction  ::=  expression "-" expression ;\n      ',
    statementBNF = '\n\n\n\n\n\n                  statement  ::=  lessThan\n\n                               |  greaterThan\n\n                               |  lessThanOrEqualTo\n\n                               |  greaterThanOrEqualTo\n\n                               |   negatedStatement\n\n                               |   parenthesisedStatement\n\n                               |   conjunctionOfStatements\n\n                               |   disjunctionOfStatements\n\n                               |   implicationBetweenStatements\n\n                               |   biconditionalBetweenStatements\n\n                               |   materialConditionalBetweenStatements\n\n                               ;\n\n\n                   lessThan  ::=  expression "<" expression ;\n\n                greaterThan  ::=  expression ">" expression ;\n\n          lessThanOrEqualTo  ::=  expression "<=" expression ;\n\n       greaterThanOrEqualTo  ::=  expression ">=" expression ;\n\n\n\n     negatedStatement                      ::=   "\xAC"<NO_WHITESPACE>statement ;\n\n     parenthesisedStatement                ::=   "(" statement ")" ;\n\n     conjunctionOfStatements               ::=   statement "\u2227" statement ;\n\n     disjunctionOfStatements               ::=   statement "\u2228" statement ;\n\n     implicationBetweenStatements          ::=   statement "=>" statement ;\n\n     biconditionalBetweenStatements        ::=   statement ( "iff" | "<=>" ) statement ;\n\n     materialConditionalBetweenStatements  ::=   statement "->" statement ;\n\n\n      ',
    metastatementBNF = '\n      \n\n\n     negatedMetastatement                      ::=   "\xAC"<NO_WHITESPACE>metastatement ;\n\n     parenthesisedMetastatement                ::=   "(" metastatement ")" ;\n\n     conjunctionOfMetastatements               ::=   metastatement "\u2227" metastatement ;\n\n     disjunctionOfMetastatements               ::=   metastatement "\u2228" metastatement ;\n\n     implicationBetweenMetastatements          ::=   metastatement "=>" metastatement ;\n\n     biconditionalBetweenMetastatements        ::=   metastatement ( "iff" | "<=>" ) metastatement ;\n\n     materialConditionalBetweenMetastatements  ::=   metastatement "->" metastatement ;\n\n\n     metastatement                             ::=   negatedMetastatement\n\n                                                 |   parenthesisedMetastatement\n    \n                                                 |   conjunctionOfMetastatements\n     \n                                                 |   disjunctionOfMetastatements\n     \n                                                 |   implicationBetweenMetastatements\n     \n                                                 |   biconditionalBetweenMetastatements\n     \n                                                 |   materialConditionalBetweenMetastatements\n     \n                                                 ;\n\n \n \n       ',
    userDefinedCustomGrammar = CustomGrammar.fromName(name);

userDefinedCustomGrammar.setLexicalPattern(lexicalPattern);

userDefinedCustomGrammar.setBNF('term', termBNF);
userDefinedCustomGrammar.setBNF('expression', expressionBNF);
userDefinedCustomGrammar.setBNF('statement', statementBNF);
userDefinedCustomGrammar.setBNF('metastatement', metastatementBNF);

module.exports = userDefinedCustomGrammar;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,