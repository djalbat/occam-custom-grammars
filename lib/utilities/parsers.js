'use strict';

var lexers = require('occam-lexers'),
    parsers = require('occam-parsers'),
    necessary = require('necessary');

var arrayUtilities = necessary.arrayUtilities,
    push = arrayUtilities.push,
    BNFLexer = lexers.BNFLexer,
    BNFParser = parsers.BNFParser,
    FlorenceParser = parsers.FlorenceParser,
    termDefaultCustomGrammarBNF = parsers.termDefaultCustomGrammarBNF,
    statementDefaultCustomGrammarBNF = parsers.statementDefaultCustomGrammarBNF,
    expressionDefaultCustomGrammarBNF = parsers.expressionDefaultCustomGrammarBNF,
    metastatementDefaultCustomGrammarBNF = parsers.metastatementDefaultCustomGrammarBNF;


var bnfLexer = BNFLexer.fromNothing(),
    bnfParser = BNFParser.fromNothing();

function florenceParserFromCombinedCustomGrammars(combinedCustomGrammars) {
      var bnf = FlorenceParser.bnf,
          florenceParser = florenceParserFromBNFAndCombinedCustomGrammars(bnf, combinedCustomGrammars);


      return florenceParser;
}

function florenceParserFromBNFAndCombinedCustomGrammars(bnf, combinedCustomGrammars) {
      var combinedCustomGrammarsRules = combinedCustomGrammars.getRules(),
          tokens = bnfLexer.tokensFromBNF(bnf),
          rules = bnfParser.rulesFromTokens(tokens);

      push(rules, combinedCustomGrammarsRules);

      var florenceParser = new FlorenceParser(rules);

      return florenceParser;
}

module.exports = {
      termDefaultCustomGrammarBNF: termDefaultCustomGrammarBNF,
      statementDefaultCustomGrammarBNF: statementDefaultCustomGrammarBNF,
      expressionDefaultCustomGrammarBNF: expressionDefaultCustomGrammarBNF,
      metastatementDefaultCustomGrammarBNF: metastatementDefaultCustomGrammarBNF,
      florenceParserFromCombinedCustomGrammars: florenceParserFromCombinedCustomGrammars,
      florenceParserFromBNFAndCombinedCustomGrammars: florenceParserFromBNFAndCombinedCustomGrammars
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcGFyc2Vycy5qcyJdLCJuYW1lcyI6WyJsZXhlcnMiLCJyZXF1aXJlIiwicGFyc2VycyIsIm5lY2Vzc2FyeSIsImFycmF5VXRpbGl0aWVzIiwicHVzaCIsIkJORkxleGVyIiwiQk5GUGFyc2VyIiwiRmxvcmVuY2VQYXJzZXIiLCJ0ZXJtRGVmYXVsdEN1c3RvbUdyYW1tYXJCTkYiLCJzdGF0ZW1lbnREZWZhdWx0Q3VzdG9tR3JhbW1hckJORiIsImV4cHJlc3Npb25EZWZhdWx0Q3VzdG9tR3JhbW1hckJORiIsIm1ldGFzdGF0ZW1lbnREZWZhdWx0Q3VzdG9tR3JhbW1hckJORiIsImJuZkxleGVyIiwiZnJvbU5vdGhpbmciLCJibmZQYXJzZXIiLCJmbG9yZW5jZVBhcnNlckZyb21Db21iaW5lZEN1c3RvbUdyYW1tYXJzIiwiY29tYmluZWRDdXN0b21HcmFtbWFycyIsImJuZiIsImZsb3JlbmNlUGFyc2VyIiwiZmxvcmVuY2VQYXJzZXJGcm9tQk5GQW5kQ29tYmluZWRDdXN0b21HcmFtbWFycyIsImNvbWJpbmVkQ3VzdG9tR3JhbW1hcnNSdWxlcyIsImdldFJ1bGVzIiwidG9rZW5zIiwidG9rZW5zRnJvbUJORiIsInJ1bGVzIiwicnVsZXNGcm9tVG9rZW5zIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsU0FBU0MsUUFBUSxjQUFSLENBQWY7QUFBQSxJQUNNQyxVQUFVRCxRQUFRLGVBQVIsQ0FEaEI7QUFBQSxJQUVNRSxZQUFZRixRQUFRLFdBQVIsQ0FGbEI7O0FBSU0sSUFBRUcsY0FBRixHQUFxQkQsU0FBckIsQ0FBRUMsY0FBRjtBQUFBLElBQ0VDLElBREYsR0FDV0QsY0FEWCxDQUNFQyxJQURGO0FBQUEsSUFFRUMsUUFGRixHQUVlTixNQUZmLENBRUVNLFFBRkY7QUFBQSxJQUdFQyxTQUhGLEdBR2dDTCxPQUhoQyxDQUdFSyxTQUhGO0FBQUEsSUFHYUMsY0FIYixHQUdnQ04sT0FIaEMsQ0FHYU0sY0FIYjtBQUFBLElBSUVDLDJCQUpGLEdBSTZJUCxPQUo3SSxDQUlFTywyQkFKRjtBQUFBLElBSStCQyxnQ0FKL0IsR0FJNklSLE9BSjdJLENBSStCUSxnQ0FKL0I7QUFBQSxJQUlpRUMsaUNBSmpFLEdBSTZJVCxPQUo3SSxDQUlpRVMsaUNBSmpFO0FBQUEsSUFJb0dDLG9DQUpwRyxHQUk2SVYsT0FKN0ksQ0FJb0dVLG9DQUpwRzs7O0FBTU4sSUFBTUMsV0FBV1AsU0FBU1EsV0FBVCxFQUFqQjtBQUFBLElBQ01DLFlBQVlSLFVBQVVPLFdBQVYsRUFEbEI7O0FBR0EsU0FBU0Usd0NBQVQsQ0FBa0RDLHNCQUFsRCxFQUEwRTtBQUNsRSxVQUFFQyxHQUFGLEdBQVVWLGNBQVYsQ0FBRVUsR0FBRjtBQUFBLFVBQ0FDLGNBREEsR0FDaUJDLCtDQUErQ0YsR0FBL0MsRUFBb0RELHNCQUFwRCxDQURqQjs7O0FBR04sYUFBT0UsY0FBUDtBQUNEOztBQUVELFNBQVNDLDhDQUFULENBQXdERixHQUF4RCxFQUE2REQsc0JBQTdELEVBQXFGO0FBQ25GLFVBQU1JLDhCQUE4QkosdUJBQXVCSyxRQUF2QixFQUFwQztBQUFBLFVBQ01DLFNBQVNWLFNBQVNXLGFBQVQsQ0FBdUJOLEdBQXZCLENBRGY7QUFBQSxVQUVNTyxRQUFRVixVQUFVVyxlQUFWLENBQTBCSCxNQUExQixDQUZkOztBQUlBbEIsV0FBS29CLEtBQUwsRUFBWUosMkJBQVo7O0FBRUEsVUFBTUYsaUJBQWlCLElBQUlYLGNBQUosQ0FBbUJpQixLQUFuQixDQUF2Qjs7QUFFQSxhQUFPTixjQUFQO0FBQ0Q7O0FBRURRLE9BQU9DLE9BQVAsR0FBaUI7QUFDZm5CLDhEQURlO0FBRWZDLHdFQUZlO0FBR2ZDLDBFQUhlO0FBSWZDLGdGQUplO0FBS2ZJLHdGQUxlO0FBTWZJO0FBTmUsQ0FBakIiLCJmaWxlIjoicGFyc2Vycy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbGV4ZXJzID0gcmVxdWlyZSgnb2NjYW0tbGV4ZXJzJyksXG4gICAgICBwYXJzZXJzID0gcmVxdWlyZSgnb2NjYW0tcGFyc2VycycpLFxuICAgICAgbmVjZXNzYXJ5ID0gcmVxdWlyZSgnbmVjZXNzYXJ5Jyk7XG5cbmNvbnN0IHsgYXJyYXlVdGlsaXRpZXMgfSA9IG5lY2Vzc2FyeSxcbiAgICAgIHsgcHVzaCB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IEJORkxleGVyIH0gPSBsZXhlcnMsXG4gICAgICB7IEJORlBhcnNlciwgRmxvcmVuY2VQYXJzZXIgfSA9IHBhcnNlcnMsXG4gICAgICB7IHRlcm1EZWZhdWx0Q3VzdG9tR3JhbW1hckJORiwgc3RhdGVtZW50RGVmYXVsdEN1c3RvbUdyYW1tYXJCTkYsIGV4cHJlc3Npb25EZWZhdWx0Q3VzdG9tR3JhbW1hckJORiwgbWV0YXN0YXRlbWVudERlZmF1bHRDdXN0b21HcmFtbWFyQk5GIH0gPSBwYXJzZXJzO1xuXG5jb25zdCBibmZMZXhlciA9IEJORkxleGVyLmZyb21Ob3RoaW5nKCksXG4gICAgICBibmZQYXJzZXIgPSBCTkZQYXJzZXIuZnJvbU5vdGhpbmcoKTtcblxuZnVuY3Rpb24gZmxvcmVuY2VQYXJzZXJGcm9tQ29tYmluZWRDdXN0b21HcmFtbWFycyhjb21iaW5lZEN1c3RvbUdyYW1tYXJzKSB7XG4gIGNvbnN0IHsgYm5mIH0gPSBGbG9yZW5jZVBhcnNlcixcbiAgICAgICAgZmxvcmVuY2VQYXJzZXIgPSBmbG9yZW5jZVBhcnNlckZyb21CTkZBbmRDb21iaW5lZEN1c3RvbUdyYW1tYXJzKGJuZiwgY29tYmluZWRDdXN0b21HcmFtbWFycyk7XG5cbiAgcmV0dXJuIGZsb3JlbmNlUGFyc2VyO1xufVxuXG5mdW5jdGlvbiBmbG9yZW5jZVBhcnNlckZyb21CTkZBbmRDb21iaW5lZEN1c3RvbUdyYW1tYXJzKGJuZiwgY29tYmluZWRDdXN0b21HcmFtbWFycykge1xuICBjb25zdCBjb21iaW5lZEN1c3RvbUdyYW1tYXJzUnVsZXMgPSBjb21iaW5lZEN1c3RvbUdyYW1tYXJzLmdldFJ1bGVzKCksXG4gICAgICAgIHRva2VucyA9IGJuZkxleGVyLnRva2Vuc0Zyb21CTkYoYm5mKSxcbiAgICAgICAgcnVsZXMgPSBibmZQYXJzZXIucnVsZXNGcm9tVG9rZW5zKHRva2Vucyk7XG5cbiAgcHVzaChydWxlcywgY29tYmluZWRDdXN0b21HcmFtbWFyc1J1bGVzKTtcblxuICBjb25zdCBmbG9yZW5jZVBhcnNlciA9IG5ldyBGbG9yZW5jZVBhcnNlcihydWxlcyk7XG5cbiAgcmV0dXJuIGZsb3JlbmNlUGFyc2VyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgdGVybURlZmF1bHRDdXN0b21HcmFtbWFyQk5GLFxuICBzdGF0ZW1lbnREZWZhdWx0Q3VzdG9tR3JhbW1hckJORixcbiAgZXhwcmVzc2lvbkRlZmF1bHRDdXN0b21HcmFtbWFyQk5GLFxuICBtZXRhc3RhdGVtZW50RGVmYXVsdEN1c3RvbUdyYW1tYXJCTkYsXG4gIGZsb3JlbmNlUGFyc2VyRnJvbUNvbWJpbmVkQ3VzdG9tR3JhbW1hcnMsXG4gIGZsb3JlbmNlUGFyc2VyRnJvbUJORkFuZENvbWJpbmVkQ3VzdG9tR3JhbW1hcnNcbn07XG4iXX0=