'use strict';

var lexers = require('occam-lexers'),
    parsers = require('occam-parsers'),
    necessary = require('necessary');

var arrayUtilities = necessary.arrayUtilities,
    push = arrayUtilities.push,
    BNFLexer = lexers.BNFLexer,
    BNFParser = parsers.BNFParser,
    FlorenceParser = parsers.FlorenceParser,
    termDefaultCustomGrammarBNF = parsers.termDefaultCustomGrammarBNF,
    statementDefaultCustomGrammarBNF = parsers.statementDefaultCustomGrammarBNF,
    expressionDefaultCustomGrammarBNF = parsers.expressionDefaultCustomGrammarBNF,
    metastatementDefaultCustomGrammarBNF = parsers.metastatementDefaultCustomGrammarBNF;


var bnfLexer = BNFLexer.fromNothing(),
    bnfParser = BNFParser.fromNothing();

function florenceParserFromCombinedCustomGrammar(combinedCustomGrammar) {
      var bnf = FlorenceParser.bnf,
          florenceParser = florenceParserFromBNFAndCombinedCustomGrammar(bnf, combinedCustomGrammar);


      return florenceParser;
}

function florenceParserFromBNFAndCombinedCustomGrammar(bnf, combinedCustomGrammar) {
      var combinedCustomGrammarRules = combinedCustomGrammar.getRules(),
          tokens = bnfLexer.tokensFromBNF(bnf),
          rules = bnfParser.rulesFromTokens(tokens);

      push(rules, combinedCustomGrammarRules);

      var florenceParser = new FlorenceParser(rules);

      return florenceParser;
}

module.exports = {
      termDefaultCustomGrammarBNF: termDefaultCustomGrammarBNF,
      statementDefaultCustomGrammarBNF: statementDefaultCustomGrammarBNF,
      expressionDefaultCustomGrammarBNF: expressionDefaultCustomGrammarBNF,
      metastatementDefaultCustomGrammarBNF: metastatementDefaultCustomGrammarBNF,
      florenceParserFromCombinedCustomGrammar: florenceParserFromCombinedCustomGrammar,
      florenceParserFromBNFAndCombinedCustomGrammar: florenceParserFromBNFAndCombinedCustomGrammar
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcGFyc2Vycy5qcyJdLCJuYW1lcyI6WyJsZXhlcnMiLCJyZXF1aXJlIiwicGFyc2VycyIsIm5lY2Vzc2FyeSIsImFycmF5VXRpbGl0aWVzIiwicHVzaCIsIkJORkxleGVyIiwiQk5GUGFyc2VyIiwiRmxvcmVuY2VQYXJzZXIiLCJ0ZXJtRGVmYXVsdEN1c3RvbUdyYW1tYXJCTkYiLCJzdGF0ZW1lbnREZWZhdWx0Q3VzdG9tR3JhbW1hckJORiIsImV4cHJlc3Npb25EZWZhdWx0Q3VzdG9tR3JhbW1hckJORiIsIm1ldGFzdGF0ZW1lbnREZWZhdWx0Q3VzdG9tR3JhbW1hckJORiIsImJuZkxleGVyIiwiZnJvbU5vdGhpbmciLCJibmZQYXJzZXIiLCJmbG9yZW5jZVBhcnNlckZyb21Db21iaW5lZEN1c3RvbUdyYW1tYXIiLCJjb21iaW5lZEN1c3RvbUdyYW1tYXIiLCJibmYiLCJmbG9yZW5jZVBhcnNlciIsImZsb3JlbmNlUGFyc2VyRnJvbUJORkFuZENvbWJpbmVkQ3VzdG9tR3JhbW1hciIsImNvbWJpbmVkQ3VzdG9tR3JhbW1hclJ1bGVzIiwiZ2V0UnVsZXMiLCJ0b2tlbnMiLCJ0b2tlbnNGcm9tQk5GIiwicnVsZXMiLCJydWxlc0Zyb21Ub2tlbnMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxTQUFTQyxRQUFRLGNBQVIsQ0FBZjtBQUFBLElBQ01DLFVBQVVELFFBQVEsZUFBUixDQURoQjtBQUFBLElBRU1FLFlBQVlGLFFBQVEsV0FBUixDQUZsQjs7QUFJTSxJQUFFRyxjQUFGLEdBQXFCRCxTQUFyQixDQUFFQyxjQUFGO0FBQUEsSUFDRUMsSUFERixHQUNXRCxjQURYLENBQ0VDLElBREY7QUFBQSxJQUVFQyxRQUZGLEdBRWVOLE1BRmYsQ0FFRU0sUUFGRjtBQUFBLElBR0VDLFNBSEYsR0FHZ0NMLE9BSGhDLENBR0VLLFNBSEY7QUFBQSxJQUdhQyxjQUhiLEdBR2dDTixPQUhoQyxDQUdhTSxjQUhiO0FBQUEsSUFJRUMsMkJBSkYsR0FJNklQLE9BSjdJLENBSUVPLDJCQUpGO0FBQUEsSUFJK0JDLGdDQUovQixHQUk2SVIsT0FKN0ksQ0FJK0JRLGdDQUovQjtBQUFBLElBSWlFQyxpQ0FKakUsR0FJNklULE9BSjdJLENBSWlFUyxpQ0FKakU7QUFBQSxJQUlvR0Msb0NBSnBHLEdBSTZJVixPQUo3SSxDQUlvR1Usb0NBSnBHOzs7QUFNTixJQUFNQyxXQUFXUCxTQUFTUSxXQUFULEVBQWpCO0FBQUEsSUFDTUMsWUFBWVIsVUFBVU8sV0FBVixFQURsQjs7QUFHQSxTQUFTRSx1Q0FBVCxDQUFpREMscUJBQWpELEVBQXdFO0FBQ2hFLFVBQUVDLEdBQUYsR0FBVVYsY0FBVixDQUFFVSxHQUFGO0FBQUEsVUFDQUMsY0FEQSxHQUNpQkMsOENBQThDRixHQUE5QyxFQUFtREQscUJBQW5ELENBRGpCOzs7QUFHTixhQUFPRSxjQUFQO0FBQ0Q7O0FBRUQsU0FBU0MsNkNBQVQsQ0FBdURGLEdBQXZELEVBQTRERCxxQkFBNUQsRUFBbUY7QUFDakYsVUFBTUksNkJBQTZCSixzQkFBc0JLLFFBQXRCLEVBQW5DO0FBQUEsVUFDTUMsU0FBU1YsU0FBU1csYUFBVCxDQUF1Qk4sR0FBdkIsQ0FEZjtBQUFBLFVBRU1PLFFBQVFWLFVBQVVXLGVBQVYsQ0FBMEJILE1BQTFCLENBRmQ7O0FBSUFsQixXQUFLb0IsS0FBTCxFQUFZSiwwQkFBWjs7QUFFQSxVQUFNRixpQkFBaUIsSUFBSVgsY0FBSixDQUFtQmlCLEtBQW5CLENBQXZCOztBQUVBLGFBQU9OLGNBQVA7QUFDRDs7QUFFRFEsT0FBT0MsT0FBUCxHQUFpQjtBQUNmbkIsOERBRGU7QUFFZkMsd0VBRmU7QUFHZkMsMEVBSGU7QUFJZkMsZ0ZBSmU7QUFLZkksc0ZBTGU7QUFNZkk7QUFOZSxDQUFqQiIsImZpbGUiOiJwYXJzZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBsZXhlcnMgPSByZXF1aXJlKCdvY2NhbS1sZXhlcnMnKSxcbiAgICAgIHBhcnNlcnMgPSByZXF1aXJlKCdvY2NhbS1wYXJzZXJzJyksXG4gICAgICBuZWNlc3NhcnkgPSByZXF1aXJlKCduZWNlc3NhcnknKTtcblxuY29uc3QgeyBhcnJheVV0aWxpdGllcyB9ID0gbmVjZXNzYXJ5LFxuICAgICAgeyBwdXNoIH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgQk5GTGV4ZXIgfSA9IGxleGVycyxcbiAgICAgIHsgQk5GUGFyc2VyLCBGbG9yZW5jZVBhcnNlciB9ID0gcGFyc2VycyxcbiAgICAgIHsgdGVybURlZmF1bHRDdXN0b21HcmFtbWFyQk5GLCBzdGF0ZW1lbnREZWZhdWx0Q3VzdG9tR3JhbW1hckJORiwgZXhwcmVzc2lvbkRlZmF1bHRDdXN0b21HcmFtbWFyQk5GLCBtZXRhc3RhdGVtZW50RGVmYXVsdEN1c3RvbUdyYW1tYXJCTkYgfSA9IHBhcnNlcnM7XG5cbmNvbnN0IGJuZkxleGVyID0gQk5GTGV4ZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgIGJuZlBhcnNlciA9IEJORlBhcnNlci5mcm9tTm90aGluZygpO1xuXG5mdW5jdGlvbiBmbG9yZW5jZVBhcnNlckZyb21Db21iaW5lZEN1c3RvbUdyYW1tYXIoY29tYmluZWRDdXN0b21HcmFtbWFyKSB7XG4gIGNvbnN0IHsgYm5mIH0gPSBGbG9yZW5jZVBhcnNlcixcbiAgICAgICAgZmxvcmVuY2VQYXJzZXIgPSBmbG9yZW5jZVBhcnNlckZyb21CTkZBbmRDb21iaW5lZEN1c3RvbUdyYW1tYXIoYm5mLCBjb21iaW5lZEN1c3RvbUdyYW1tYXIpO1xuXG4gIHJldHVybiBmbG9yZW5jZVBhcnNlcjtcbn1cblxuZnVuY3Rpb24gZmxvcmVuY2VQYXJzZXJGcm9tQk5GQW5kQ29tYmluZWRDdXN0b21HcmFtbWFyKGJuZiwgY29tYmluZWRDdXN0b21HcmFtbWFyKSB7XG4gIGNvbnN0IGNvbWJpbmVkQ3VzdG9tR3JhbW1hclJ1bGVzID0gY29tYmluZWRDdXN0b21HcmFtbWFyLmdldFJ1bGVzKCksXG4gICAgICAgIHRva2VucyA9IGJuZkxleGVyLnRva2Vuc0Zyb21CTkYoYm5mKSxcbiAgICAgICAgcnVsZXMgPSBibmZQYXJzZXIucnVsZXNGcm9tVG9rZW5zKHRva2Vucyk7XG5cbiAgcHVzaChydWxlcywgY29tYmluZWRDdXN0b21HcmFtbWFyUnVsZXMpO1xuXG4gIGNvbnN0IGZsb3JlbmNlUGFyc2VyID0gbmV3IEZsb3JlbmNlUGFyc2VyKHJ1bGVzKTtcblxuICByZXR1cm4gZmxvcmVuY2VQYXJzZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB0ZXJtRGVmYXVsdEN1c3RvbUdyYW1tYXJCTkYsXG4gIHN0YXRlbWVudERlZmF1bHRDdXN0b21HcmFtbWFyQk5GLFxuICBleHByZXNzaW9uRGVmYXVsdEN1c3RvbUdyYW1tYXJCTkYsXG4gIG1ldGFzdGF0ZW1lbnREZWZhdWx0Q3VzdG9tR3JhbW1hckJORixcbiAgZmxvcmVuY2VQYXJzZXJGcm9tQ29tYmluZWRDdXN0b21HcmFtbWFyLFxuICBmbG9yZW5jZVBhcnNlckZyb21CTkZBbmRDb21iaW5lZEN1c3RvbUdyYW1tYXJcbn07XG4iXX0=