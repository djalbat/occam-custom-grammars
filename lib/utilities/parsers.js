"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.florenceParserFromCombinedCustomGrammar = florenceParserFromCombinedCustomGrammar;
exports.florenceParserFromBNFAndCombinedCustomGrammar = florenceParserFromBNFAndCombinedCustomGrammar;
exports.default = void 0;
var _occamGrammars = require("occam-grammars");
var _occamGrammarUtilities = require("occam-grammar-utilities");
var _constants = require("../constants");
var _rules = require("../utilities/rules");
function florenceParserFromCombinedCustomGrammar(combinedCustomGrammar) {
    var bnf = _occamGrammars.FlorenceParser.bnf, florenceParser = florenceParserFromBNFAndCombinedCustomGrammar(bnf, combinedCustomGrammar);
    return florenceParser;
}
function florenceParserFromBNFAndCombinedCustomGrammar(bnf, combinedCustomGrammar) {
    var rules = (0, _rules).rulesFromBNF(bnf), ruleMap = (0, _rules).ruleMapFromRules(rules), startRule = ruleMap[_constants.FLORENCE_START_RULE_NAME], combinedCustomGrammarRuleMap = combinedCustomGrammar.getRuleMap();
    Object.assign(ruleMap, combinedCustomGrammarRuleMap);
    (0, _occamGrammarUtilities).eliminateLeftRecursion(startRule, ruleMap);
    var florenceParser = _occamGrammars.FlorenceParser.fromRules(rules);
    return florenceParser;
}
var _default = {
    florenceParserFromCombinedCustomGrammar: florenceParserFromCombinedCustomGrammar,
    florenceParserFromBNFAndCombinedCustomGrammar: florenceParserFromBNFAndCombinedCustomGrammar
};
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcGFyc2Vycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgRmxvcmVuY2VQYXJzZXIgfSBmcm9tIFwib2NjYW0tZ3JhbW1hcnNcIjtcbmltcG9ydCB7IGVsaW1pbmF0ZUxlZnRSZWN1cnNpb24gfSBmcm9tIFwib2NjYW0tZ3JhbW1hci11dGlsaXRpZXNcIjtcblxuaW1wb3J0IHsgRkxPUkVOQ0VfU1RBUlRfUlVMRV9OQU1FIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgcnVsZXNGcm9tQk5GLCBydWxlTWFwRnJvbVJ1bGVzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9ydWxlc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gZmxvcmVuY2VQYXJzZXJGcm9tQ29tYmluZWRDdXN0b21HcmFtbWFyKGNvbWJpbmVkQ3VzdG9tR3JhbW1hcikge1xuICBjb25zdCB7IGJuZiB9ID0gRmxvcmVuY2VQYXJzZXIsXG4gICAgICAgIGZsb3JlbmNlUGFyc2VyID0gZmxvcmVuY2VQYXJzZXJGcm9tQk5GQW5kQ29tYmluZWRDdXN0b21HcmFtbWFyKGJuZiwgY29tYmluZWRDdXN0b21HcmFtbWFyKTtcblxuICByZXR1cm4gZmxvcmVuY2VQYXJzZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmbG9yZW5jZVBhcnNlckZyb21CTkZBbmRDb21iaW5lZEN1c3RvbUdyYW1tYXIoYm5mLCBjb21iaW5lZEN1c3RvbUdyYW1tYXIpIHtcbiAgY29uc3QgcnVsZXMgPSBydWxlc0Zyb21CTkYoYm5mKSxcbiAgICAgICAgcnVsZU1hcCA9IHJ1bGVNYXBGcm9tUnVsZXMocnVsZXMpLFxuICAgICAgICBzdGFydFJ1bGUgPSBydWxlTWFwW0ZMT1JFTkNFX1NUQVJUX1JVTEVfTkFNRV0sXG4gICAgICAgIGNvbWJpbmVkQ3VzdG9tR3JhbW1hclJ1bGVNYXAgPSBjb21iaW5lZEN1c3RvbUdyYW1tYXIuZ2V0UnVsZU1hcCgpO1xuXG4gIE9iamVjdC5hc3NpZ24ocnVsZU1hcCwgY29tYmluZWRDdXN0b21HcmFtbWFyUnVsZU1hcCk7XG5cbiAgZWxpbWluYXRlTGVmdFJlY3Vyc2lvbihzdGFydFJ1bGUsIHJ1bGVNYXApO1xuXG4gIGNvbnN0IGZsb3JlbmNlUGFyc2VyID0gRmxvcmVuY2VQYXJzZXIuZnJvbVJ1bGVzKHJ1bGVzKTtcblxuICByZXR1cm4gZmxvcmVuY2VQYXJzZXI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZmxvcmVuY2VQYXJzZXJGcm9tQ29tYmluZWRDdXN0b21HcmFtbWFyLFxuICBmbG9yZW5jZVBhcnNlckZyb21CTkZBbmRDb21iaW5lZEN1c3RvbUdyYW1tYXJcbn07XG4iXSwibmFtZXMiOlsiZmxvcmVuY2VQYXJzZXJGcm9tQ29tYmluZWRDdXN0b21HcmFtbWFyIiwiZmxvcmVuY2VQYXJzZXJGcm9tQk5GQW5kQ29tYmluZWRDdXN0b21HcmFtbWFyIiwiY29tYmluZWRDdXN0b21HcmFtbWFyIiwiYm5mIiwiRmxvcmVuY2VQYXJzZXIiLCJmbG9yZW5jZVBhcnNlciIsInJ1bGVzIiwicnVsZXNGcm9tQk5GIiwicnVsZU1hcCIsInJ1bGVNYXBGcm9tUnVsZXMiLCJzdGFydFJ1bGUiLCJGTE9SRU5DRV9TVEFSVF9SVUxFX05BTUUiLCJjb21iaW5lZEN1c3RvbUdyYW1tYXJSdWxlTWFwIiwiZ2V0UnVsZU1hcCIsIk9iamVjdCIsImFzc2lnbiIsImVsaW1pbmF0ZUxlZnRSZWN1cnNpb24iLCJmcm9tUnVsZXMiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7OztRQVFHQSx1Q0FBdUMsR0FBdkNBLHVDQUF1QztRQU92Q0MsNkNBQTZDLEdBQTdDQSw2Q0FBNkM7O0FBYjlCLElBQUEsY0FBZ0IsV0FBaEIsZ0JBQWdCLENBQUE7QUFDUixJQUFBLHNCQUF5QixXQUF6Qix5QkFBeUIsQ0FBQTtBQUV2QixJQUFBLFVBQWMsV0FBZCxjQUFjLENBQUE7QUFDUixJQUFBLE1BQW9CLFdBQXBCLG9CQUFvQixDQUFBO0FBRTVELFNBQVNELHVDQUF1QyxDQUFDRSxxQkFBcUIsRUFBRTtJQUM3RSxJQUFNLEFBQUVDLEdBQUcsR0FBS0MsY0FBYyxlQUFBLENBQXRCRCxHQUFHLEFBQW1CLEVBQ3hCRSxjQUFjLEdBQUdKLDZDQUE2QyxDQUFDRSxHQUFHLEVBQUVELHFCQUFxQixDQUFDLEFBQUM7SUFFakcsT0FBT0csY0FBYyxDQUFDO0NBQ3ZCO0FBRU0sU0FBU0osNkNBQTZDLENBQUNFLEdBQUcsRUFBRUQscUJBQXFCLEVBQUU7SUFDeEYsSUFBTUksS0FBSyxHQUFHQyxDQUFBQSxHQUFBQSxNQUFZLEFBQUssQ0FBQSxhQUFMLENBQUNKLEdBQUcsQ0FBQyxFQUN6QkssT0FBTyxHQUFHQyxDQUFBQSxHQUFBQSxNQUFnQixBQUFPLENBQUEsaUJBQVAsQ0FBQ0gsS0FBSyxDQUFDLEVBQ2pDSSxTQUFTLEdBQUdGLE9BQU8sQ0FBQ0csVUFBd0IseUJBQUEsQ0FBQyxFQUM3Q0MsNEJBQTRCLEdBQUdWLHFCQUFxQixDQUFDVyxVQUFVLEVBQUUsQUFBQztJQUV4RUMsTUFBTSxDQUFDQyxNQUFNLENBQUNQLE9BQU8sRUFBRUksNEJBQTRCLENBQUMsQ0FBQztJQUVyREksQ0FBQUEsR0FBQUEsc0JBQXNCLEFBQW9CLENBQUEsdUJBQXBCLENBQUNOLFNBQVMsRUFBRUYsT0FBTyxDQUFDLENBQUM7SUFFM0MsSUFBTUgsY0FBYyxHQUFHRCxjQUFjLGVBQUEsQ0FBQ2EsU0FBUyxDQUFDWCxLQUFLLENBQUMsQUFBQztJQUV2RCxPQUFPRCxjQUFjLENBQUM7Q0FDdkI7ZUFFYztJQUNiTCx1Q0FBdUMsRUFBdkNBLHVDQUF1QztJQUN2Q0MsNkNBQTZDLEVBQTdDQSw2Q0FBNkM7Q0FDOUMifQ==