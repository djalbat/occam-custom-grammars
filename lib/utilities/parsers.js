"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.florenceParserFromCombinedCustomGrammar = florenceParserFromCombinedCustomGrammar;
exports.florenceParserFromBNFAndCombinedCustomGrammar = florenceParserFromBNFAndCombinedCustomGrammar;
exports.default = void 0;
var _occamLexers = require("occam-lexers");
var _occamParsers = require("occam-parsers");
var _occamGrammars = require("occam-grammars");
var _necessary = require("necessary");
var push = _necessary.arrayUtilities.push;
function florenceParserFromCombinedCustomGrammar(combinedCustomGrammar) {
    var bnf = _occamGrammars.FlorenceParser.bnf, florenceParser = florenceParserFromBNFAndCombinedCustomGrammar(bnf, combinedCustomGrammar);
    return florenceParser;
}
function florenceParserFromBNFAndCombinedCustomGrammar(bnf, combinedCustomGrammar) {
    var combinedCustomGrammarRuleMap = combinedCustomGrammar.getRuleMap(), bnfLexer = _occamLexers.BNFLexer.fromNothing(), bnfParser = _occamParsers.BNFParser.fromNothing(), tokens = bnfLexer.tokensFromBNF(bnf), rules = bnfParser.rulesFromTokens(tokens), combinedCustomGrammarRules = Object.values(combinedCustomGrammarRuleMap);
    push(rules, combinedCustomGrammarRules);
    var florenceParser = _occamGrammars.FlorenceParser.fromRules(rules);
    return florenceParser;
}
var _default = {
    florenceParserFromCombinedCustomGrammar: florenceParserFromCombinedCustomGrammar,
    florenceParserFromBNFAndCombinedCustomGrammar: florenceParserFromBNFAndCombinedCustomGrammar
};
exports.default = _default;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcGFyc2Vycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgQk5GTGV4ZXIgfSBmcm9tIFwib2NjYW0tbGV4ZXJzXCI7XG5pbXBvcnQgeyBCTkZQYXJzZXIgfSBmcm9tIFwib2NjYW0tcGFyc2Vyc1wiO1xuaW1wb3J0IHsgRmxvcmVuY2VQYXJzZXIgfSBmcm9tIFwib2NjYW0tZ3JhbW1hcnNcIjtcbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5jb25zdCB7IHB1c2ggfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5leHBvcnQgZnVuY3Rpb24gZmxvcmVuY2VQYXJzZXJGcm9tQ29tYmluZWRDdXN0b21HcmFtbWFyKGNvbWJpbmVkQ3VzdG9tR3JhbW1hcikge1xuICBjb25zdCB7IGJuZiB9ID0gRmxvcmVuY2VQYXJzZXIsXG4gICAgICAgIGZsb3JlbmNlUGFyc2VyID0gZmxvcmVuY2VQYXJzZXJGcm9tQk5GQW5kQ29tYmluZWRDdXN0b21HcmFtbWFyKGJuZiwgY29tYmluZWRDdXN0b21HcmFtbWFyKTtcblxuICByZXR1cm4gZmxvcmVuY2VQYXJzZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmbG9yZW5jZVBhcnNlckZyb21CTkZBbmRDb21iaW5lZEN1c3RvbUdyYW1tYXIoYm5mLCBjb21iaW5lZEN1c3RvbUdyYW1tYXIpIHtcbiAgY29uc3QgY29tYmluZWRDdXN0b21HcmFtbWFyUnVsZU1hcCA9IGNvbWJpbmVkQ3VzdG9tR3JhbW1hci5nZXRSdWxlTWFwKCksXG4gICAgICAgIGJuZkxleGVyID0gQk5GTGV4ZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgICAgYm5mUGFyc2VyID0gQk5GUGFyc2VyLmZyb21Ob3RoaW5nKCksXG4gICAgICAgIHRva2VucyA9IGJuZkxleGVyLnRva2Vuc0Zyb21CTkYoYm5mKSxcbiAgICAgICAgcnVsZXMgPSBibmZQYXJzZXIucnVsZXNGcm9tVG9rZW5zKHRva2VucyksXG4gICAgICAgIGNvbWJpbmVkQ3VzdG9tR3JhbW1hclJ1bGVzID0gT2JqZWN0LnZhbHVlcyhjb21iaW5lZEN1c3RvbUdyYW1tYXJSdWxlTWFwKTtcblxuICBwdXNoKHJ1bGVzLCBjb21iaW5lZEN1c3RvbUdyYW1tYXJSdWxlcyk7XG5cbiAgY29uc3QgZmxvcmVuY2VQYXJzZXIgPSBGbG9yZW5jZVBhcnNlci5mcm9tUnVsZXMocnVsZXMpO1xuXG4gIHJldHVybiBmbG9yZW5jZVBhcnNlcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBmbG9yZW5jZVBhcnNlckZyb21Db21iaW5lZEN1c3RvbUdyYW1tYXIsXG4gIGZsb3JlbmNlUGFyc2VyRnJvbUJORkFuZENvbWJpbmVkQ3VzdG9tR3JhbW1hclxufTtcbiJdLCJuYW1lcyI6WyJmbG9yZW5jZVBhcnNlckZyb21Db21iaW5lZEN1c3RvbUdyYW1tYXIiLCJmbG9yZW5jZVBhcnNlckZyb21CTkZBbmRDb21iaW5lZEN1c3RvbUdyYW1tYXIiLCJwdXNoIiwiYXJyYXlVdGlsaXRpZXMiLCJjb21iaW5lZEN1c3RvbUdyYW1tYXIiLCJibmYiLCJGbG9yZW5jZVBhcnNlciIsImZsb3JlbmNlUGFyc2VyIiwiY29tYmluZWRDdXN0b21HcmFtbWFyUnVsZU1hcCIsImdldFJ1bGVNYXAiLCJibmZMZXhlciIsIkJORkxleGVyIiwiZnJvbU5vdGhpbmciLCJibmZQYXJzZXIiLCJCTkZQYXJzZXIiLCJ0b2tlbnMiLCJ0b2tlbnNGcm9tQk5GIiwicnVsZXMiLCJydWxlc0Zyb21Ub2tlbnMiLCJjb21iaW5lZEN1c3RvbUdyYW1tYXJSdWxlcyIsIk9iamVjdCIsInZhbHVlcyIsImZyb21SdWxlcyJdLCJtYXBwaW5ncyI6IkFBQUEsQ0FBWSxXQUFBLENBQUM7OztFO1FBU0dBLHVDQUF1QyxHQUF2Q0EsdUNBQXVDLEE7UUFPdkNDLDZDQUE2QyxHQUE3Q0EsNkNBQTZDLEE7d0I7QUFkcEMsR0FBYyxDQUFkLFlBQWM7QUFDYixHQUFlLENBQWYsYUFBZTtBQUNWLEdBQWdCLENBQWhCLGNBQWdCO0FBQ2hCLEdBQVcsQ0FBWCxVQUFXO0FBRTFDLEdBQUssQ0FBR0MsSUFBSSxHQUFLQyxVQUFjLGdCQUF2QkQsSUFBSTtTQUVJRix1Q0FBdUMsQ0FBQ0kscUJBQXFCLEVBQUUsQ0FBQztJQUM5RSxHQUFLLENBQUdDLEdBQUcsR0FBS0MsY0FBYyxnQkFBdEJELEdBQUcsRUFDTEUsY0FBYyxHQUFHTiw2Q0FBNkMsQ0FBQ0ksR0FBRyxFQUFFRCxxQkFBcUI7SUFFL0YsTUFBTSxDQUFDRyxjQUFjO0FBQ3ZCLENBQUM7U0FFZU4sNkNBQTZDLENBQUNJLEdBQUcsRUFBRUQscUJBQXFCLEVBQUUsQ0FBQztJQUN6RixHQUFLLENBQUNJLDRCQUE0QixHQUFHSixxQkFBcUIsQ0FBQ0ssVUFBVSxJQUMvREMsUUFBUSxHQUFHQyxZQUFRLFVBQUNDLFdBQVcsSUFDL0JDLFNBQVMsR0FBR0MsYUFBUyxXQUFDRixXQUFXLElBQ2pDRyxNQUFNLEdBQUdMLFFBQVEsQ0FBQ00sYUFBYSxDQUFDWCxHQUFHLEdBQ25DWSxLQUFLLEdBQUdKLFNBQVMsQ0FBQ0ssZUFBZSxDQUFDSCxNQUFNLEdBQ3hDSSwwQkFBMEIsR0FBR0MsTUFBTSxDQUFDQyxNQUFNLENBQUNiLDRCQUE0QjtJQUU3RU4sSUFBSSxDQUFDZSxLQUFLLEVBQUVFLDBCQUEwQixDQUFDLENBQUM7SUFFeEMsR0FBSyxDQUFDWixjQUFjLEdBQUdELGNBQWMsZ0JBQUNnQixTQUFTLENBQUNMLEtBQUs7SUFFckQsTUFBTSxDQUFDVixjQUFjO0FBQ3ZCLENBQUM7ZUFFYyxDQUFDO0lBQ2RQLHVDQUF1QyxFQUF2Q0EsdUNBQXVDO0lBQ3ZDQyw2Q0FBNkMsRUFBN0NBLDZDQUE2QztBQUMvQyxDQUFDOzBCIn0=