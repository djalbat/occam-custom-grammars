"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.florenceParserFromCombinedCustomGrammar = florenceParserFromCombinedCustomGrammar;
exports.florenceParserFromBNFAndCombinedCustomGrammar = florenceParserFromBNFAndCombinedCustomGrammar;
exports["default"] = void 0;

var _occamLexers = require("occam-lexers");

var _necessary = require("necessary");

var _occamParsers = require("occam-parsers");

var push = _necessary.arrayUtilities.push;

function florenceParserFromCombinedCustomGrammar(combinedCustomGrammar) {
  var bnf = _occamParsers.FlorenceParser.bnf,
      florenceParser = florenceParserFromBNFAndCombinedCustomGrammar(bnf, combinedCustomGrammar);
  return florenceParser;
}

function florenceParserFromBNFAndCombinedCustomGrammar(bnf, combinedCustomGrammar) {
  var combinedCustomGrammarRuleMap = combinedCustomGrammar.getRuleMap(),
      bnfLexer = _occamLexers.BNFLexer.fromNothing(),
      bnfParser = _occamParsers.BNFParser.fromNothing(),
      tokens = bnfLexer.tokensFromBNF(bnf),
      rules = bnfParser.rulesFromTokens(tokens),
      combinedCustomGrammarRules = Object.values(combinedCustomGrammarRuleMap);

  push(rules, combinedCustomGrammarRules);

  var florenceParser = _occamParsers.FlorenceParser.fromRules(rules);

  return florenceParser;
}

var _default = {
  florenceParserFromCombinedCustomGrammar: florenceParserFromCombinedCustomGrammar,
  florenceParserFromBNFAndCombinedCustomGrammar: florenceParserFromBNFAndCombinedCustomGrammar
};
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhcnNlcnMuanMiXSwibmFtZXMiOlsicHVzaCIsImFycmF5VXRpbGl0aWVzIiwiZmxvcmVuY2VQYXJzZXJGcm9tQ29tYmluZWRDdXN0b21HcmFtbWFyIiwiY29tYmluZWRDdXN0b21HcmFtbWFyIiwiYm5mIiwiRmxvcmVuY2VQYXJzZXIiLCJmbG9yZW5jZVBhcnNlciIsImZsb3JlbmNlUGFyc2VyRnJvbUJORkFuZENvbWJpbmVkQ3VzdG9tR3JhbW1hciIsImNvbWJpbmVkQ3VzdG9tR3JhbW1hclJ1bGVNYXAiLCJnZXRSdWxlTWFwIiwiYm5mTGV4ZXIiLCJCTkZMZXhlciIsImZyb21Ob3RoaW5nIiwiYm5mUGFyc2VyIiwiQk5GUGFyc2VyIiwidG9rZW5zIiwidG9rZW5zRnJvbUJORiIsInJ1bGVzIiwicnVsZXNGcm9tVG9rZW5zIiwiY29tYmluZWRDdXN0b21HcmFtbWFyUnVsZXMiLCJPYmplY3QiLCJ2YWx1ZXMiLCJmcm9tUnVsZXMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFDQTs7SUFFUUEsSSxHQUFTQyx5QixDQUFURCxJOztBQUVELFNBQVNFLHVDQUFULENBQWlEQyxxQkFBakQsRUFBd0U7QUFDdkUsTUFBRUMsR0FBRixHQUFVQyw0QkFBVixDQUFFRCxHQUFGO0FBQUEsTUFDQUUsY0FEQSxHQUNpQkMsNkNBQTZDLENBQUNILEdBQUQsRUFBTUQscUJBQU4sQ0FEOUQ7QUFHTixTQUFPRyxjQUFQO0FBQ0Q7O0FBRU0sU0FBU0MsNkNBQVQsQ0FBdURILEdBQXZELEVBQTRERCxxQkFBNUQsRUFBbUY7QUFDeEYsTUFBTUssNEJBQTRCLEdBQUdMLHFCQUFxQixDQUFDTSxVQUF0QixFQUFyQztBQUFBLE1BQ01DLFFBQVEsR0FBR0Msc0JBQVNDLFdBQVQsRUFEakI7QUFBQSxNQUVNQyxTQUFTLEdBQUdDLHdCQUFVRixXQUFWLEVBRmxCO0FBQUEsTUFHTUcsTUFBTSxHQUFHTCxRQUFRLENBQUNNLGFBQVQsQ0FBdUJaLEdBQXZCLENBSGY7QUFBQSxNQUlNYSxLQUFLLEdBQUdKLFNBQVMsQ0FBQ0ssZUFBVixDQUEwQkgsTUFBMUIsQ0FKZDtBQUFBLE1BS01JLDBCQUEwQixHQUFHQyxNQUFNLENBQUNDLE1BQVAsQ0FBY2IsNEJBQWQsQ0FMbkM7O0FBT0FSLEVBQUFBLElBQUksQ0FBQ2lCLEtBQUQsRUFBUUUsMEJBQVIsQ0FBSjs7QUFFQSxNQUFNYixjQUFjLEdBQUdELDZCQUFlaUIsU0FBZixDQUF5QkwsS0FBekIsQ0FBdkI7O0FBRUEsU0FBT1gsY0FBUDtBQUNEOztlQUVjO0FBQ2JKLEVBQUFBLHVDQUF1QyxFQUF2Q0EsdUNBRGE7QUFFYkssRUFBQUEsNkNBQTZDLEVBQTdDQTtBQUZhLEMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgQk5GTGV4ZXIgfSBmcm9tIFwib2NjYW0tbGV4ZXJzXCI7XG5pbXBvcnQgeyBhcnJheVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcbmltcG9ydCB7IEJORlBhcnNlciwgRmxvcmVuY2VQYXJzZXIgfSBmcm9tIFwib2NjYW0tcGFyc2Vyc1wiO1xuXG5jb25zdCB7IHB1c2ggfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5leHBvcnQgZnVuY3Rpb24gZmxvcmVuY2VQYXJzZXJGcm9tQ29tYmluZWRDdXN0b21HcmFtbWFyKGNvbWJpbmVkQ3VzdG9tR3JhbW1hcikge1xuICBjb25zdCB7IGJuZiB9ID0gRmxvcmVuY2VQYXJzZXIsXG4gICAgICAgIGZsb3JlbmNlUGFyc2VyID0gZmxvcmVuY2VQYXJzZXJGcm9tQk5GQW5kQ29tYmluZWRDdXN0b21HcmFtbWFyKGJuZiwgY29tYmluZWRDdXN0b21HcmFtbWFyKTtcblxuICByZXR1cm4gZmxvcmVuY2VQYXJzZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmbG9yZW5jZVBhcnNlckZyb21CTkZBbmRDb21iaW5lZEN1c3RvbUdyYW1tYXIoYm5mLCBjb21iaW5lZEN1c3RvbUdyYW1tYXIpIHtcbiAgY29uc3QgY29tYmluZWRDdXN0b21HcmFtbWFyUnVsZU1hcCA9IGNvbWJpbmVkQ3VzdG9tR3JhbW1hci5nZXRSdWxlTWFwKCksXG4gICAgICAgIGJuZkxleGVyID0gQk5GTGV4ZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgICAgYm5mUGFyc2VyID0gQk5GUGFyc2VyLmZyb21Ob3RoaW5nKCksXG4gICAgICAgIHRva2VucyA9IGJuZkxleGVyLnRva2Vuc0Zyb21CTkYoYm5mKSxcbiAgICAgICAgcnVsZXMgPSBibmZQYXJzZXIucnVsZXNGcm9tVG9rZW5zKHRva2VucyksXG4gICAgICAgIGNvbWJpbmVkQ3VzdG9tR3JhbW1hclJ1bGVzID0gT2JqZWN0LnZhbHVlcyhjb21iaW5lZEN1c3RvbUdyYW1tYXJSdWxlTWFwKTtcblxuICBwdXNoKHJ1bGVzLCBjb21iaW5lZEN1c3RvbUdyYW1tYXJSdWxlcyk7XG5cbiAgY29uc3QgZmxvcmVuY2VQYXJzZXIgPSBGbG9yZW5jZVBhcnNlci5mcm9tUnVsZXMocnVsZXMpO1xuXG4gIHJldHVybiBmbG9yZW5jZVBhcnNlcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBmbG9yZW5jZVBhcnNlckZyb21Db21iaW5lZEN1c3RvbUdyYW1tYXIsXG4gIGZsb3JlbmNlUGFyc2VyRnJvbUJORkFuZENvbWJpbmVkQ3VzdG9tR3JhbW1hclxufTtcbiJdfQ==