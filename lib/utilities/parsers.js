"use strict";

var lexers = require("occam-lexers"),
    parsers = require("occam-parsers"),
    necessary = require("necessary");

var arrayUtilities = necessary.arrayUtilities,
    push = arrayUtilities.push,
    BNFLexer = lexers.BNFLexer,
    BNFParser = parsers.BNFParser,
    FlorenceParser = parsers.FlorenceParser,
    termDefaultCustomGrammarBNF = parsers.termDefaultCustomGrammarBNF,
    statementDefaultCustomGrammarBNF = parsers.statementDefaultCustomGrammarBNF,
    expressionDefaultCustomGrammarBNF = parsers.expressionDefaultCustomGrammarBNF,
    metastatementDefaultCustomGrammarBNF = parsers.metastatementDefaultCustomGrammarBNF;
var bnfLexer = BNFLexer.fromNothing(),
    bnfParser = BNFParser.fromNothing();

function florenceParserFromCombinedCustomGrammar(combinedCustomGrammar) {
  var bnf = FlorenceParser.bnf,
      florenceParser = florenceParserFromBNFAndCombinedCustomGrammar(bnf, combinedCustomGrammar);
  return florenceParser;
}

function florenceParserFromBNFAndCombinedCustomGrammar(bnf, combinedCustomGrammar) {
  var combinedCustomGrammarRules = combinedCustomGrammar.getRules(),
      tokens = bnfLexer.tokensFromBNF(bnf),
      rules = bnfParser.rulesFromTokens(tokens);
  push(rules, combinedCustomGrammarRules);
  var florenceParser = new FlorenceParser(rules);
  return florenceParser;
}

module.exports = {
  termDefaultCustomGrammarBNF: termDefaultCustomGrammarBNF,
  statementDefaultCustomGrammarBNF: statementDefaultCustomGrammarBNF,
  expressionDefaultCustomGrammarBNF: expressionDefaultCustomGrammarBNF,
  metastatementDefaultCustomGrammarBNF: metastatementDefaultCustomGrammarBNF,
  florenceParserFromCombinedCustomGrammar: florenceParserFromCombinedCustomGrammar,
  florenceParserFromBNFAndCombinedCustomGrammar: florenceParserFromBNFAndCombinedCustomGrammar
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhcnNlcnMuanMiXSwibmFtZXMiOlsibGV4ZXJzIiwicmVxdWlyZSIsInBhcnNlcnMiLCJuZWNlc3NhcnkiLCJhcnJheVV0aWxpdGllcyIsInB1c2giLCJCTkZMZXhlciIsIkJORlBhcnNlciIsIkZsb3JlbmNlUGFyc2VyIiwidGVybURlZmF1bHRDdXN0b21HcmFtbWFyQk5GIiwic3RhdGVtZW50RGVmYXVsdEN1c3RvbUdyYW1tYXJCTkYiLCJleHByZXNzaW9uRGVmYXVsdEN1c3RvbUdyYW1tYXJCTkYiLCJtZXRhc3RhdGVtZW50RGVmYXVsdEN1c3RvbUdyYW1tYXJCTkYiLCJibmZMZXhlciIsImZyb21Ob3RoaW5nIiwiYm5mUGFyc2VyIiwiZmxvcmVuY2VQYXJzZXJGcm9tQ29tYmluZWRDdXN0b21HcmFtbWFyIiwiY29tYmluZWRDdXN0b21HcmFtbWFyIiwiYm5mIiwiZmxvcmVuY2VQYXJzZXIiLCJmbG9yZW5jZVBhcnNlckZyb21CTkZBbmRDb21iaW5lZEN1c3RvbUdyYW1tYXIiLCJjb21iaW5lZEN1c3RvbUdyYW1tYXJSdWxlcyIsImdldFJ1bGVzIiwidG9rZW5zIiwidG9rZW5zRnJvbUJORiIsInJ1bGVzIiwicnVsZXNGcm9tVG9rZW5zIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsTUFBTSxHQUFHQyxPQUFPLENBQUMsY0FBRCxDQUF0QjtBQUFBLElBQ01DLE9BQU8sR0FBR0QsT0FBTyxDQUFDLGVBQUQsQ0FEdkI7QUFBQSxJQUVNRSxTQUFTLEdBQUdGLE9BQU8sQ0FBQyxXQUFELENBRnpCOztBQUlNLElBQUVHLGNBQUYsR0FBcUJELFNBQXJCLENBQUVDLGNBQUY7QUFBQSxJQUNFQyxJQURGLEdBQ1dELGNBRFgsQ0FDRUMsSUFERjtBQUFBLElBRUVDLFFBRkYsR0FFZU4sTUFGZixDQUVFTSxRQUZGO0FBQUEsSUFHRUMsU0FIRixHQUdnQ0wsT0FIaEMsQ0FHRUssU0FIRjtBQUFBLElBR2FDLGNBSGIsR0FHZ0NOLE9BSGhDLENBR2FNLGNBSGI7QUFBQSxJQUlFQywyQkFKRixHQUk2SVAsT0FKN0ksQ0FJRU8sMkJBSkY7QUFBQSxJQUkrQkMsZ0NBSi9CLEdBSTZJUixPQUo3SSxDQUkrQlEsZ0NBSi9CO0FBQUEsSUFJaUVDLGlDQUpqRSxHQUk2SVQsT0FKN0ksQ0FJaUVTLGlDQUpqRTtBQUFBLElBSW9HQyxvQ0FKcEcsR0FJNklWLE9BSjdJLENBSW9HVSxvQ0FKcEc7QUFNTixJQUFNQyxRQUFRLEdBQUdQLFFBQVEsQ0FBQ1EsV0FBVCxFQUFqQjtBQUFBLElBQ01DLFNBQVMsR0FBR1IsU0FBUyxDQUFDTyxXQUFWLEVBRGxCOztBQUdBLFNBQVNFLHVDQUFULENBQWlEQyxxQkFBakQsRUFBd0U7QUFDaEUsTUFBRUMsR0FBRixHQUFVVixjQUFWLENBQUVVLEdBQUY7QUFBQSxNQUNBQyxjQURBLEdBQ2lCQyw2Q0FBNkMsQ0FBQ0YsR0FBRCxFQUFNRCxxQkFBTixDQUQ5RDtBQUdOLFNBQU9FLGNBQVA7QUFDRDs7QUFFRCxTQUFTQyw2Q0FBVCxDQUF1REYsR0FBdkQsRUFBNERELHFCQUE1RCxFQUFtRjtBQUNqRixNQUFNSSwwQkFBMEIsR0FBR0oscUJBQXFCLENBQUNLLFFBQXRCLEVBQW5DO0FBQUEsTUFDTUMsTUFBTSxHQUFHVixRQUFRLENBQUNXLGFBQVQsQ0FBdUJOLEdBQXZCLENBRGY7QUFBQSxNQUVNTyxLQUFLLEdBQUdWLFNBQVMsQ0FBQ1csZUFBVixDQUEwQkgsTUFBMUIsQ0FGZDtBQUlBbEIsRUFBQUEsSUFBSSxDQUFDb0IsS0FBRCxFQUFRSiwwQkFBUixDQUFKO0FBRUEsTUFBTUYsY0FBYyxHQUFHLElBQUlYLGNBQUosQ0FBbUJpQixLQUFuQixDQUF2QjtBQUVBLFNBQU9OLGNBQVA7QUFDRDs7QUFFRFEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2ZuQixFQUFBQSwyQkFBMkIsRUFBM0JBLDJCQURlO0FBRWZDLEVBQUFBLGdDQUFnQyxFQUFoQ0EsZ0NBRmU7QUFHZkMsRUFBQUEsaUNBQWlDLEVBQWpDQSxpQ0FIZTtBQUlmQyxFQUFBQSxvQ0FBb0MsRUFBcENBLG9DQUplO0FBS2ZJLEVBQUFBLHVDQUF1QyxFQUF2Q0EsdUNBTGU7QUFNZkksRUFBQUEsNkNBQTZDLEVBQTdDQTtBQU5lLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IGxleGVycyA9IHJlcXVpcmUoXCJvY2NhbS1sZXhlcnNcIiksXG4gICAgICBwYXJzZXJzID0gcmVxdWlyZShcIm9jY2FtLXBhcnNlcnNcIiksXG4gICAgICBuZWNlc3NhcnkgPSByZXF1aXJlKFwibmVjZXNzYXJ5XCIpO1xuXG5jb25zdCB7IGFycmF5VXRpbGl0aWVzIH0gPSBuZWNlc3NhcnksXG4gICAgICB7IHB1c2ggfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyBCTkZMZXhlciB9ID0gbGV4ZXJzLFxuICAgICAgeyBCTkZQYXJzZXIsIEZsb3JlbmNlUGFyc2VyIH0gPSBwYXJzZXJzLFxuICAgICAgeyB0ZXJtRGVmYXVsdEN1c3RvbUdyYW1tYXJCTkYsIHN0YXRlbWVudERlZmF1bHRDdXN0b21HcmFtbWFyQk5GLCBleHByZXNzaW9uRGVmYXVsdEN1c3RvbUdyYW1tYXJCTkYsIG1ldGFzdGF0ZW1lbnREZWZhdWx0Q3VzdG9tR3JhbW1hckJORiB9ID0gcGFyc2VycztcblxuY29uc3QgYm5mTGV4ZXIgPSBCTkZMZXhlci5mcm9tTm90aGluZygpLFxuICAgICAgYm5mUGFyc2VyID0gQk5GUGFyc2VyLmZyb21Ob3RoaW5nKCk7XG5cbmZ1bmN0aW9uIGZsb3JlbmNlUGFyc2VyRnJvbUNvbWJpbmVkQ3VzdG9tR3JhbW1hcihjb21iaW5lZEN1c3RvbUdyYW1tYXIpIHtcbiAgY29uc3QgeyBibmYgfSA9IEZsb3JlbmNlUGFyc2VyLFxuICAgICAgICBmbG9yZW5jZVBhcnNlciA9IGZsb3JlbmNlUGFyc2VyRnJvbUJORkFuZENvbWJpbmVkQ3VzdG9tR3JhbW1hcihibmYsIGNvbWJpbmVkQ3VzdG9tR3JhbW1hcik7XG5cbiAgcmV0dXJuIGZsb3JlbmNlUGFyc2VyO1xufVxuXG5mdW5jdGlvbiBmbG9yZW5jZVBhcnNlckZyb21CTkZBbmRDb21iaW5lZEN1c3RvbUdyYW1tYXIoYm5mLCBjb21iaW5lZEN1c3RvbUdyYW1tYXIpIHtcbiAgY29uc3QgY29tYmluZWRDdXN0b21HcmFtbWFyUnVsZXMgPSBjb21iaW5lZEN1c3RvbUdyYW1tYXIuZ2V0UnVsZXMoKSxcbiAgICAgICAgdG9rZW5zID0gYm5mTGV4ZXIudG9rZW5zRnJvbUJORihibmYpLFxuICAgICAgICBydWxlcyA9IGJuZlBhcnNlci5ydWxlc0Zyb21Ub2tlbnModG9rZW5zKTtcblxuICBwdXNoKHJ1bGVzLCBjb21iaW5lZEN1c3RvbUdyYW1tYXJSdWxlcyk7XG5cbiAgY29uc3QgZmxvcmVuY2VQYXJzZXIgPSBuZXcgRmxvcmVuY2VQYXJzZXIocnVsZXMpO1xuXG4gIHJldHVybiBmbG9yZW5jZVBhcnNlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHRlcm1EZWZhdWx0Q3VzdG9tR3JhbW1hckJORixcbiAgc3RhdGVtZW50RGVmYXVsdEN1c3RvbUdyYW1tYXJCTkYsXG4gIGV4cHJlc3Npb25EZWZhdWx0Q3VzdG9tR3JhbW1hckJORixcbiAgbWV0YXN0YXRlbWVudERlZmF1bHRDdXN0b21HcmFtbWFyQk5GLFxuICBmbG9yZW5jZVBhcnNlckZyb21Db21iaW5lZEN1c3RvbUdyYW1tYXIsXG4gIGZsb3JlbmNlUGFyc2VyRnJvbUJORkFuZENvbWJpbmVkQ3VzdG9tR3JhbW1hclxufTtcbiJdfQ==