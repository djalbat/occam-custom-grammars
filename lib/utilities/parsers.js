"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get default () {
        return _default;
    },
    get nominalParserFromBNFAndCombinedCustomGrammar () {
        return nominalParserFromBNFAndCombinedCustomGrammar;
    },
    get nominalParserFromBNFStartRuleNameAndCombinedCustomGrammar () {
        return nominalParserFromBNFStartRuleNameAndCombinedCustomGrammar;
    },
    get nominalParserFromCombinedCustomGrammar () {
        return nominalParserFromCombinedCustomGrammar;
    },
    get nominalParserFromNothing () {
        return nominalParserFromNothing;
    },
    get nominalParserFromStartRuleName () {
        return nominalParserFromStartRuleName;
    },
    get nominalParserFromStartRuleNameAndCombinedCustomGrammar () {
        return nominalParserFromStartRuleNameAndCombinedCustomGrammar;
    }
});
var _occamgrammars = require("occam-grammars");
var _occamparsers = require("occam-parsers");
var _combined = /*#__PURE__*/ _interop_require_default(require("../customGrammar/combined"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var rulesFromBNF = _occamparsers.parserUtilities.rulesFromBNF, parserFromRules = _occamparsers.parserUtilities.parserFromRules, parserFromRulesAndStartRuleName = _occamparsers.parserUtilities.parserFromRulesAndStartRuleName;
function nominalParserFromNothing(Class) {
    if (Class === undefined) {
        Class = _occamgrammars.NominalParser; ///
    }
    var bnf = Class.bnf, combinedCustomGrammar = _combined.default.fromNothing(), rules = rulesFromBNFAndCombinedCustomGrammar(bnf, combinedCustomGrammar), nominalParser = parserFromRules(Class, rules);
    return nominalParser;
}
function nominalParserFromStartRuleName(Class, startRuleName) {
    if (startRuleName === undefined) {
        startRuleName = Class; ///
        Class = _occamgrammars.NominalParser; ///
    }
    var bnf = Class.bnf, combinedCustomGrammar = _combined.default.fromNothing(), rules = rulesFromBNFAndCombinedCustomGrammar(bnf, combinedCustomGrammar), nominalParser = parserFromRulesAndStartRuleName(Class, rules, startRuleName);
    return nominalParser;
}
function nominalParserFromCombinedCustomGrammar(Class, combinedCustomGrammar) {
    if (combinedCustomGrammar === undefined) {
        combinedCustomGrammar = Class; ///
        Class = _occamgrammars.NominalParser; ///
    }
    var bnf = Class.bnf, rules = rulesFromBNFAndCombinedCustomGrammar(bnf, combinedCustomGrammar), nominalParser = parserFromRules(Class, rules);
    return nominalParser;
}
function nominalParserFromBNFAndCombinedCustomGrammar(Class, bnf, combinedCustomGrammar) {
    if (combinedCustomGrammar === undefined) {
        combinedCustomGrammar = bnf; ///
        bnf = Class; ///
        Class = _occamgrammars.NominalParser; ///
    }
    var rules = rulesFromBNFAndCombinedCustomGrammar(bnf, combinedCustomGrammar), nominalParser = parserFromRules(Class, rules);
    return nominalParser;
}
function nominalParserFromStartRuleNameAndCombinedCustomGrammar(Class, startRuleName, combinedCustomGrammar) {
    if (combinedCustomGrammar === undefined) {
        combinedCustomGrammar = startRuleName; ///
        startRuleName = Class; ///
        Class = _occamgrammars.NominalParser; ///
    }
    var bnf = Class.bnf, rules = rulesFromBNFAndCombinedCustomGrammar(bnf, combinedCustomGrammar), nominalParser = parserFromRulesAndStartRuleName(Class, rules, startRuleName);
    return nominalParser;
}
function nominalParserFromBNFStartRuleNameAndCombinedCustomGrammar(Class, bnf, startRuleName, combinedCustomGrammar) {
    if (combinedCustomGrammar === undefined) {
        combinedCustomGrammar = startRuleName; ///
        startRuleName = bnf; ///
        bnf = Class; ///
        Class = _occamgrammars.NominalParser; ///
    }
    var rules = rulesFromBNFAndCombinedCustomGrammar(bnf, combinedCustomGrammar), nominalParser = parserFromRulesAndStartRuleName(Class, rules, startRuleName);
    return nominalParser;
}
var _default = {
    nominalParserFromNothing: nominalParserFromNothing,
    nominalParserFromStartRuleName: nominalParserFromStartRuleName,
    nominalParserFromCombinedCustomGrammar: nominalParserFromCombinedCustomGrammar,
    nominalParserFromBNFAndCombinedCustomGrammar: nominalParserFromBNFAndCombinedCustomGrammar,
    nominalParserFromStartRuleNameAndCombinedCustomGrammar: nominalParserFromStartRuleNameAndCombinedCustomGrammar,
    nominalParserFromBNFStartRuleNameAndCombinedCustomGrammar: nominalParserFromBNFStartRuleNameAndCombinedCustomGrammar
};
function rulesFromBNFAndCombinedCustomGrammar(bnf, combinedCustomGrammar) {
    var rules = rulesFromBNF(bnf);
    rules = combinedCustomGrammar.postProcess(rules);
    return rules;
}

//# sourceMappingURL=data:application/json;base64,