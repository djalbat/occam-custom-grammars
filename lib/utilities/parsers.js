"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.florenceParserFromCombinedCustomGrammar = florenceParserFromCombinedCustomGrammar;
exports.florenceParserFromBNFAndCombinedCustomGrammar = florenceParserFromBNFAndCombinedCustomGrammar;
exports.default = void 0;
var _occamLexers = require("occam-lexers");
var _occamParsers = require("occam-parsers");
var _occamGrammars = require("occam-grammars");
var _necessary = require("necessary");
var push = _necessary.arrayUtilities.push;
function florenceParserFromCombinedCustomGrammar(combinedCustomGrammar) {
    var bnf = _occamGrammars.FlorenceParser.bnf, florenceParser = florenceParserFromBNFAndCombinedCustomGrammar(bnf, combinedCustomGrammar);
    return florenceParser;
}
function florenceParserFromBNFAndCombinedCustomGrammar(bnf, combinedCustomGrammar) {
    var combinedCustomGrammarRuleMap = combinedCustomGrammar.getRuleMap(), bnfLexer = _occamLexers.BNFLexer.fromNothing(), bnfParser = _occamParsers.BNFParser.fromNothing(), tokens = bnfLexer.tokensFromBNF(bnf), rules = bnfParser.rulesFromTokens(tokens), combinedCustomGrammarRules = Object.values(combinedCustomGrammarRuleMap);
    push(rules, combinedCustomGrammarRules);
    var florenceParser = _occamGrammars.FlorenceParser.fromRules(rules);
    return florenceParser;
}
var _default = {
    florenceParserFromCombinedCustomGrammar: florenceParserFromCombinedCustomGrammar,
    florenceParserFromBNFAndCombinedCustomGrammar: florenceParserFromBNFAndCombinedCustomGrammar
};
exports.default = _default;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcGFyc2Vycy5qcyJdLCJuYW1lcyI6WyJCTkZMZXhlciIsIkJORlBhcnNlciIsIkZsb3JlbmNlUGFyc2VyIiwiYXJyYXlVdGlsaXRpZXMiLCJwdXNoIiwiZmxvcmVuY2VQYXJzZXJGcm9tQ29tYmluZWRDdXN0b21HcmFtbWFyIiwiY29tYmluZWRDdXN0b21HcmFtbWFyIiwiYm5mIiwiZmxvcmVuY2VQYXJzZXIiLCJmbG9yZW5jZVBhcnNlckZyb21CTkZBbmRDb21iaW5lZEN1c3RvbUdyYW1tYXIiLCJjb21iaW5lZEN1c3RvbUdyYW1tYXJSdWxlTWFwIiwiZ2V0UnVsZU1hcCIsImJuZkxleGVyIiwiZnJvbU5vdGhpbmciLCJibmZQYXJzZXIiLCJ0b2tlbnMiLCJ0b2tlbnNGcm9tQk5GIiwicnVsZXMiLCJydWxlc0Zyb21Ub2tlbnMiLCJjb21iaW5lZEN1c3RvbUdyYW1tYXJSdWxlcyIsIk9iamVjdCIsInZhbHVlcyIsImZyb21SdWxlcyJdLCJtYXBwaW5ncyI6IkNBQUEsVUFBWTs7OztRQVNJLHVDQUF1QyxHQUF2Qyx1Q0FBdUM7UUFPdkMsNkNBQTZDLEdBQTdDLDZDQUE2Qzs7QUFkcEMsR0FBYyxDQUFkLFlBQWM7QUFDYixHQUFlLENBQWYsYUFBZTtBQUNWLEdBQWdCLENBQWhCLGNBQWdCO0FBQ2hCLEdBQVcsQ0FBWCxVQUFXO0FBRTFDLEdBQUssQ0FBRyxJQUFJLEdBRm1CLFVBQVcsZ0JBRWxDLElBQUk7U0FFSSx1Q0FBdUMsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0lBQzlFLEdBQUssQ0FBRyxHQUFHLEdBTmtCLGNBQWdCLGdCQU1yQyxHQUFHLEVBQ0wsY0FBYyxHQUFHLDZDQUE2QyxDQUFDLEdBQUcsRUFBRSxxQkFBcUI7SUFFL0YsTUFBTSxDQUFDLGNBQWM7QUFDdkIsQ0FBQztTQUVlLDZDQUE2QyxDQUFDLEdBQUcsRUFBRSxxQkFBcUIsRUFBRSxDQUFDO0lBQ3pGLEdBQUssQ0FBQyw0QkFBNEIsR0FBRyxxQkFBcUIsQ0FBQyxVQUFVLElBQy9ELFFBQVEsR0FoQlMsWUFBYyxVQWdCWCxXQUFXLElBQy9CLFNBQVMsR0FoQlMsYUFBZSxXQWdCWCxXQUFXLElBQ2pDLE1BQU0sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEdBQUcsR0FDbkMsS0FBSyxHQUFHLFNBQVMsQ0FBQyxlQUFlLENBQUMsTUFBTSxHQUN4QywwQkFBMEIsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLDRCQUE0QjtJQUU3RSxJQUFJLENBQUMsS0FBSyxFQUFFLDBCQUEwQjtJQUV0QyxHQUFLLENBQUMsY0FBYyxHQXRCUyxjQUFnQixnQkFzQlAsU0FBUyxDQUFDLEtBQUs7SUFFckQsTUFBTSxDQUFDLGNBQWM7QUFDdkIsQ0FBQztlQUVjLENBQUM7SUFDZCx1Q0FBdUMsRUFBdkMsdUNBQXVDO0lBQ3ZDLDZDQUE2QyxFQUE3Qyw2Q0FBNkM7QUFDL0MsQ0FBQyJ9