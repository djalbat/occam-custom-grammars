"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.florenceParserFromCombinedCustomGrammar = florenceParserFromCombinedCustomGrammar;
exports.florenceParserFromBNFAndCombinedCustomGrammar = florenceParserFromBNFAndCombinedCustomGrammar;
exports.default = void 0;
var _occamGrammars = require("occam-grammars");
var _occamGrammarUtilities = require("occam-grammar-utilities");
var _constants = require("../constants");
var _rules = require("../utilities/rules");
function florenceParserFromCombinedCustomGrammar(combinedCustomGrammar) {
    var bnf = _occamGrammars.FlorenceParser.bnf, florenceParser = florenceParserFromBNFAndCombinedCustomGrammar(bnf, combinedCustomGrammar);
    return florenceParser;
}
function florenceParserFromBNFAndCombinedCustomGrammar(bnf, combinedCustomGrammar) {
    var rules = (0, _rules).rulesFromBNF(bnf);
    var ruleMap = (0, _rules).ruleMapFromRules(rules), startRule = ruleMap[_constants.FLORENCE_START_RULE_NAME], combinedCustomGrammarRuleMap = combinedCustomGrammar.getRuleMap();
    Object.assign(ruleMap, combinedCustomGrammarRuleMap);
    (0, _occamGrammarUtilities).eliminateLeftRecursion(startRule, ruleMap);
    delete ruleMap[_constants.FLORENCE_START_RULE_NAME];
    rules = Object.values(ruleMap);
    rules.unshift(startRule);
    var florenceParser = _occamGrammars.FlorenceParser.fromRules(rules);
    return florenceParser;
}
var _default = {
    florenceParserFromCombinedCustomGrammar: florenceParserFromCombinedCustomGrammar,
    florenceParserFromBNFAndCombinedCustomGrammar: florenceParserFromBNFAndCombinedCustomGrammar
};
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcGFyc2Vycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgRmxvcmVuY2VQYXJzZXIgfSBmcm9tIFwib2NjYW0tZ3JhbW1hcnNcIjtcbmltcG9ydCB7IGVsaW1pbmF0ZUxlZnRSZWN1cnNpb24gfSBmcm9tIFwib2NjYW0tZ3JhbW1hci11dGlsaXRpZXNcIjtcblxuaW1wb3J0IHsgRkxPUkVOQ0VfU1RBUlRfUlVMRV9OQU1FIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuaW1wb3J0IHsgcnVsZXNGcm9tQk5GLCBydWxlTWFwRnJvbVJ1bGVzIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9ydWxlc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gZmxvcmVuY2VQYXJzZXJGcm9tQ29tYmluZWRDdXN0b21HcmFtbWFyKGNvbWJpbmVkQ3VzdG9tR3JhbW1hcikge1xuICBjb25zdCB7IGJuZiB9ID0gRmxvcmVuY2VQYXJzZXIsXG4gICAgICAgIGZsb3JlbmNlUGFyc2VyID0gZmxvcmVuY2VQYXJzZXJGcm9tQk5GQW5kQ29tYmluZWRDdXN0b21HcmFtbWFyKGJuZiwgY29tYmluZWRDdXN0b21HcmFtbWFyKTtcblxuICByZXR1cm4gZmxvcmVuY2VQYXJzZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmbG9yZW5jZVBhcnNlckZyb21CTkZBbmRDb21iaW5lZEN1c3RvbUdyYW1tYXIoYm5mLCBjb21iaW5lZEN1c3RvbUdyYW1tYXIpIHtcbiAgbGV0IHJ1bGVzID0gcnVsZXNGcm9tQk5GKGJuZik7XG5cbiAgY29uc3QgcnVsZU1hcCA9IHJ1bGVNYXBGcm9tUnVsZXMocnVsZXMpLFxuICAgICAgICBzdGFydFJ1bGUgPSBydWxlTWFwW0ZMT1JFTkNFX1NUQVJUX1JVTEVfTkFNRV0sXG4gICAgICAgIGNvbWJpbmVkQ3VzdG9tR3JhbW1hclJ1bGVNYXAgPSBjb21iaW5lZEN1c3RvbUdyYW1tYXIuZ2V0UnVsZU1hcCgpO1xuXG4gIE9iamVjdC5hc3NpZ24ocnVsZU1hcCwgY29tYmluZWRDdXN0b21HcmFtbWFyUnVsZU1hcCk7XG5cbiAgZWxpbWluYXRlTGVmdFJlY3Vyc2lvbihzdGFydFJ1bGUsIHJ1bGVNYXApO1xuXG4gIGRlbGV0ZSBydWxlTWFwW0ZMT1JFTkNFX1NUQVJUX1JVTEVfTkFNRV07XG5cbiAgcnVsZXMgPSBPYmplY3QudmFsdWVzKHJ1bGVNYXApO1xuXG4gIHJ1bGVzLnVuc2hpZnQoc3RhcnRSdWxlKTtcblxuICBjb25zdCBmbG9yZW5jZVBhcnNlciA9IEZsb3JlbmNlUGFyc2VyLmZyb21SdWxlcyhydWxlcyk7XG5cbiAgcmV0dXJuIGZsb3JlbmNlUGFyc2VyO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGZsb3JlbmNlUGFyc2VyRnJvbUNvbWJpbmVkQ3VzdG9tR3JhbW1hcixcbiAgZmxvcmVuY2VQYXJzZXJGcm9tQk5GQW5kQ29tYmluZWRDdXN0b21HcmFtbWFyXG59O1xuIl0sIm5hbWVzIjpbImZsb3JlbmNlUGFyc2VyRnJvbUNvbWJpbmVkQ3VzdG9tR3JhbW1hciIsImZsb3JlbmNlUGFyc2VyRnJvbUJORkFuZENvbWJpbmVkQ3VzdG9tR3JhbW1hciIsImNvbWJpbmVkQ3VzdG9tR3JhbW1hciIsImJuZiIsIkZsb3JlbmNlUGFyc2VyIiwiZmxvcmVuY2VQYXJzZXIiLCJydWxlcyIsInJ1bGVzRnJvbUJORiIsInJ1bGVNYXAiLCJydWxlTWFwRnJvbVJ1bGVzIiwic3RhcnRSdWxlIiwiRkxPUkVOQ0VfU1RBUlRfUlVMRV9OQU1FIiwiY29tYmluZWRDdXN0b21HcmFtbWFyUnVsZU1hcCIsImdldFJ1bGVNYXAiLCJPYmplY3QiLCJhc3NpZ24iLCJlbGltaW5hdGVMZWZ0UmVjdXJzaW9uIiwidmFsdWVzIiwidW5zaGlmdCIsImZyb21SdWxlcyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7O1FBUUdBLHVDQUF1QyxHQUF2Q0EsdUNBQXVDO1FBT3ZDQyw2Q0FBNkMsR0FBN0NBLDZDQUE2Qzs7QUFiOUIsSUFBQSxjQUFnQixXQUFoQixnQkFBZ0IsQ0FBQTtBQUNSLElBQUEsc0JBQXlCLFdBQXpCLHlCQUF5QixDQUFBO0FBRXZCLElBQUEsVUFBYyxXQUFkLGNBQWMsQ0FBQTtBQUNSLElBQUEsTUFBb0IsV0FBcEIsb0JBQW9CLENBQUE7QUFFNUQsU0FBU0QsdUNBQXVDLENBQUNFLHFCQUFxQixFQUFFO0lBQzdFLElBQU0sQUFBRUMsR0FBRyxHQUFLQyxjQUFjLGVBQUEsQ0FBdEJELEdBQUcsQUFBbUIsRUFDeEJFLGNBQWMsR0FBR0osNkNBQTZDLENBQUNFLEdBQUcsRUFBRUQscUJBQXFCLENBQUMsQUFBQztJQUVqRyxPQUFPRyxjQUFjLENBQUM7Q0FDdkI7QUFFTSxTQUFTSiw2Q0FBNkMsQ0FBQ0UsR0FBRyxFQUFFRCxxQkFBcUIsRUFBRTtJQUN4RixJQUFJSSxLQUFLLEdBQUdDLENBQUFBLEdBQUFBLE1BQVksQUFBSyxDQUFBLGFBQUwsQ0FBQ0osR0FBRyxDQUFDLEFBQUM7SUFFOUIsSUFBTUssT0FBTyxHQUFHQyxDQUFBQSxHQUFBQSxNQUFnQixBQUFPLENBQUEsaUJBQVAsQ0FBQ0gsS0FBSyxDQUFDLEVBQ2pDSSxTQUFTLEdBQUdGLE9BQU8sQ0FBQ0csVUFBd0IseUJBQUEsQ0FBQyxFQUM3Q0MsNEJBQTRCLEdBQUdWLHFCQUFxQixDQUFDVyxVQUFVLEVBQUUsQUFBQztJQUV4RUMsTUFBTSxDQUFDQyxNQUFNLENBQUNQLE9BQU8sRUFBRUksNEJBQTRCLENBQUMsQ0FBQztJQUVyREksQ0FBQUEsR0FBQUEsc0JBQXNCLEFBQW9CLENBQUEsdUJBQXBCLENBQUNOLFNBQVMsRUFBRUYsT0FBTyxDQUFDLENBQUM7SUFFM0MsT0FBT0EsT0FBTyxDQUFDRyxVQUF3Qix5QkFBQSxDQUFDLENBQUM7SUFFekNMLEtBQUssR0FBR1EsTUFBTSxDQUFDRyxNQUFNLENBQUNULE9BQU8sQ0FBQyxDQUFDO0lBRS9CRixLQUFLLENBQUNZLE9BQU8sQ0FBQ1IsU0FBUyxDQUFDLENBQUM7SUFFekIsSUFBTUwsY0FBYyxHQUFHRCxjQUFjLGVBQUEsQ0FBQ2UsU0FBUyxDQUFDYixLQUFLLENBQUMsQUFBQztJQUV2RCxPQUFPRCxjQUFjLENBQUM7Q0FDdkI7ZUFFYztJQUNiTCx1Q0FBdUMsRUFBdkNBLHVDQUF1QztJQUN2Q0MsNkNBQTZDLEVBQTdDQSw2Q0FBNkM7Q0FDOUMifQ==