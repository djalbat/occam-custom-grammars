'use strict';

var lexers = require('occam-lexers'),
    parsers = require('occam-parsers'),
    necessary = require('necessary');

var arrayUtilities = necessary.arrayUtilities,
    push = arrayUtilities.push,
    BNFLexer = lexers.BNFLexer,
    BNFParser = parsers.BNFParser,
    FlorenceParser = parsers.FlorenceParser,
    termDefaultCustomGrammarBNF = parsers.termDefaultCustomGrammarBNF,
    statementDefaultCustomGrammarBNF = parsers.statementDefaultCustomGrammarBNF,
    expressionDefaultCustomGrammarBNF = parsers.expressionDefaultCustomGrammarBNF,
    metastatementDefaultCustomGrammarBNF = parsers.metastatementDefaultCustomGrammarBNF;
var bnfLexer = BNFLexer.fromNothing(),
    bnfParser = BNFParser.fromNothing();

function florenceParserFromCombinedCustomGrammar(combinedCustomGrammar) {
  var bnf = FlorenceParser.bnf,
      florenceParser = florenceParserFromBNFAndCombinedCustomGrammar(bnf, combinedCustomGrammar);
  return florenceParser;
}

function florenceParserFromBNFAndCombinedCustomGrammar(bnf, combinedCustomGrammar) {
  var combinedCustomGrammarRules = combinedCustomGrammar.getRules(),
      tokens = bnfLexer.tokensFromBNF(bnf),
      rules = bnfParser.rulesFromTokens(tokens);
  push(rules, combinedCustomGrammarRules);
  var florenceParser = new FlorenceParser(rules);
  return florenceParser;
}

module.exports = {
  termDefaultCustomGrammarBNF: termDefaultCustomGrammarBNF,
  statementDefaultCustomGrammarBNF: statementDefaultCustomGrammarBNF,
  expressionDefaultCustomGrammarBNF: expressionDefaultCustomGrammarBNF,
  metastatementDefaultCustomGrammarBNF: metastatementDefaultCustomGrammarBNF,
  florenceParserFromCombinedCustomGrammar: florenceParserFromCombinedCustomGrammar,
  florenceParserFromBNFAndCombinedCustomGrammar: florenceParserFromBNFAndCombinedCustomGrammar
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhcnNlcnMuanMiXSwibmFtZXMiOlsibGV4ZXJzIiwicmVxdWlyZSIsInBhcnNlcnMiLCJuZWNlc3NhcnkiLCJhcnJheVV0aWxpdGllcyIsInB1c2giLCJCTkZMZXhlciIsIkJORlBhcnNlciIsIkZsb3JlbmNlUGFyc2VyIiwidGVybURlZmF1bHRDdXN0b21HcmFtbWFyQk5GIiwic3RhdGVtZW50RGVmYXVsdEN1c3RvbUdyYW1tYXJCTkYiLCJleHByZXNzaW9uRGVmYXVsdEN1c3RvbUdyYW1tYXJCTkYiLCJtZXRhc3RhdGVtZW50RGVmYXVsdEN1c3RvbUdyYW1tYXJCTkYiLCJibmZMZXhlciIsImZyb21Ob3RoaW5nIiwiYm5mUGFyc2VyIiwiZmxvcmVuY2VQYXJzZXJGcm9tQ29tYmluZWRDdXN0b21HcmFtbWFyIiwiY29tYmluZWRDdXN0b21HcmFtbWFyIiwiYm5mIiwiZmxvcmVuY2VQYXJzZXIiLCJmbG9yZW5jZVBhcnNlckZyb21CTkZBbmRDb21iaW5lZEN1c3RvbUdyYW1tYXIiLCJjb21iaW5lZEN1c3RvbUdyYW1tYXJSdWxlcyIsImdldFJ1bGVzIiwidG9rZW5zIiwidG9rZW5zRnJvbUJORiIsInJ1bGVzIiwicnVsZXNGcm9tVG9rZW5zIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsTUFBTSxHQUFHQyxPQUFPLENBQUMsY0FBRCxDQUF0QjtBQUFBLElBQ01DLE9BQU8sR0FBR0QsT0FBTyxDQUFDLGVBQUQsQ0FEdkI7QUFBQSxJQUVNRSxTQUFTLEdBQUdGLE9BQU8sQ0FBQyxXQUFELENBRnpCOztBQUlNLElBQUVHLGNBQUYsR0FBcUJELFNBQXJCLENBQUVDLGNBQUY7QUFBQSxJQUNFQyxJQURGLEdBQ1dELGNBRFgsQ0FDRUMsSUFERjtBQUFBLElBRUVDLFFBRkYsR0FFZU4sTUFGZixDQUVFTSxRQUZGO0FBQUEsSUFHRUMsU0FIRixHQUdnQ0wsT0FIaEMsQ0FHRUssU0FIRjtBQUFBLElBR2FDLGNBSGIsR0FHZ0NOLE9BSGhDLENBR2FNLGNBSGI7QUFBQSxJQUlFQywyQkFKRixHQUk2SVAsT0FKN0ksQ0FJRU8sMkJBSkY7QUFBQSxJQUkrQkMsZ0NBSi9CLEdBSTZJUixPQUo3SSxDQUkrQlEsZ0NBSi9CO0FBQUEsSUFJaUVDLGlDQUpqRSxHQUk2SVQsT0FKN0ksQ0FJaUVTLGlDQUpqRTtBQUFBLElBSW9HQyxvQ0FKcEcsR0FJNklWLE9BSjdJLENBSW9HVSxvQ0FKcEc7QUFNTixJQUFNQyxRQUFRLEdBQUdQLFFBQVEsQ0FBQ1EsV0FBVCxFQUFqQjtBQUFBLElBQ01DLFNBQVMsR0FBR1IsU0FBUyxDQUFDTyxXQUFWLEVBRGxCOztBQUdBLFNBQVNFLHVDQUFULENBQWlEQyxxQkFBakQsRUFBd0U7QUFDaEUsTUFBRUMsR0FBRixHQUFVVixjQUFWLENBQUVVLEdBQUY7QUFBQSxNQUNBQyxjQURBLEdBQ2lCQyw2Q0FBNkMsQ0FBQ0YsR0FBRCxFQUFNRCxxQkFBTixDQUQ5RDtBQUdOLFNBQU9FLGNBQVA7QUFDRDs7QUFFRCxTQUFTQyw2Q0FBVCxDQUF1REYsR0FBdkQsRUFBNERELHFCQUE1RCxFQUFtRjtBQUNqRixNQUFNSSwwQkFBMEIsR0FBR0oscUJBQXFCLENBQUNLLFFBQXRCLEVBQW5DO0FBQUEsTUFDTUMsTUFBTSxHQUFHVixRQUFRLENBQUNXLGFBQVQsQ0FBdUJOLEdBQXZCLENBRGY7QUFBQSxNQUVNTyxLQUFLLEdBQUdWLFNBQVMsQ0FBQ1csZUFBVixDQUEwQkgsTUFBMUIsQ0FGZDtBQUlBbEIsRUFBQUEsSUFBSSxDQUFDb0IsS0FBRCxFQUFRSiwwQkFBUixDQUFKO0FBRUEsTUFBTUYsY0FBYyxHQUFHLElBQUlYLGNBQUosQ0FBbUJpQixLQUFuQixDQUF2QjtBQUVBLFNBQU9OLGNBQVA7QUFDRDs7QUFFRFEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2ZuQixFQUFBQSwyQkFBMkIsRUFBM0JBLDJCQURlO0FBRWZDLEVBQUFBLGdDQUFnQyxFQUFoQ0EsZ0NBRmU7QUFHZkMsRUFBQUEsaUNBQWlDLEVBQWpDQSxpQ0FIZTtBQUlmQyxFQUFBQSxvQ0FBb0MsRUFBcENBLG9DQUplO0FBS2ZJLEVBQUFBLHVDQUF1QyxFQUF2Q0EsdUNBTGU7QUFNZkksRUFBQUEsNkNBQTZDLEVBQTdDQTtBQU5lLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBsZXhlcnMgPSByZXF1aXJlKCdvY2NhbS1sZXhlcnMnKSxcbiAgICAgIHBhcnNlcnMgPSByZXF1aXJlKCdvY2NhbS1wYXJzZXJzJyksXG4gICAgICBuZWNlc3NhcnkgPSByZXF1aXJlKCduZWNlc3NhcnknKTtcblxuY29uc3QgeyBhcnJheVV0aWxpdGllcyB9ID0gbmVjZXNzYXJ5LFxuICAgICAgeyBwdXNoIH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgQk5GTGV4ZXIgfSA9IGxleGVycyxcbiAgICAgIHsgQk5GUGFyc2VyLCBGbG9yZW5jZVBhcnNlciB9ID0gcGFyc2VycyxcbiAgICAgIHsgdGVybURlZmF1bHRDdXN0b21HcmFtbWFyQk5GLCBzdGF0ZW1lbnREZWZhdWx0Q3VzdG9tR3JhbW1hckJORiwgZXhwcmVzc2lvbkRlZmF1bHRDdXN0b21HcmFtbWFyQk5GLCBtZXRhc3RhdGVtZW50RGVmYXVsdEN1c3RvbUdyYW1tYXJCTkYgfSA9IHBhcnNlcnM7XG5cbmNvbnN0IGJuZkxleGVyID0gQk5GTGV4ZXIuZnJvbU5vdGhpbmcoKSxcbiAgICAgIGJuZlBhcnNlciA9IEJORlBhcnNlci5mcm9tTm90aGluZygpO1xuXG5mdW5jdGlvbiBmbG9yZW5jZVBhcnNlckZyb21Db21iaW5lZEN1c3RvbUdyYW1tYXIoY29tYmluZWRDdXN0b21HcmFtbWFyKSB7XG4gIGNvbnN0IHsgYm5mIH0gPSBGbG9yZW5jZVBhcnNlcixcbiAgICAgICAgZmxvcmVuY2VQYXJzZXIgPSBmbG9yZW5jZVBhcnNlckZyb21CTkZBbmRDb21iaW5lZEN1c3RvbUdyYW1tYXIoYm5mLCBjb21iaW5lZEN1c3RvbUdyYW1tYXIpO1xuXG4gIHJldHVybiBmbG9yZW5jZVBhcnNlcjtcbn1cblxuZnVuY3Rpb24gZmxvcmVuY2VQYXJzZXJGcm9tQk5GQW5kQ29tYmluZWRDdXN0b21HcmFtbWFyKGJuZiwgY29tYmluZWRDdXN0b21HcmFtbWFyKSB7XG4gIGNvbnN0IGNvbWJpbmVkQ3VzdG9tR3JhbW1hclJ1bGVzID0gY29tYmluZWRDdXN0b21HcmFtbWFyLmdldFJ1bGVzKCksXG4gICAgICAgIHRva2VucyA9IGJuZkxleGVyLnRva2Vuc0Zyb21CTkYoYm5mKSxcbiAgICAgICAgcnVsZXMgPSBibmZQYXJzZXIucnVsZXNGcm9tVG9rZW5zKHRva2Vucyk7XG5cbiAgcHVzaChydWxlcywgY29tYmluZWRDdXN0b21HcmFtbWFyUnVsZXMpO1xuXG4gIGNvbnN0IGZsb3JlbmNlUGFyc2VyID0gbmV3IEZsb3JlbmNlUGFyc2VyKHJ1bGVzKTtcblxuICByZXR1cm4gZmxvcmVuY2VQYXJzZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB0ZXJtRGVmYXVsdEN1c3RvbUdyYW1tYXJCTkYsXG4gIHN0YXRlbWVudERlZmF1bHRDdXN0b21HcmFtbWFyQk5GLFxuICBleHByZXNzaW9uRGVmYXVsdEN1c3RvbUdyYW1tYXJCTkYsXG4gIG1ldGFzdGF0ZW1lbnREZWZhdWx0Q3VzdG9tR3JhbW1hckJORixcbiAgZmxvcmVuY2VQYXJzZXJGcm9tQ29tYmluZWRDdXN0b21HcmFtbWFyLFxuICBmbG9yZW5jZVBhcnNlckZyb21CTkZBbmRDb21iaW5lZEN1c3RvbUdyYW1tYXJcbn07XG4iXX0=