"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rulesFromBNF = rulesFromBNF;
exports.rulesAsString = rulesAsString;

var _occamParsers = require("occam-parsers");

function rulesFromBNF(bnf) {
  var basicParser = _occamParsers.BasicParser.fromBNF(bnf),
      ruleMap = basicParser.getRuleMap(),
      rules = Object.values(ruleMap); ///


  return rules;
}

function rulesAsString(rules, multiLine) {
  var maximumRuleNameLength = rules.reduce(function (maximumRuleNameLength, rule) {
    var ruleName = rule.getName(),
        ruleNameLength = ruleName.length;
    maximumRuleNameLength = Math.max(maximumRuleNameLength, ruleNameLength);
    return maximumRuleNameLength;
  }, 0),
      rulesString = rules.reduce(function (rulesString, rule) {
    var ruleString = rule.asString(maximumRuleNameLength, multiLine);
    rulesString += ruleString;
    return rulesString;
  }, "").replace(/^\n\n/, "");
  return rulesString;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bGVzLmpzIl0sIm5hbWVzIjpbInJ1bGVzRnJvbUJORiIsImJuZiIsImJhc2ljUGFyc2VyIiwiQmFzaWNQYXJzZXIiLCJmcm9tQk5GIiwicnVsZU1hcCIsImdldFJ1bGVNYXAiLCJydWxlcyIsIk9iamVjdCIsInZhbHVlcyIsInJ1bGVzQXNTdHJpbmciLCJtdWx0aUxpbmUiLCJtYXhpbXVtUnVsZU5hbWVMZW5ndGgiLCJyZWR1Y2UiLCJydWxlIiwicnVsZU5hbWUiLCJnZXROYW1lIiwicnVsZU5hbWVMZW5ndGgiLCJsZW5ndGgiLCJNYXRoIiwibWF4IiwicnVsZXNTdHJpbmciLCJydWxlU3RyaW5nIiwiYXNTdHJpbmciLCJyZXBsYWNlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFFQTs7QUFFTyxTQUFTQSxZQUFULENBQXNCQyxHQUF0QixFQUEyQjtBQUNoQyxNQUFNQyxXQUFXLEdBQUdDLDBCQUFZQyxPQUFaLENBQW9CSCxHQUFwQixDQUFwQjtBQUFBLE1BQ01JLE9BQU8sR0FBR0gsV0FBVyxDQUFDSSxVQUFaLEVBRGhCO0FBQUEsTUFFTUMsS0FBSyxHQUFHQyxNQUFNLENBQUNDLE1BQVAsQ0FBY0osT0FBZCxDQUZkLENBRGdDLENBR007OztBQUV0QyxTQUFPRSxLQUFQO0FBQ0Q7O0FBRU0sU0FBU0csYUFBVCxDQUF1QkgsS0FBdkIsRUFBOEJJLFNBQTlCLEVBQXlDO0FBQzlDLE1BQU1DLHFCQUFxQixHQUFHTCxLQUFLLENBQUNNLE1BQU4sQ0FBYSxVQUFDRCxxQkFBRCxFQUF3QkUsSUFBeEIsRUFBaUM7QUFDcEUsUUFBTUMsUUFBUSxHQUFHRCxJQUFJLENBQUNFLE9BQUwsRUFBakI7QUFBQSxRQUNNQyxjQUFjLEdBQUdGLFFBQVEsQ0FBQ0csTUFEaEM7QUFHQU4sSUFBQUEscUJBQXFCLEdBQUdPLElBQUksQ0FBQ0MsR0FBTCxDQUFTUixxQkFBVCxFQUFnQ0ssY0FBaEMsQ0FBeEI7QUFFQSxXQUFPTCxxQkFBUDtBQUNELEdBUHVCLEVBT3JCLENBUHFCLENBQTlCO0FBQUEsTUFRTVMsV0FBVyxHQUFHZCxLQUFLLENBQUNNLE1BQU4sQ0FBYSxVQUFDUSxXQUFELEVBQWNQLElBQWQsRUFBdUI7QUFDaEQsUUFBTVEsVUFBVSxHQUFHUixJQUFJLENBQUNTLFFBQUwsQ0FBY1gscUJBQWQsRUFBcUNELFNBQXJDLENBQW5CO0FBRUFVLElBQUFBLFdBQVcsSUFBSUMsVUFBZjtBQUVBLFdBQU9ELFdBQVA7QUFDRCxHQU5hLEVBTVgsRUFOVyxFQU1QRyxPQU5PLENBTUMsT0FORCxFQU1VLEVBTlYsQ0FScEI7QUFnQkEsU0FBT0gsV0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IEJhc2ljUGFyc2VyIH0gZnJvbSBcIm9jY2FtLXBhcnNlcnNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVzRnJvbUJORihibmYpIHtcbiAgY29uc3QgYmFzaWNQYXJzZXIgPSBCYXNpY1BhcnNlci5mcm9tQk5GKGJuZiksXG4gICAgICAgIHJ1bGVNYXAgPSBiYXNpY1BhcnNlci5nZXRSdWxlTWFwKCksXG4gICAgICAgIHJ1bGVzID0gT2JqZWN0LnZhbHVlcyhydWxlTWFwKTsgLy8vXG5cbiAgcmV0dXJuIHJ1bGVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcnVsZXNBc1N0cmluZyhydWxlcywgbXVsdGlMaW5lKSB7XG4gIGNvbnN0IG1heGltdW1SdWxlTmFtZUxlbmd0aCA9IHJ1bGVzLnJlZHVjZSgobWF4aW11bVJ1bGVOYW1lTGVuZ3RoLCBydWxlKSA9PiB7XG4gICAgICAgICAgY29uc3QgcnVsZU5hbWUgPSBydWxlLmdldE5hbWUoKSxcbiAgICAgICAgICAgICAgICBydWxlTmFtZUxlbmd0aCA9IHJ1bGVOYW1lLmxlbmd0aDtcblxuICAgICAgICAgIG1heGltdW1SdWxlTmFtZUxlbmd0aCA9IE1hdGgubWF4KG1heGltdW1SdWxlTmFtZUxlbmd0aCwgcnVsZU5hbWVMZW5ndGgpO1xuXG4gICAgICAgICAgcmV0dXJuIG1heGltdW1SdWxlTmFtZUxlbmd0aDtcbiAgICAgICAgfSwgMCksXG4gICAgICAgIHJ1bGVzU3RyaW5nID0gcnVsZXMucmVkdWNlKChydWxlc1N0cmluZywgcnVsZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJ1bGVTdHJpbmcgPSBydWxlLmFzU3RyaW5nKG1heGltdW1SdWxlTmFtZUxlbmd0aCwgbXVsdGlMaW5lKTtcblxuICAgICAgICAgIHJ1bGVzU3RyaW5nICs9IHJ1bGVTdHJpbmc7XG5cbiAgICAgICAgICByZXR1cm4gcnVsZXNTdHJpbmc7XG4gICAgICAgIH0sIFwiXCIpLnJlcGxhY2UoL15cXG5cXG4vLCBcIlwiKTtcblxuICByZXR1cm4gcnVsZXNTdHJpbmc7XG59XG4iXX0=