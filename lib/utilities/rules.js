"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.rulesFromBNF = rulesFromBNF;
exports.rulesAsString = rulesAsString;
exports.ruleMapFromRules = ruleMapFromRules;
var _occamParsers = require("occam-parsers");
var _constants = require("../constants");
function rulesFromBNF(bnf) {
    var basicParser = _occamParsers.BasicParser.fromBNF(bnf), ruleMap = basicParser.getRuleMap(), rules = Object.values(ruleMap); ///
    return rules;
}
function rulesAsString(rules, multiLine) {
    var maximumRuleNameLength1 = rules.reduce(function(maximumRuleNameLength, rule) {
        var ruleName = rule.getName(), ruleNameLength = ruleName.length;
        maximumRuleNameLength = Math.max(maximumRuleNameLength, ruleNameLength);
        return maximumRuleNameLength;
    }, 0), rulesString1 = rules.reduce(function(rulesString, rule) {
        var ruleString = rule.asString(maximumRuleNameLength1, multiLine);
        rulesString += ruleString;
        return rulesString;
    }, _constants.EMPTY_STRING).replace(/^\n\n/, _constants.EMPTY_STRING);
    return rulesString1;
}
function ruleMapFromRules(rules) {
    var ruleMap1 = rules.reduce(function(ruleMap, rule) {
        var ruleName = rule.getName();
        ruleMap[ruleName] = rule;
        return ruleMap;
    }, {});
    return ruleMap1;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcnVsZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IEJhc2ljUGFyc2VyIH0gZnJvbSBcIm9jY2FtLXBhcnNlcnNcIjtcblxuaW1wb3J0IHsgRU1QVFlfU1RSSU5HIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gcnVsZXNGcm9tQk5GKGJuZikge1xuICBjb25zdCBiYXNpY1BhcnNlciA9IEJhc2ljUGFyc2VyLmZyb21CTkYoYm5mKSxcbiAgICAgICAgcnVsZU1hcCA9IGJhc2ljUGFyc2VyLmdldFJ1bGVNYXAoKSxcbiAgICAgICAgcnVsZXMgPSBPYmplY3QudmFsdWVzKHJ1bGVNYXApOyAvLy9cblxuICByZXR1cm4gcnVsZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBydWxlc0FzU3RyaW5nKHJ1bGVzLCBtdWx0aUxpbmUpIHtcbiAgY29uc3QgbWF4aW11bVJ1bGVOYW1lTGVuZ3RoID0gcnVsZXMucmVkdWNlKChtYXhpbXVtUnVsZU5hbWVMZW5ndGgsIHJ1bGUpID0+IHtcbiAgICAgICAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpLFxuICAgICAgICAgICAgICAgIHJ1bGVOYW1lTGVuZ3RoID0gcnVsZU5hbWUubGVuZ3RoO1xuXG4gICAgICAgICAgbWF4aW11bVJ1bGVOYW1lTGVuZ3RoID0gTWF0aC5tYXgobWF4aW11bVJ1bGVOYW1lTGVuZ3RoLCBydWxlTmFtZUxlbmd0aCk7XG5cbiAgICAgICAgICByZXR1cm4gbWF4aW11bVJ1bGVOYW1lTGVuZ3RoO1xuICAgICAgICB9LCAwKSxcbiAgICAgICAgcnVsZXNTdHJpbmcgPSBydWxlcy5yZWR1Y2UoKHJ1bGVzU3RyaW5nLCBydWxlKSA9PiB7XG4gICAgICAgICAgY29uc3QgcnVsZVN0cmluZyA9IHJ1bGUuYXNTdHJpbmcobWF4aW11bVJ1bGVOYW1lTGVuZ3RoLCBtdWx0aUxpbmUpO1xuXG4gICAgICAgICAgcnVsZXNTdHJpbmcgKz0gcnVsZVN0cmluZztcblxuICAgICAgICAgIHJldHVybiBydWxlc1N0cmluZztcbiAgICAgICAgfSwgRU1QVFlfU1RSSU5HKS5yZXBsYWNlKC9eXFxuXFxuLywgRU1QVFlfU1RSSU5HKTtcblxuICByZXR1cm4gcnVsZXNTdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBydWxlTWFwRnJvbVJ1bGVzKHJ1bGVzKSB7XG4gIGNvbnN0IHJ1bGVNYXAgPSBydWxlcy5yZWR1Y2UoKHJ1bGVNYXAsIHJ1bGUpID0+IHtcbiAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpO1xuXG4gICAgcnVsZU1hcFtydWxlTmFtZV0gPSBydWxlO1xuXG4gICAgcmV0dXJuIHJ1bGVNYXA7XG4gIH0sIHt9KTtcblxuICByZXR1cm4gcnVsZU1hcDtcbn1cbiJdLCJuYW1lcyI6WyJydWxlc0Zyb21CTkYiLCJydWxlc0FzU3RyaW5nIiwicnVsZU1hcEZyb21SdWxlcyIsImJuZiIsImJhc2ljUGFyc2VyIiwiQmFzaWNQYXJzZXIiLCJmcm9tQk5GIiwicnVsZU1hcCIsImdldFJ1bGVNYXAiLCJydWxlcyIsIk9iamVjdCIsInZhbHVlcyIsIm11bHRpTGluZSIsIm1heGltdW1SdWxlTmFtZUxlbmd0aCIsInJlZHVjZSIsInJ1bGUiLCJydWxlTmFtZSIsImdldE5hbWUiLCJydWxlTmFtZUxlbmd0aCIsImxlbmd0aCIsIk1hdGgiLCJtYXgiLCJydWxlc1N0cmluZyIsInJ1bGVTdHJpbmciLCJhc1N0cmluZyIsIkVNUFRZX1NUUklORyIsInJlcGxhY2UiXSwibWFwcGluZ3MiOiJBQUFBLENBQVksV0FBQSxDQUFDOzs7RTtRQU1HQSxZQUFZLEdBQVpBLFlBQVksQTtRQVFaQyxhQUFhLEdBQWJBLGFBQWEsQTtRQW9CYkMsZ0JBQWdCLEdBQWhCQSxnQkFBZ0IsQTtBQWhDSixHQUFlLENBQWYsYUFBZTtBQUVkLEdBQWMsQ0FBZCxVQUFjO1NBRTNCRixZQUFZLENBQUNHLEdBQUcsRUFBRSxDQUFDO0lBQ2pDLEdBQUssQ0FBQ0MsV0FBVyxHQUFHQyxhQUFXLGFBQUNDLE9BQU8sQ0FBQ0gsR0FBRyxHQUNyQ0ksT0FBTyxHQUFHSCxXQUFXLENBQUNJLFVBQVUsSUFDaENDLEtBQUssR0FBR0MsTUFBTSxDQUFDQyxNQUFNLENBQUNKLE9BQU8sR0FBRyxFQUFHLEFBQUgsQ0FBRztJQUV6QyxNQUFNLENBQUNFLEtBQUs7QUFDZCxDQUFDO1NBRWVSLGFBQWEsQ0FBQ1EsS0FBSyxFQUFFRyxTQUFTLEVBQUUsQ0FBQztJQUMvQyxHQUFLLENBQUNDLHNCQUFxQixHQUFHSixLQUFLLENBQUNLLE1BQU0sQ0FBQyxRQUFRLENBQVBELHFCQUFxQixFQUFFRSxJQUFJLEVBQUssQ0FBQztRQUNyRSxHQUFLLENBQUNDLFFBQVEsR0FBR0QsSUFBSSxDQUFDRSxPQUFPLElBQ3ZCQyxjQUFjLEdBQUdGLFFBQVEsQ0FBQ0csTUFBTTtRQUV0Q04scUJBQXFCLEdBQUdPLElBQUksQ0FBQ0MsR0FBRyxDQUFDUixxQkFBcUIsRUFBRUssY0FBYyxDQUFDLENBQUM7UUFFeEUsTUFBTSxDQUFDTCxxQkFBcUI7SUFDOUIsQ0FBQyxFQUFFLENBQUMsR0FDSlMsWUFBVyxHQUFHYixLQUFLLENBQUNLLE1BQU0sQ0FBQyxRQUFRLENBQVBRLFdBQVcsRUFBRVAsSUFBSSxFQUFLLENBQUM7UUFDakQsR0FBSyxDQUFDUSxVQUFVLEdBQUdSLElBQUksQ0FBQ1MsUUFBUSxDQUFDWCxzQkFBcUIsRUFBRUQsU0FBUztRQUVqRVUsV0FBVyxJQUFJQyxVQUFVLENBQUM7UUFFMUIsTUFBTSxDQUFDRCxXQUFXO0lBQ3BCLENBQUMsRUFBRUcsVUFBWSxlQUFFQyxPQUFPLFVBQVVELFVBQVk7SUFFcEQsTUFBTSxDQUFDSCxZQUFXO0FBQ3BCLENBQUM7U0FFZXBCLGdCQUFnQixDQUFDTyxLQUFLLEVBQUUsQ0FBQztJQUN2QyxHQUFLLENBQUNGLFFBQU8sR0FBR0UsS0FBSyxDQUFDSyxNQUFNLENBQUMsUUFBUSxDQUFQUCxPQUFPLEVBQUVRLElBQUksRUFBSyxDQUFDO1FBQy9DLEdBQUssQ0FBQ0MsUUFBUSxHQUFHRCxJQUFJLENBQUNFLE9BQU87UUFFN0JWLE9BQU8sQ0FBQ1MsUUFBUSxJQUFJRCxJQUFJLENBQUM7UUFFekIsTUFBTSxDQUFDUixPQUFPO0lBQ2hCLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFTCxNQUFNLENBQUNBLFFBQU87QUFDaEIsQ0FBQyJ9