"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.rulesFromParser = rulesFromParser;
exports.rulesAsString = rulesAsString;
var _necessary = require("necessary");
var _constants = require("../constants");
var filter = _necessary.arrayUtilities.filter;
function rulesFromParser(parser) {
    var ruleMap = parser.getRuleMap(), startRule = parser.getStartRule(), startRuleName = startRule.getName(), ruleMapValues = Object.values(ruleMap), rules = ruleMapValues; ///
    filter(rules, function(rule) {
        var ruleName = rule.getName();
        if (ruleName !== startRuleName) {
            return true;
        }
    });
    rules.unshift(startRule);
    return rules;
}
function rulesAsString(rules, multiLine) {
    var maximumRuleNameLength1 = rules.reduce(function(maximumRuleNameLength, rule) {
        var ruleName = rule.getName(), ruleNameLength = ruleName.length;
        maximumRuleNameLength = Math.max(maximumRuleNameLength, ruleNameLength);
        return maximumRuleNameLength;
    }, 0), rulesString1 = rules.reduce(function(rulesString, rule) {
        var ruleString = rule.asString(maximumRuleNameLength1, multiLine);
        rulesString += ruleString;
        return rulesString;
    }, _constants.EMPTY_STRING).replace(/^\n\n/, _constants.EMPTY_STRING);
    return rulesString1;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcnVsZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5pbXBvcnQgeyBFTVBUWV9TVFJJTkcgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5cbmNvbnN0IHsgZmlsdGVyIH0gPSBhcnJheVV0aWxpdGllcztcblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVzRnJvbVBhcnNlcihwYXJzZXIpIHtcbiAgY29uc3QgcnVsZU1hcCA9IHBhcnNlci5nZXRSdWxlTWFwKCksXG4gICAgICAgIHN0YXJ0UnVsZSA9IHBhcnNlci5nZXRTdGFydFJ1bGUoKSxcbiAgICAgICAgc3RhcnRSdWxlTmFtZSA9IHN0YXJ0UnVsZS5nZXROYW1lKCksXG4gICAgICAgIHJ1bGVNYXBWYWx1ZXMgPSBPYmplY3QudmFsdWVzKHJ1bGVNYXApLFxuICAgICAgICBydWxlcyA9IHJ1bGVNYXBWYWx1ZXM7ICAvLy9cblxuICBmaWx0ZXIocnVsZXMsIChydWxlKSA9PiB7XG4gICAgY29uc3QgcnVsZU5hbWUgPSBydWxlLmdldE5hbWUoKTtcblxuICAgIGlmIChydWxlTmFtZSAhPT0gc3RhcnRSdWxlTmFtZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICBydWxlcy51bnNoaWZ0KHN0YXJ0UnVsZSk7XG5cbiAgcmV0dXJuIHJ1bGVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcnVsZXNBc1N0cmluZyhydWxlcywgbXVsdGlMaW5lKSB7XG4gIGNvbnN0IG1heGltdW1SdWxlTmFtZUxlbmd0aCA9IHJ1bGVzLnJlZHVjZSgobWF4aW11bVJ1bGVOYW1lTGVuZ3RoLCBydWxlKSA9PiB7XG4gICAgICAgICAgY29uc3QgcnVsZU5hbWUgPSBydWxlLmdldE5hbWUoKSxcbiAgICAgICAgICAgICAgICBydWxlTmFtZUxlbmd0aCA9IHJ1bGVOYW1lLmxlbmd0aDtcblxuICAgICAgICAgIG1heGltdW1SdWxlTmFtZUxlbmd0aCA9IE1hdGgubWF4KG1heGltdW1SdWxlTmFtZUxlbmd0aCwgcnVsZU5hbWVMZW5ndGgpO1xuXG4gICAgICAgICAgcmV0dXJuIG1heGltdW1SdWxlTmFtZUxlbmd0aDtcbiAgICAgICAgfSwgMCksXG4gICAgICAgIHJ1bGVzU3RyaW5nID0gcnVsZXMucmVkdWNlKChydWxlc1N0cmluZywgcnVsZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJ1bGVTdHJpbmcgPSBydWxlLmFzU3RyaW5nKG1heGltdW1SdWxlTmFtZUxlbmd0aCwgbXVsdGlMaW5lKTtcblxuICAgICAgICAgIHJ1bGVzU3RyaW5nICs9IHJ1bGVTdHJpbmc7XG5cbiAgICAgICAgICByZXR1cm4gcnVsZXNTdHJpbmc7XG4gICAgICAgIH0sIEVNUFRZX1NUUklORykucmVwbGFjZSgvXlxcblxcbi8sIEVNUFRZX1NUUklORyk7XG5cbiAgcmV0dXJuIHJ1bGVzU3RyaW5nO1xufVxuIl0sIm5hbWVzIjpbInJ1bGVzRnJvbVBhcnNlciIsInJ1bGVzQXNTdHJpbmciLCJmaWx0ZXIiLCJhcnJheVV0aWxpdGllcyIsInBhcnNlciIsInJ1bGVNYXAiLCJnZXRSdWxlTWFwIiwic3RhcnRSdWxlIiwiZ2V0U3RhcnRSdWxlIiwic3RhcnRSdWxlTmFtZSIsImdldE5hbWUiLCJydWxlTWFwVmFsdWVzIiwiT2JqZWN0IiwidmFsdWVzIiwicnVsZXMiLCJydWxlIiwicnVsZU5hbWUiLCJ1bnNoaWZ0IiwibXVsdGlMaW5lIiwibWF4aW11bVJ1bGVOYW1lTGVuZ3RoIiwicmVkdWNlIiwicnVsZU5hbWVMZW5ndGgiLCJsZW5ndGgiLCJNYXRoIiwibWF4IiwicnVsZXNTdHJpbmciLCJydWxlU3RyaW5nIiwiYXNTdHJpbmciLCJFTVBUWV9TVFJJTkciLCJyZXBsYWNlIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7UUFRR0EsZUFBZSxHQUFmQSxlQUFlO1FBb0JmQyxhQUFhLEdBQWJBLGFBQWE7QUExQkUsSUFBQSxVQUFXLFdBQVgsV0FBVyxDQUFBO0FBRWIsSUFBQSxVQUFjLFdBQWQsY0FBYyxDQUFBO0FBRTNDLElBQU0sQUFBRUMsTUFBTSxHQUFLQyxVQUFjLGVBQUEsQ0FBekJELE1BQU0sQUFBbUIsQUFBQztBQUUzQixTQUFTRixlQUFlLENBQUNJLE1BQU0sRUFBRTtJQUN0QyxJQUFNQyxPQUFPLEdBQUdELE1BQU0sQ0FBQ0UsVUFBVSxFQUFFLEVBQzdCQyxTQUFTLEdBQUdILE1BQU0sQ0FBQ0ksWUFBWSxFQUFFLEVBQ2pDQyxhQUFhLEdBQUdGLFNBQVMsQ0FBQ0csT0FBTyxFQUFFLEVBQ25DQyxhQUFhLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDUixPQUFPLENBQUMsRUFDdENTLEtBQUssR0FBR0gsYUFBYSxBQUFDLEVBQUUsR0FBRztJQUVqQ1QsTUFBTSxDQUFDWSxLQUFLLEVBQUUsU0FBQ0MsSUFBSSxFQUFLO1FBQ3RCLElBQU1DLFFBQVEsR0FBR0QsSUFBSSxDQUFDTCxPQUFPLEVBQUUsQUFBQztRQUVoQyxJQUFJTSxRQUFRLEtBQUtQLGFBQWEsRUFBRTtZQUM5QixPQUFPLElBQUksQ0FBQztTQUNiO0tBQ0YsQ0FBQyxDQUFDO0lBRUhLLEtBQUssQ0FBQ0csT0FBTyxDQUFDVixTQUFTLENBQUMsQ0FBQztJQUV6QixPQUFPTyxLQUFLLENBQUM7Q0FDZDtBQUVNLFNBQVNiLGFBQWEsQ0FBQ2EsS0FBSyxFQUFFSSxTQUFTLEVBQUU7SUFDOUMsSUFBTUMsc0JBQXFCLEdBQUdMLEtBQUssQ0FBQ00sTUFBTSxDQUFDLFNBQUNELHFCQUFxQixFQUFFSixJQUFJLEVBQUs7UUFDcEUsSUFBTUMsUUFBUSxHQUFHRCxJQUFJLENBQUNMLE9BQU8sRUFBRSxFQUN6QlcsY0FBYyxHQUFHTCxRQUFRLENBQUNNLE1BQU0sQUFBQztRQUV2Q0gscUJBQXFCLEdBQUdJLElBQUksQ0FBQ0MsR0FBRyxDQUFDTCxxQkFBcUIsRUFBRUUsY0FBYyxDQUFDLENBQUM7UUFFeEUsT0FBT0YscUJBQXFCLENBQUM7S0FDOUIsRUFBRSxDQUFDLENBQUMsRUFDTE0sWUFBVyxHQUFHWCxLQUFLLENBQUNNLE1BQU0sQ0FBQyxTQUFDSyxXQUFXLEVBQUVWLElBQUksRUFBSztRQUNoRCxJQUFNVyxVQUFVLEdBQUdYLElBQUksQ0FBQ1ksUUFBUSxDQUFDUixzQkFBcUIsRUFBRUQsU0FBUyxDQUFDLEFBQUM7UUFFbkVPLFdBQVcsSUFBSUMsVUFBVSxDQUFDO1FBRTFCLE9BQU9ELFdBQVcsQ0FBQztLQUNwQixFQUFFRyxVQUFZLGFBQUEsQ0FBQyxDQUFDQyxPQUFPLFVBQVVELFVBQVksYUFBQSxDQUFDLEFBQUM7SUFFdEQsT0FBT0gsWUFBVyxDQUFDO0NBQ3BCIn0=