'use strict';

var lexers = require('occam-lexers'),
    ///
parsers = require('occam-parsers'); ///

var BNFLexer = lexers.BNFLexer,
    Rule = parsers.Rule,
    BNFParser = parsers.BNFParser;


var bnfLexer = BNFLexer.fromNothing(),
    bnfParser = BNFParser.fromNothing();

function rulesFromBNF(bnf) {
  var content = bnf,
      ///
  tokens = bnfLexer.tokenise(content),
      node = bnfParser.parse(tokens),
      rules = node !== null ? node.generateRules(Rule) : [];

  return rules;
}

function rulesAsString(rules) {
  var maximumRuleNameLength = rules.reduce(function (maximumRuleNameLength, rule) {
    var ruleName = rule.getName(),
        ruleNameLength = ruleName.length;

    maximumRuleNameLength = Math.max(maximumRuleNameLength, ruleNameLength);

    return maximumRuleNameLength;
  }, 0),
      rulesString = rules.reduce(function (rulesString, rule) {
    var ruleString = rule.asString(maximumRuleNameLength);

    rulesString += ruleString;

    return rulesString;
  }, '');

  return rulesString;
}

function rulesAsEntries(rules) {
  var entries = rules.map(function (rule) {
    var entry = rule.asEntry();

    return entry;
  });

  return entries;
}

module.exports = {
  rulesFromBNF: rulesFromBNF,
  rulesAsString: rulesAsString,
  rulesAsEntries: rulesAsEntries
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcnVsZXMuanMiXSwibmFtZXMiOlsibGV4ZXJzIiwicmVxdWlyZSIsInBhcnNlcnMiLCJCTkZMZXhlciIsIlJ1bGUiLCJCTkZQYXJzZXIiLCJibmZMZXhlciIsImZyb21Ob3RoaW5nIiwiYm5mUGFyc2VyIiwicnVsZXNGcm9tQk5GIiwiYm5mIiwiY29udGVudCIsInRva2VucyIsInRva2VuaXNlIiwibm9kZSIsInBhcnNlIiwicnVsZXMiLCJnZW5lcmF0ZVJ1bGVzIiwicnVsZXNBc1N0cmluZyIsIm1heGltdW1SdWxlTmFtZUxlbmd0aCIsInJlZHVjZSIsInJ1bGUiLCJydWxlTmFtZSIsImdldE5hbWUiLCJydWxlTmFtZUxlbmd0aCIsImxlbmd0aCIsIk1hdGgiLCJtYXgiLCJydWxlc1N0cmluZyIsInJ1bGVTdHJpbmciLCJhc1N0cmluZyIsInJ1bGVzQXNFbnRyaWVzIiwiZW50cmllcyIsIm1hcCIsImVudHJ5IiwiYXNFbnRyeSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFNBQVNDLFFBQVEsY0FBUixDQUFmO0FBQUEsSUFBd0M7QUFDbENDLFVBQVVELFFBQVEsZUFBUixDQURoQixDLENBQzBDOztBQUVwQyxJQUFFRSxRQUFGLEdBQWVILE1BQWYsQ0FBRUcsUUFBRjtBQUFBLElBQ0VDLElBREYsR0FDc0JGLE9BRHRCLENBQ0VFLElBREY7QUFBQSxJQUNRQyxTQURSLEdBQ3NCSCxPQUR0QixDQUNRRyxTQURSOzs7QUFHTixJQUFNQyxXQUFXSCxTQUFTSSxXQUFULEVBQWpCO0FBQUEsSUFDTUMsWUFBWUgsVUFBVUUsV0FBVixFQURsQjs7QUFHQSxTQUFTRSxZQUFULENBQXNCQyxHQUF0QixFQUEyQjtBQUN6QixNQUFNQyxVQUFVRCxHQUFoQjtBQUFBLE1BQXNCO0FBQ2hCRSxXQUFTTixTQUFTTyxRQUFULENBQWtCRixPQUFsQixDQURmO0FBQUEsTUFFTUcsT0FBT04sVUFBVU8sS0FBVixDQUFnQkgsTUFBaEIsQ0FGYjtBQUFBLE1BR01JLFFBQVNGLFNBQVMsSUFBVixHQUNFQSxLQUFLRyxhQUFMLENBQW1CYixJQUFuQixDQURGLEdBRUksRUFMbEI7O0FBT0EsU0FBT1ksS0FBUDtBQUNEOztBQUVELFNBQVNFLGFBQVQsQ0FBdUJGLEtBQXZCLEVBQThCO0FBQzVCLE1BQU1HLHdCQUF3QkgsTUFBTUksTUFBTixDQUFhLFVBQVNELHFCQUFULEVBQWdDRSxJQUFoQyxFQUFzQztBQUN6RSxRQUFNQyxXQUFXRCxLQUFLRSxPQUFMLEVBQWpCO0FBQUEsUUFDTUMsaUJBQWlCRixTQUFTRyxNQURoQzs7QUFHQU4sNEJBQXdCTyxLQUFLQyxHQUFMLENBQVNSLHFCQUFULEVBQWdDSyxjQUFoQyxDQUF4Qjs7QUFFQSxXQUFPTCxxQkFBUDtBQUNELEdBUHVCLEVBT3JCLENBUHFCLENBQTlCO0FBQUEsTUFRTVMsY0FBY1osTUFBTUksTUFBTixDQUFhLFVBQVNRLFdBQVQsRUFBc0JQLElBQXRCLEVBQTRCO0FBQ3JELFFBQU1RLGFBQWFSLEtBQUtTLFFBQUwsQ0FBY1gscUJBQWQsQ0FBbkI7O0FBRUFTLG1CQUFlQyxVQUFmOztBQUVBLFdBQU9ELFdBQVA7QUFDRCxHQU5hLEVBTVgsRUFOVyxDQVJwQjs7QUFnQkEsU0FBT0EsV0FBUDtBQUNEOztBQUVELFNBQVNHLGNBQVQsQ0FBd0JmLEtBQXhCLEVBQStCO0FBQzdCLE1BQU1nQixVQUFVaEIsTUFBTWlCLEdBQU4sQ0FBVSxVQUFTWixJQUFULEVBQWU7QUFDdkMsUUFBTWEsUUFBUWIsS0FBS2MsT0FBTCxFQUFkOztBQUVBLFdBQU9ELEtBQVA7QUFDRCxHQUplLENBQWhCOztBQU1BLFNBQU9GLE9BQVA7QUFDRDs7QUFFREksT0FBT0MsT0FBUCxHQUFpQjtBQUNmNUIsNEJBRGU7QUFFZlMsOEJBRmU7QUFHZmE7QUFIZSxDQUFqQiIsImZpbGUiOiJydWxlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbGV4ZXJzID0gcmVxdWlyZSgnb2NjYW0tbGV4ZXJzJyksIC8vL1xuICAgICAgcGFyc2VycyA9IHJlcXVpcmUoJ29jY2FtLXBhcnNlcnMnKTsgLy8vXG5cbmNvbnN0IHsgQk5GTGV4ZXIgfSA9IGxleGVycyxcbiAgICAgIHsgUnVsZSwgQk5GUGFyc2VyIH0gPSBwYXJzZXJzO1xuXG5jb25zdCBibmZMZXhlciA9IEJORkxleGVyLmZyb21Ob3RoaW5nKCksXG4gICAgICBibmZQYXJzZXIgPSBCTkZQYXJzZXIuZnJvbU5vdGhpbmcoKTtcblxuZnVuY3Rpb24gcnVsZXNGcm9tQk5GKGJuZikge1xuICBjb25zdCBjb250ZW50ID0gYm5mLCAgLy8vXG4gICAgICAgIHRva2VucyA9IGJuZkxleGVyLnRva2VuaXNlKGNvbnRlbnQpLFxuICAgICAgICBub2RlID0gYm5mUGFyc2VyLnBhcnNlKHRva2VucyksXG4gICAgICAgIHJ1bGVzID0gKG5vZGUgIT09IG51bGwpID9cbiAgICAgICAgICAgICAgICAgIG5vZGUuZ2VuZXJhdGVSdWxlcyhSdWxlKSA6XG4gICAgICAgICAgICAgICAgICAgIFtdO1xuXG4gIHJldHVybiBydWxlcztcbn1cblxuZnVuY3Rpb24gcnVsZXNBc1N0cmluZyhydWxlcykge1xuICBjb25zdCBtYXhpbXVtUnVsZU5hbWVMZW5ndGggPSBydWxlcy5yZWR1Y2UoZnVuY3Rpb24obWF4aW11bVJ1bGVOYW1lTGVuZ3RoLCBydWxlKSB7XG4gICAgICAgICAgY29uc3QgcnVsZU5hbWUgPSBydWxlLmdldE5hbWUoKSxcbiAgICAgICAgICAgICAgICBydWxlTmFtZUxlbmd0aCA9IHJ1bGVOYW1lLmxlbmd0aDtcblxuICAgICAgICAgIG1heGltdW1SdWxlTmFtZUxlbmd0aCA9IE1hdGgubWF4KG1heGltdW1SdWxlTmFtZUxlbmd0aCwgcnVsZU5hbWVMZW5ndGgpO1xuXG4gICAgICAgICAgcmV0dXJuIG1heGltdW1SdWxlTmFtZUxlbmd0aDtcbiAgICAgICAgfSwgMCksXG4gICAgICAgIHJ1bGVzU3RyaW5nID0gcnVsZXMucmVkdWNlKGZ1bmN0aW9uKHJ1bGVzU3RyaW5nLCBydWxlKSB7XG4gICAgICAgICAgY29uc3QgcnVsZVN0cmluZyA9IHJ1bGUuYXNTdHJpbmcobWF4aW11bVJ1bGVOYW1lTGVuZ3RoKTtcblxuICAgICAgICAgIHJ1bGVzU3RyaW5nICs9IHJ1bGVTdHJpbmc7XG5cbiAgICAgICAgICByZXR1cm4gcnVsZXNTdHJpbmc7XG4gICAgICAgIH0sICcnKTtcblxuICByZXR1cm4gcnVsZXNTdHJpbmc7XG59XG5cbmZ1bmN0aW9uIHJ1bGVzQXNFbnRyaWVzKHJ1bGVzKSB7XG4gIGNvbnN0IGVudHJpZXMgPSBydWxlcy5tYXAoZnVuY3Rpb24ocnVsZSkge1xuICAgIGNvbnN0IGVudHJ5ID0gcnVsZS5hc0VudHJ5KCk7XG5cbiAgICByZXR1cm4gZW50cnk7XG4gIH0pO1xuXG4gIHJldHVybiBlbnRyaWVzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcnVsZXNGcm9tQk5GLFxuICBydWxlc0FzU3RyaW5nLFxuICBydWxlc0FzRW50cmllc1xufTtcbiJdfQ==