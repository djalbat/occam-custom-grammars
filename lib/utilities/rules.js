'use strict';

var parsers = require('occam-parsers'); ///

var BasicParser = parsers.BasicParser;


function rulesFromBNF(bnf) {
  var basicParser = BasicParser.fromBNF(bnf),
      rules = basicParser.getRules();

  return rules;
}

function rulesAsString(rules, multiLine) {
  var maximumRuleNameLength = rules.reduce(function (maximumRuleNameLength, rule) {
    var ruleName = rule.getName(),
        ruleNameLength = ruleName.length;

    maximumRuleNameLength = Math.max(maximumRuleNameLength, ruleNameLength);

    return maximumRuleNameLength;
  }, 0),
      rulesString = rules.reduce(function (rulesString, rule) {
    var ruleString = rule.asString(maximumRuleNameLength, multiLine);

    rulesString += ruleString;

    return rulesString;
  }, '').replace(/^\n\n/, '');

  return rulesString;
}

function rulesAsEntries(rules) {
  var entries = rules.map(function (rule) {
    var entry = rule.asEntry();

    return entry;
  });

  return entries;
}

module.exports = {
  rulesFromBNF: rulesFromBNF,
  rulesAsString: rulesAsString,
  rulesAsEntries: rulesAsEntries
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcnVsZXMuanMiXSwibmFtZXMiOlsicGFyc2VycyIsInJlcXVpcmUiLCJCYXNpY1BhcnNlciIsInJ1bGVzRnJvbUJORiIsImJuZiIsImJhc2ljUGFyc2VyIiwiZnJvbUJORiIsInJ1bGVzIiwiZ2V0UnVsZXMiLCJydWxlc0FzU3RyaW5nIiwibXVsdGlMaW5lIiwibWF4aW11bVJ1bGVOYW1lTGVuZ3RoIiwicmVkdWNlIiwicnVsZSIsInJ1bGVOYW1lIiwiZ2V0TmFtZSIsInJ1bGVOYW1lTGVuZ3RoIiwibGVuZ3RoIiwiTWF0aCIsIm1heCIsInJ1bGVzU3RyaW5nIiwicnVsZVN0cmluZyIsImFzU3RyaW5nIiwicmVwbGFjZSIsInJ1bGVzQXNFbnRyaWVzIiwiZW50cmllcyIsIm1hcCIsImVudHJ5IiwiYXNFbnRyeSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFVBQVVDLFFBQVEsZUFBUixDQUFoQixDLENBQTBDOztJQUVsQ0MsVyxHQUFnQkYsTyxDQUFoQkUsVzs7O0FBRVIsU0FBU0MsWUFBVCxDQUFzQkMsR0FBdEIsRUFBMkI7QUFDM0IsTUFBTUMsY0FBY0gsWUFBWUksT0FBWixDQUFvQkYsR0FBcEIsQ0FBcEI7QUFBQSxNQUNNRyxRQUFRRixZQUFZRyxRQUFaLEVBRGQ7O0FBR0EsU0FBT0QsS0FBUDtBQUNDOztBQUVELFNBQVNFLGFBQVQsQ0FBdUJGLEtBQXZCLEVBQThCRyxTQUE5QixFQUF5QztBQUN2QyxNQUFNQyx3QkFBd0JKLE1BQU1LLE1BQU4sQ0FBYSxVQUFDRCxxQkFBRCxFQUF3QkUsSUFBeEIsRUFBaUM7QUFDcEUsUUFBTUMsV0FBV0QsS0FBS0UsT0FBTCxFQUFqQjtBQUFBLFFBQ01DLGlCQUFpQkYsU0FBU0csTUFEaEM7O0FBR0FOLDRCQUF3Qk8sS0FBS0MsR0FBTCxDQUFTUixxQkFBVCxFQUFnQ0ssY0FBaEMsQ0FBeEI7O0FBRUEsV0FBT0wscUJBQVA7QUFDRCxHQVB1QixFQU9yQixDQVBxQixDQUE5QjtBQUFBLE1BUU1TLGNBQWNiLE1BQU1LLE1BQU4sQ0FBYSxVQUFDUSxXQUFELEVBQWNQLElBQWQsRUFBdUI7QUFDaEQsUUFBTVEsYUFBYVIsS0FBS1MsUUFBTCxDQUFjWCxxQkFBZCxFQUFxQ0QsU0FBckMsQ0FBbkI7O0FBRUFVLG1CQUFlQyxVQUFmOztBQUVBLFdBQU9ELFdBQVA7QUFDRCxHQU5hLEVBTVgsRUFOVyxFQU1QRyxPQU5PLENBTUMsT0FORCxFQU1VLEVBTlYsQ0FScEI7O0FBZ0JBLFNBQU9ILFdBQVA7QUFDRDs7QUFFRCxTQUFTSSxjQUFULENBQXdCakIsS0FBeEIsRUFBK0I7QUFDN0IsTUFBTWtCLFVBQVVsQixNQUFNbUIsR0FBTixDQUFVLFVBQVNiLElBQVQsRUFBZTtBQUN2QyxRQUFNYyxRQUFRZCxLQUFLZSxPQUFMLEVBQWQ7O0FBRUEsV0FBT0QsS0FBUDtBQUNELEdBSmUsQ0FBaEI7O0FBTUEsU0FBT0YsT0FBUDtBQUNEOztBQUVESSxPQUFPQyxPQUFQLEdBQWlCO0FBQ2YzQiw0QkFEZTtBQUVmTSw4QkFGZTtBQUdmZTtBQUhlLENBQWpCIiwiZmlsZSI6InJ1bGVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBwYXJzZXJzID0gcmVxdWlyZSgnb2NjYW0tcGFyc2VycycpOyAvLy9cblxuY29uc3QgeyBCYXNpY1BhcnNlciB9ID0gcGFyc2VycztcblxuZnVuY3Rpb24gcnVsZXNGcm9tQk5GKGJuZikge1xuY29uc3QgYmFzaWNQYXJzZXIgPSBCYXNpY1BhcnNlci5mcm9tQk5GKGJuZiksXG4gICAgICBydWxlcyA9IGJhc2ljUGFyc2VyLmdldFJ1bGVzKCk7XG5cbnJldHVybiBydWxlcztcbn1cblxuZnVuY3Rpb24gcnVsZXNBc1N0cmluZyhydWxlcywgbXVsdGlMaW5lKSB7XG4gIGNvbnN0IG1heGltdW1SdWxlTmFtZUxlbmd0aCA9IHJ1bGVzLnJlZHVjZSgobWF4aW11bVJ1bGVOYW1lTGVuZ3RoLCBydWxlKSA9PiB7XG4gICAgICAgICAgY29uc3QgcnVsZU5hbWUgPSBydWxlLmdldE5hbWUoKSxcbiAgICAgICAgICAgICAgICBydWxlTmFtZUxlbmd0aCA9IHJ1bGVOYW1lLmxlbmd0aDtcblxuICAgICAgICAgIG1heGltdW1SdWxlTmFtZUxlbmd0aCA9IE1hdGgubWF4KG1heGltdW1SdWxlTmFtZUxlbmd0aCwgcnVsZU5hbWVMZW5ndGgpO1xuXG4gICAgICAgICAgcmV0dXJuIG1heGltdW1SdWxlTmFtZUxlbmd0aDtcbiAgICAgICAgfSwgMCksXG4gICAgICAgIHJ1bGVzU3RyaW5nID0gcnVsZXMucmVkdWNlKChydWxlc1N0cmluZywgcnVsZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJ1bGVTdHJpbmcgPSBydWxlLmFzU3RyaW5nKG1heGltdW1SdWxlTmFtZUxlbmd0aCwgbXVsdGlMaW5lKTtcblxuICAgICAgICAgIHJ1bGVzU3RyaW5nICs9IHJ1bGVTdHJpbmc7XG5cbiAgICAgICAgICByZXR1cm4gcnVsZXNTdHJpbmc7XG4gICAgICAgIH0sICcnKS5yZXBsYWNlKC9eXFxuXFxuLywgJycpO1xuXG4gIHJldHVybiBydWxlc1N0cmluZztcbn1cblxuZnVuY3Rpb24gcnVsZXNBc0VudHJpZXMocnVsZXMpIHtcbiAgY29uc3QgZW50cmllcyA9IHJ1bGVzLm1hcChmdW5jdGlvbihydWxlKSB7XG4gICAgY29uc3QgZW50cnkgPSBydWxlLmFzRW50cnkoKTtcblxuICAgIHJldHVybiBlbnRyeTtcbiAgfSk7XG5cbiAgcmV0dXJuIGVudHJpZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBydWxlc0Zyb21CTkYsXG4gIHJ1bGVzQXNTdHJpbmcsXG4gIHJ1bGVzQXNFbnRyaWVzXG59O1xuIl19