"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rulesFromBNF = rulesFromBNF;
exports.rulesAsString = rulesAsString;
exports.ruleMapFromRules = ruleMapFromRules;

var _occamParsers = require("occam-parsers");

function rulesFromBNF(bnf) {
  var basicParser = _occamParsers.BasicParser.fromBNF(bnf),
      ruleMap = basicParser.getRuleMap(),
      rules = Object.values(ruleMap); ///


  return rules;
}

function rulesAsString(rules, multiLine) {
  var maximumRuleNameLength = rules.reduce(function (maximumRuleNameLength, rule) {
    var ruleName = rule.getName(),
        ruleNameLength = ruleName.length;
    maximumRuleNameLength = Math.max(maximumRuleNameLength, ruleNameLength);
    return maximumRuleNameLength;
  }, 0),
      rulesString = rules.reduce(function (rulesString, rule) {
    var ruleString = rule.asString(maximumRuleNameLength, multiLine);
    rulesString += ruleString;
    return rulesString;
  }, "").replace(/^\n\n/, "");
  return rulesString;
}

function ruleMapFromRules(rules) {
  var ruleMap = rules.reduce(function (ruleMap, rule) {
    var ruleName = rule.getName();
    ruleMap[ruleName] = rule;
    return ruleMap;
  }, {});
  return ruleMap;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bGVzLmpzIl0sIm5hbWVzIjpbInJ1bGVzRnJvbUJORiIsImJuZiIsImJhc2ljUGFyc2VyIiwiQmFzaWNQYXJzZXIiLCJmcm9tQk5GIiwicnVsZU1hcCIsImdldFJ1bGVNYXAiLCJydWxlcyIsIk9iamVjdCIsInZhbHVlcyIsInJ1bGVzQXNTdHJpbmciLCJtdWx0aUxpbmUiLCJtYXhpbXVtUnVsZU5hbWVMZW5ndGgiLCJyZWR1Y2UiLCJydWxlIiwicnVsZU5hbWUiLCJnZXROYW1lIiwicnVsZU5hbWVMZW5ndGgiLCJsZW5ndGgiLCJNYXRoIiwibWF4IiwicnVsZXNTdHJpbmciLCJydWxlU3RyaW5nIiwiYXNTdHJpbmciLCJyZXBsYWNlIiwicnVsZU1hcEZyb21SdWxlcyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztBQUVBOztBQUVPLFNBQVNBLFlBQVQsQ0FBc0JDLEdBQXRCLEVBQTJCO0FBQ2hDLE1BQU1DLFdBQVcsR0FBR0MsMEJBQVlDLE9BQVosQ0FBb0JILEdBQXBCLENBQXBCO0FBQUEsTUFDTUksT0FBTyxHQUFHSCxXQUFXLENBQUNJLFVBQVosRUFEaEI7QUFBQSxNQUVNQyxLQUFLLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjSixPQUFkLENBRmQsQ0FEZ0MsQ0FHTTs7O0FBRXRDLFNBQU9FLEtBQVA7QUFDRDs7QUFFTSxTQUFTRyxhQUFULENBQXVCSCxLQUF2QixFQUE4QkksU0FBOUIsRUFBeUM7QUFDOUMsTUFBTUMscUJBQXFCLEdBQUdMLEtBQUssQ0FBQ00sTUFBTixDQUFhLFVBQUNELHFCQUFELEVBQXdCRSxJQUF4QixFQUFpQztBQUNwRSxRQUFNQyxRQUFRLEdBQUdELElBQUksQ0FBQ0UsT0FBTCxFQUFqQjtBQUFBLFFBQ01DLGNBQWMsR0FBR0YsUUFBUSxDQUFDRyxNQURoQztBQUdBTixJQUFBQSxxQkFBcUIsR0FBR08sSUFBSSxDQUFDQyxHQUFMLENBQVNSLHFCQUFULEVBQWdDSyxjQUFoQyxDQUF4QjtBQUVBLFdBQU9MLHFCQUFQO0FBQ0QsR0FQdUIsRUFPckIsQ0FQcUIsQ0FBOUI7QUFBQSxNQVFNUyxXQUFXLEdBQUdkLEtBQUssQ0FBQ00sTUFBTixDQUFhLFVBQUNRLFdBQUQsRUFBY1AsSUFBZCxFQUF1QjtBQUNoRCxRQUFNUSxVQUFVLEdBQUdSLElBQUksQ0FBQ1MsUUFBTCxDQUFjWCxxQkFBZCxFQUFxQ0QsU0FBckMsQ0FBbkI7QUFFQVUsSUFBQUEsV0FBVyxJQUFJQyxVQUFmO0FBRUEsV0FBT0QsV0FBUDtBQUNELEdBTmEsRUFNWCxFQU5XLEVBTVBHLE9BTk8sQ0FNQyxPQU5ELEVBTVUsRUFOVixDQVJwQjtBQWdCQSxTQUFPSCxXQUFQO0FBQ0Q7O0FBRU0sU0FBU0ksZ0JBQVQsQ0FBMEJsQixLQUExQixFQUFpQztBQUN0QyxNQUFNRixPQUFPLEdBQUdFLEtBQUssQ0FBQ00sTUFBTixDQUFhLFVBQUNSLE9BQUQsRUFBVVMsSUFBVixFQUFtQjtBQUM5QyxRQUFNQyxRQUFRLEdBQUdELElBQUksQ0FBQ0UsT0FBTCxFQUFqQjtBQUVBWCxJQUFBQSxPQUFPLENBQUNVLFFBQUQsQ0FBUCxHQUFvQkQsSUFBcEI7QUFFQSxXQUFPVCxPQUFQO0FBQ0QsR0FOZSxFQU1iLEVBTmEsQ0FBaEI7QUFRQSxTQUFPQSxPQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgQmFzaWNQYXJzZXIgfSBmcm9tIFwib2NjYW0tcGFyc2Vyc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gcnVsZXNGcm9tQk5GKGJuZikge1xuICBjb25zdCBiYXNpY1BhcnNlciA9IEJhc2ljUGFyc2VyLmZyb21CTkYoYm5mKSxcbiAgICAgICAgcnVsZU1hcCA9IGJhc2ljUGFyc2VyLmdldFJ1bGVNYXAoKSxcbiAgICAgICAgcnVsZXMgPSBPYmplY3QudmFsdWVzKHJ1bGVNYXApOyAvLy9cblxuICByZXR1cm4gcnVsZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBydWxlc0FzU3RyaW5nKHJ1bGVzLCBtdWx0aUxpbmUpIHtcbiAgY29uc3QgbWF4aW11bVJ1bGVOYW1lTGVuZ3RoID0gcnVsZXMucmVkdWNlKChtYXhpbXVtUnVsZU5hbWVMZW5ndGgsIHJ1bGUpID0+IHtcbiAgICAgICAgICBjb25zdCBydWxlTmFtZSA9IHJ1bGUuZ2V0TmFtZSgpLFxuICAgICAgICAgICAgICAgIHJ1bGVOYW1lTGVuZ3RoID0gcnVsZU5hbWUubGVuZ3RoO1xuXG4gICAgICAgICAgbWF4aW11bVJ1bGVOYW1lTGVuZ3RoID0gTWF0aC5tYXgobWF4aW11bVJ1bGVOYW1lTGVuZ3RoLCBydWxlTmFtZUxlbmd0aCk7XG5cbiAgICAgICAgICByZXR1cm4gbWF4aW11bVJ1bGVOYW1lTGVuZ3RoO1xuICAgICAgICB9LCAwKSxcbiAgICAgICAgcnVsZXNTdHJpbmcgPSBydWxlcy5yZWR1Y2UoKHJ1bGVzU3RyaW5nLCBydWxlKSA9PiB7XG4gICAgICAgICAgY29uc3QgcnVsZVN0cmluZyA9IHJ1bGUuYXNTdHJpbmcobWF4aW11bVJ1bGVOYW1lTGVuZ3RoLCBtdWx0aUxpbmUpO1xuXG4gICAgICAgICAgcnVsZXNTdHJpbmcgKz0gcnVsZVN0cmluZztcblxuICAgICAgICAgIHJldHVybiBydWxlc1N0cmluZztcbiAgICAgICAgfSwgXCJcIikucmVwbGFjZSgvXlxcblxcbi8sIFwiXCIpO1xuXG4gIHJldHVybiBydWxlc1N0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVNYXBGcm9tUnVsZXMocnVsZXMpIHtcbiAgY29uc3QgcnVsZU1hcCA9IHJ1bGVzLnJlZHVjZSgocnVsZU1hcCwgcnVsZSkgPT4ge1xuICAgIGNvbnN0IHJ1bGVOYW1lID0gcnVsZS5nZXROYW1lKCk7XG5cbiAgICBydWxlTWFwW3J1bGVOYW1lXSA9IHJ1bGU7XG5cbiAgICByZXR1cm4gcnVsZU1hcDtcbiAgfSwge30pO1xuXG4gIHJldHVybiBydWxlTWFwO1xufVxuIl19