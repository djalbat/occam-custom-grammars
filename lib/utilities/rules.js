"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.rulesFromBNF = rulesFromBNF;
exports.rulesAsString = rulesAsString;
var _occamLexers = require("occam-lexers");
var _occamParsers = require("occam-parsers");
var _constants = require("../constants");
var bnfLexer = _occamLexers.BNFLexer.fromNothing(), bnfParser = _occamParsers.BNFParser.fromNothing();
function rulesFromBNF(bnf) {
    var rules = [];
    var tokens = bnfLexer.tokensFromBNF(bnf), node = bnfParser.parse(tokens);
    if (node !== null) {
        rules = node.generateRules(_occamParsers.Rule);
    }
    return rules;
}
function rulesAsString(rules, multiLine) {
    var maximumRuleNameLength1 = rules.reduce(function(maximumRuleNameLength, rule) {
        var ruleName = rule.getName(), ruleNameLength = ruleName.length;
        maximumRuleNameLength = Math.max(maximumRuleNameLength, ruleNameLength);
        return maximumRuleNameLength;
    }, 0), rulesString1 = rules.reduce(function(rulesString, rule) {
        var ruleString = rule.asString(maximumRuleNameLength1, multiLine);
        rulesString += ruleString;
        return rulesString;
    }, _constants.EMPTY_STRING).replace(/^\n\n/, _constants.EMPTY_STRING);
    return rulesString1;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvcnVsZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IEJORkxleGVyIH0gZnJvbSBcIm9jY2FtLWxleGVyc1wiO1xuaW1wb3J0IHsgQk5GUGFyc2VyLCBSdWxlIH0gZnJvbSBcIm9jY2FtLXBhcnNlcnNcIjtcblxuaW1wb3J0IHsgRU1QVFlfU1RSSU5HIH0gZnJvbSBcIi4uL2NvbnN0YW50c1wiO1xuXG5jb25zdCBibmZMZXhlciA9IEJORkxleGVyLmZyb21Ob3RoaW5nKCksXG4gICAgICBibmZQYXJzZXIgPSBCTkZQYXJzZXIuZnJvbU5vdGhpbmcoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVzRnJvbUJORihibmYpIHtcbiAgbGV0IHJ1bGVzID0gW107XG5cbiAgY29uc3QgdG9rZW5zID0gYm5mTGV4ZXIudG9rZW5zRnJvbUJORihibmYpLFxuICAgICAgICBub2RlID0gYm5mUGFyc2VyLnBhcnNlKHRva2Vucyk7XG5cbiAgaWYgKG5vZGUgIT09IG51bGwpIHtcbiAgICBydWxlcyA9IG5vZGUuZ2VuZXJhdGVSdWxlcyhSdWxlKTtcbiAgfVxuXG4gIHJldHVybiBydWxlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bGVzQXNTdHJpbmcocnVsZXMsIG11bHRpTGluZSkge1xuICBjb25zdCBtYXhpbXVtUnVsZU5hbWVMZW5ndGggPSBydWxlcy5yZWR1Y2UoKG1heGltdW1SdWxlTmFtZUxlbmd0aCwgcnVsZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJ1bGVOYW1lID0gcnVsZS5nZXROYW1lKCksXG4gICAgICAgICAgICAgICAgcnVsZU5hbWVMZW5ndGggPSBydWxlTmFtZS5sZW5ndGg7XG5cbiAgICAgICAgICBtYXhpbXVtUnVsZU5hbWVMZW5ndGggPSBNYXRoLm1heChtYXhpbXVtUnVsZU5hbWVMZW5ndGgsIHJ1bGVOYW1lTGVuZ3RoKTtcblxuICAgICAgICAgIHJldHVybiBtYXhpbXVtUnVsZU5hbWVMZW5ndGg7XG4gICAgICAgIH0sIDApLFxuICAgICAgICBydWxlc1N0cmluZyA9IHJ1bGVzLnJlZHVjZSgocnVsZXNTdHJpbmcsIHJ1bGUpID0+IHtcbiAgICAgICAgICBjb25zdCBydWxlU3RyaW5nID0gcnVsZS5hc1N0cmluZyhtYXhpbXVtUnVsZU5hbWVMZW5ndGgsIG11bHRpTGluZSk7XG5cbiAgICAgICAgICBydWxlc1N0cmluZyArPSBydWxlU3RyaW5nO1xuXG4gICAgICAgICAgcmV0dXJuIHJ1bGVzU3RyaW5nO1xuICAgICAgICB9LCBFTVBUWV9TVFJJTkcpLnJlcGxhY2UoL15cXG5cXG4vLCBFTVBUWV9TVFJJTkcpO1xuXG4gIHJldHVybiBydWxlc1N0cmluZztcbn1cbiJdLCJuYW1lcyI6WyJydWxlc0Zyb21CTkYiLCJydWxlc0FzU3RyaW5nIiwiYm5mTGV4ZXIiLCJCTkZMZXhlciIsImZyb21Ob3RoaW5nIiwiYm5mUGFyc2VyIiwiQk5GUGFyc2VyIiwiYm5mIiwicnVsZXMiLCJ0b2tlbnMiLCJ0b2tlbnNGcm9tQk5GIiwibm9kZSIsInBhcnNlIiwiZ2VuZXJhdGVSdWxlcyIsIlJ1bGUiLCJtdWx0aUxpbmUiLCJtYXhpbXVtUnVsZU5hbWVMZW5ndGgiLCJyZWR1Y2UiLCJydWxlIiwicnVsZU5hbWUiLCJnZXROYW1lIiwicnVsZU5hbWVMZW5ndGgiLCJsZW5ndGgiLCJNYXRoIiwibWF4IiwicnVsZXNTdHJpbmciLCJydWxlU3RyaW5nIiwiYXNTdHJpbmciLCJFTVBUWV9TVFJJTkciLCJyZXBsYWNlIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7Ozs7UUFVR0EsWUFBWSxHQUFaQSxZQUFZO1FBYVpDLGFBQWEsR0FBYkEsYUFBYTtBQXJCSixJQUFBLFlBQWMsV0FBZCxjQUFjLENBQUE7QUFDUCxJQUFBLGFBQWUsV0FBZixlQUFlLENBQUE7QUFFbEIsSUFBQSxVQUFjLFdBQWQsY0FBYyxDQUFBO0FBRTNDLElBQU1DLFFBQVEsR0FBR0MsWUFBUSxTQUFBLENBQUNDLFdBQVcsRUFBRSxFQUNqQ0MsU0FBUyxHQUFHQyxhQUFTLFVBQUEsQ0FBQ0YsV0FBVyxFQUFFLEFBQUM7QUFFbkMsU0FBU0osWUFBWSxDQUFDTyxHQUFHLEVBQUU7SUFDaEMsSUFBSUMsS0FBSyxHQUFHLEVBQUUsQUFBQztJQUVmLElBQU1DLE1BQU0sR0FBR1AsUUFBUSxDQUFDUSxhQUFhLENBQUNILEdBQUcsQ0FBQyxFQUNwQ0ksSUFBSSxHQUFHTixTQUFTLENBQUNPLEtBQUssQ0FBQ0gsTUFBTSxDQUFDLEFBQUM7SUFFckMsSUFBSUUsSUFBSSxLQUFLLElBQUksRUFBRTtRQUNqQkgsS0FBSyxHQUFHRyxJQUFJLENBQUNFLGFBQWEsQ0FBQ0MsYUFBSSxLQUFBLENBQUMsQ0FBQztLQUNsQztJQUVELE9BQU9OLEtBQUssQ0FBQztDQUNkO0FBRU0sU0FBU1AsYUFBYSxDQUFDTyxLQUFLLEVBQUVPLFNBQVMsRUFBRTtJQUM5QyxJQUFNQyxzQkFBcUIsR0FBR1IsS0FBSyxDQUFDUyxNQUFNLENBQUMsU0FBQ0QscUJBQXFCLEVBQUVFLElBQUksRUFBSztRQUNwRSxJQUFNQyxRQUFRLEdBQUdELElBQUksQ0FBQ0UsT0FBTyxFQUFFLEVBQ3pCQyxjQUFjLEdBQUdGLFFBQVEsQ0FBQ0csTUFBTSxBQUFDO1FBRXZDTixxQkFBcUIsR0FBR08sSUFBSSxDQUFDQyxHQUFHLENBQUNSLHFCQUFxQixFQUFFSyxjQUFjLENBQUMsQ0FBQztRQUV4RSxPQUFPTCxxQkFBcUIsQ0FBQztLQUM5QixFQUFFLENBQUMsQ0FBQyxFQUNMUyxZQUFXLEdBQUdqQixLQUFLLENBQUNTLE1BQU0sQ0FBQyxTQUFDUSxXQUFXLEVBQUVQLElBQUksRUFBSztRQUNoRCxJQUFNUSxVQUFVLEdBQUdSLElBQUksQ0FBQ1MsUUFBUSxDQUFDWCxzQkFBcUIsRUFBRUQsU0FBUyxDQUFDLEFBQUM7UUFFbkVVLFdBQVcsSUFBSUMsVUFBVSxDQUFDO1FBRTFCLE9BQU9ELFdBQVcsQ0FBQztLQUNwQixFQUFFRyxVQUFZLGFBQUEsQ0FBQyxDQUFDQyxPQUFPLFVBQVVELFVBQVksYUFBQSxDQUFDLEFBQUM7SUFFdEQsT0FBT0gsWUFBVyxDQUFDO0NBQ3BCIn0=