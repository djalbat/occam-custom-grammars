'use strict';

var necessary = require('necessary');

var arrayUtilities = necessary.arrayUtilities,
    first = arrayUtilities.first;


function findRuleByRuleName(ruleName, rules) {
  var name = ruleName,
      ///
  rule = rules.find(function (rule) {
    var ruleName = rule.getName();

    if (ruleName === name) {
      return true;
    }
  }) || null; ///

  return rule;
}

function qualifiedRuleBNFFromRuleName(ruleName) {
  var qualifiedRuleName = qualifiedRuleNameFromRuleName(ruleName),
      qualifiedRuleBNF = qualifiedRuleName + ' ::= ' + ruleName + ' qualification? <END_OF_LINE> ;';

  return qualifiedRuleBNF;
}

function qualifiedRuleNameFromRuleName(ruleName) {
  var capitalisedRuleName = capitaliseRuleName(ruleName),
      qualifiedRuleName = 'qualified' + capitalisedRuleName;

  return qualifiedRuleName;
}

function unqualifiedRuleBNFFromRuleName(ruleName) {
  var unqualifiedRuleName = unqualifiedRuleNameFromRuleName(ruleName),
      unqualifiedRuleBNF = unqualifiedRuleName + ' ::= ' + ruleName + ' <END_OF_LINE> ;';

  return unqualifiedRuleBNF;
}

function unqualifiedRuleNameFromRuleName(ruleName) {
  var capitalisedRuleName = capitaliseRuleName(ruleName),
      unqualifiedRuleName = 'unqualified' + capitalisedRuleName;

  return unqualifiedRuleName;
}

module.exports = {
  findRuleByRuleName: findRuleByRuleName,
  qualifiedRuleBNFFromRuleName: qualifiedRuleBNFFromRuleName,
  qualifiedRuleNameFromRuleName: qualifiedRuleNameFromRuleName,
  unqualifiedRuleBNFFromRuleName: unqualifiedRuleBNFFromRuleName,
  unqualifiedRuleNameFromRuleName: unqualifiedRuleNameFromRuleName
};

function capitaliseRuleName(ruleName) {
  var characters = ruleName,
      ///
  firstCharacter = first(characters),
      uppercaseFirstCharacter = firstCharacter.toUpperCase(),
      remainingCharacters = characters.slice(1),
      ///
  capitalisedRuleName = '' + uppercaseFirstCharacter + remainingCharacters;

  return capitalisedRuleName;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvcnVsZU5hbWUuanMiXSwibmFtZXMiOlsibmVjZXNzYXJ5IiwicmVxdWlyZSIsImFycmF5VXRpbGl0aWVzIiwiZmlyc3QiLCJmaW5kUnVsZUJ5UnVsZU5hbWUiLCJydWxlTmFtZSIsInJ1bGVzIiwibmFtZSIsInJ1bGUiLCJmaW5kIiwiZ2V0TmFtZSIsInF1YWxpZmllZFJ1bGVCTkZGcm9tUnVsZU5hbWUiLCJxdWFsaWZpZWRSdWxlTmFtZSIsInF1YWxpZmllZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lIiwicXVhbGlmaWVkUnVsZUJORiIsImNhcGl0YWxpc2VkUnVsZU5hbWUiLCJjYXBpdGFsaXNlUnVsZU5hbWUiLCJ1bnF1YWxpZmllZFJ1bGVCTkZGcm9tUnVsZU5hbWUiLCJ1bnF1YWxpZmllZFJ1bGVOYW1lIiwidW5xdWFsaWZpZWRSdWxlTmFtZUZyb21SdWxlTmFtZSIsInVucXVhbGlmaWVkUnVsZUJORiIsIm1vZHVsZSIsImV4cG9ydHMiLCJjaGFyYWN0ZXJzIiwiZmlyc3RDaGFyYWN0ZXIiLCJ1cHBlcmNhc2VGaXJzdENoYXJhY3RlciIsInRvVXBwZXJDYXNlIiwicmVtYWluaW5nQ2hhcmFjdGVycyIsInNsaWNlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLFdBQVIsQ0FBbEI7O0FBRU0sSUFBRUMsY0FBRixHQUFxQkYsU0FBckIsQ0FBRUUsY0FBRjtBQUFBLElBQ0VDLEtBREYsR0FDWUQsY0FEWixDQUNFQyxLQURGOzs7QUFHTixTQUFTQyxrQkFBVCxDQUE0QkMsUUFBNUIsRUFBc0NDLEtBQXRDLEVBQTZDO0FBQzNDLE1BQU1DLE9BQU9GLFFBQWI7QUFBQSxNQUF3QjtBQUNsQkcsU0FBT0YsTUFBTUcsSUFBTixDQUFXLFVBQVNELElBQVQsRUFBZTtBQUMvQixRQUFNSCxXQUFXRyxLQUFLRSxPQUFMLEVBQWpCOztBQUVBLFFBQUlMLGFBQWFFLElBQWpCLEVBQXVCO0FBQ3JCLGFBQU8sSUFBUDtBQUNEO0FBQ0YsR0FOTSxLQU1ELElBUFosQ0FEMkMsQ0FRekI7O0FBRWxCLFNBQU9DLElBQVA7QUFDRDs7QUFFRCxTQUFTRyw0QkFBVCxDQUFzQ04sUUFBdEMsRUFBZ0Q7QUFDaEQsTUFBTU8sb0JBQW9CQyw4QkFBOEJSLFFBQTlCLENBQTFCO0FBQUEsTUFDTVMsbUJBQXNCRixpQkFBdEIsYUFBK0NQLFFBQS9DLG9DQUROOztBQUdBLFNBQU9TLGdCQUFQO0FBQ0M7O0FBRUQsU0FBU0QsNkJBQVQsQ0FBdUNSLFFBQXZDLEVBQWlEO0FBQy9DLE1BQU1VLHNCQUFzQkMsbUJBQW1CWCxRQUFuQixDQUE1QjtBQUFBLE1BQ01PLGtDQUFnQ0csbUJBRHRDOztBQUdBLFNBQU9ILGlCQUFQO0FBQ0Q7O0FBRUQsU0FBU0ssOEJBQVQsQ0FBd0NaLFFBQXhDLEVBQWtEO0FBQ2hELE1BQU1hLHNCQUFzQkMsZ0NBQWdDZCxRQUFoQyxDQUE1QjtBQUFBLE1BQ01lLHFCQUF3QkYsbUJBQXhCLGFBQW1EYixRQUFuRCxxQkFETjs7QUFHQSxTQUFPZSxrQkFBUDtBQUNEOztBQUVELFNBQVNELCtCQUFULENBQXlDZCxRQUF6QyxFQUFtRDtBQUNqRCxNQUFNVSxzQkFBc0JDLG1CQUFtQlgsUUFBbkIsQ0FBNUI7QUFBQSxNQUNNYSxzQ0FBb0NILG1CQUQxQzs7QUFHQSxTQUFPRyxtQkFBUDtBQUNEOztBQUVERyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZsQix3Q0FEZTtBQUVmTyw0REFGZTtBQUdmRSw4REFIZTtBQUlmSSxnRUFKZTtBQUtmRTtBQUxlLENBQWpCOztBQVFBLFNBQVNILGtCQUFULENBQTRCWCxRQUE1QixFQUFzQztBQUNwQyxNQUFNa0IsYUFBYWxCLFFBQW5CO0FBQUEsTUFBOEI7QUFDeEJtQixtQkFBaUJyQixNQUFNb0IsVUFBTixDQUR2QjtBQUFBLE1BRU1FLDBCQUEwQkQsZUFBZUUsV0FBZixFQUZoQztBQUFBLE1BR01DLHNCQUFzQkosV0FBV0ssS0FBWCxDQUFpQixDQUFqQixDQUg1QjtBQUFBLE1BR2tEO0FBQzVDYiw2QkFBeUJVLHVCQUF6QixHQUFtREUsbUJBSnpEOztBQU1BLFNBQU9aLG1CQUFQO0FBQ0QiLCJmaWxlIjoicnVsZU5hbWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IG5lY2Vzc2FyeSA9IHJlcXVpcmUoJ25lY2Vzc2FyeScpO1xuXG5jb25zdCB7IGFycmF5VXRpbGl0aWVzIH0gPSBuZWNlc3NhcnksXG4gICAgICB7IGZpcnN0IH0gPSBhcnJheVV0aWxpdGllcztcblxuZnVuY3Rpb24gZmluZFJ1bGVCeVJ1bGVOYW1lKHJ1bGVOYW1lLCBydWxlcykge1xuICBjb25zdCBuYW1lID0gcnVsZU5hbWUsICAvLy9cbiAgICAgICAgcnVsZSA9IHJ1bGVzLmZpbmQoZnVuY3Rpb24ocnVsZSkge1xuICAgICAgICAgIGNvbnN0IHJ1bGVOYW1lID0gcnVsZS5nZXROYW1lKCk7XG5cbiAgICAgICAgICBpZiAocnVsZU5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkgfHwgbnVsbDsgLy8vXG5cbiAgcmV0dXJuIHJ1bGU7XG59XG5cbmZ1bmN0aW9uIHF1YWxpZmllZFJ1bGVCTkZGcm9tUnVsZU5hbWUocnVsZU5hbWUpIHtcbmNvbnN0IHF1YWxpZmllZFJ1bGVOYW1lID0gcXVhbGlmaWVkUnVsZU5hbWVGcm9tUnVsZU5hbWUocnVsZU5hbWUpLFxuICAgICAgcXVhbGlmaWVkUnVsZUJORiA9IGAke3F1YWxpZmllZFJ1bGVOYW1lfSA6Oj0gJHtydWxlTmFtZX0gcXVhbGlmaWNhdGlvbj8gPEVORF9PRl9MSU5FPiA7YDtcblxucmV0dXJuIHF1YWxpZmllZFJ1bGVCTkY7XG59XG5cbmZ1bmN0aW9uIHF1YWxpZmllZFJ1bGVOYW1lRnJvbVJ1bGVOYW1lKHJ1bGVOYW1lKSB7XG4gIGNvbnN0IGNhcGl0YWxpc2VkUnVsZU5hbWUgPSBjYXBpdGFsaXNlUnVsZU5hbWUocnVsZU5hbWUpLFxuICAgICAgICBxdWFsaWZpZWRSdWxlTmFtZSA9IGBxdWFsaWZpZWQke2NhcGl0YWxpc2VkUnVsZU5hbWV9YDtcblxuICByZXR1cm4gcXVhbGlmaWVkUnVsZU5hbWU7XG59XG5cbmZ1bmN0aW9uIHVucXVhbGlmaWVkUnVsZUJORkZyb21SdWxlTmFtZShydWxlTmFtZSkge1xuICBjb25zdCB1bnF1YWxpZmllZFJ1bGVOYW1lID0gdW5xdWFsaWZpZWRSdWxlTmFtZUZyb21SdWxlTmFtZShydWxlTmFtZSksXG4gICAgICAgIHVucXVhbGlmaWVkUnVsZUJORiA9IGAke3VucXVhbGlmaWVkUnVsZU5hbWV9IDo6PSAke3J1bGVOYW1lfSA8RU5EX09GX0xJTkU+IDtgO1xuXG4gIHJldHVybiB1bnF1YWxpZmllZFJ1bGVCTkY7XG59XG5cbmZ1bmN0aW9uIHVucXVhbGlmaWVkUnVsZU5hbWVGcm9tUnVsZU5hbWUocnVsZU5hbWUpIHtcbiAgY29uc3QgY2FwaXRhbGlzZWRSdWxlTmFtZSA9IGNhcGl0YWxpc2VSdWxlTmFtZShydWxlTmFtZSksXG4gICAgICAgIHVucXVhbGlmaWVkUnVsZU5hbWUgPSBgdW5xdWFsaWZpZWQke2NhcGl0YWxpc2VkUnVsZU5hbWV9YDtcblxuICByZXR1cm4gdW5xdWFsaWZpZWRSdWxlTmFtZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGZpbmRSdWxlQnlSdWxlTmFtZSxcbiAgcXVhbGlmaWVkUnVsZUJORkZyb21SdWxlTmFtZSxcbiAgcXVhbGlmaWVkUnVsZU5hbWVGcm9tUnVsZU5hbWUsXG4gIHVucXVhbGlmaWVkUnVsZUJORkZyb21SdWxlTmFtZSxcbiAgdW5xdWFsaWZpZWRSdWxlTmFtZUZyb21SdWxlTmFtZVxufTtcblxuZnVuY3Rpb24gY2FwaXRhbGlzZVJ1bGVOYW1lKHJ1bGVOYW1lKSB7XG4gIGNvbnN0IGNoYXJhY3RlcnMgPSBydWxlTmFtZSwgIC8vL1xuICAgICAgICBmaXJzdENoYXJhY3RlciA9IGZpcnN0KGNoYXJhY3RlcnMpLFxuICAgICAgICB1cHBlcmNhc2VGaXJzdENoYXJhY3RlciA9IGZpcnN0Q2hhcmFjdGVyLnRvVXBwZXJDYXNlKCksXG4gICAgICAgIHJlbWFpbmluZ0NoYXJhY3RlcnMgPSBjaGFyYWN0ZXJzLnNsaWNlKDEpLCAgLy8vXG4gICAgICAgIGNhcGl0YWxpc2VkUnVsZU5hbWUgPSBgJHt1cHBlcmNhc2VGaXJzdENoYXJhY3Rlcn0ke3JlbWFpbmluZ0NoYXJhY3RlcnN9YDtcblxuICByZXR1cm4gY2FwaXRhbGlzZWRSdWxlTmFtZTtcbn1cbiJdfQ==