"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get validateBNF () {
        return validateBNF;
    },
    get validateVocabulary () {
        return validateVocabulary;
    }
});
var _necessary = require("necessary");
var _typesMap = /*#__PURE__*/ _interop_require_default(require("../typesMap"));
var _nominal = require("../utilities/nominal");
var _query = require("../utilities/query");
var _constants = require("../constants");
var _grammar = require("../utilities/grammar");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var first = _necessary.arrayUtilities.first, second = _necessary.arrayUtilities.second;
var expressionNodesQuery = (0, _query.nodesQuery)("//expression"), ruleNameTerminalNodeQuery = (0, _query.nodeQuery)("/document/rule/name/@*!"), unassignedTerminalNodeQuery = (0, _query.nodeQuery)("/expression/@unassigned"), stringLiteralTerminalNodesQuery = (0, _query.nodesQuery)("//stringLiteral/@*!"), significantTokenTypeTerminalNodesQuery = (0, _query.nodesQuery)("//significantTokenType/@*!");
function validateBNF(bnf, ruleName) {
    var content = bnf, tokens = _grammar.customGrammarBNFLexer.tokenise(content), node = _grammar.customGrammarBNFParser.parse(tokens);
    if (node === null) {
        return;
    }
    var ruleNameTerminalNode = ruleNameTerminalNodeQuery(node);
    if (ruleNameTerminalNode !== null) {
        var name = nameFromRuleNameTerminalNode(ruleNameTerminalNode);
        if (name !== ruleName) {
            throw new Error("The '".concat(name, "' rule should be named '").concat(ruleName, "'."));
        }
    }
    var types = _typesMap.default[ruleName], significantTokenTypeTerminalNodes = significantTokenTypeTerminalNodesQuery(node);
    significantTokenTypeTerminalNodes.forEach(function(significantTokenTypeTerminalNode) {
        var type = typeFromSignificantTokenTypeTerminalNode(significantTokenTypeTerminalNode), typesIncludeType = types.includes(type);
        if (!typesIncludeType) {
            throw new Error("The '".concat(type, "' type is not included in the '").concat(ruleName, "' rule's types."));
        }
    });
    var stringLiteralTerminalNodes = stringLiteralTerminalNodesQuery(node);
    stringLiteralTerminalNodes.forEach(function(stringLiteralTerminalNode) {
        var content = contentFromStringLiteralTerminalNode(stringLiteralTerminalNode);
        if (content === _constants.UNDERSCORE_CHARACTER) {
            throw new Error('The "'.concat(content, '" string literal cannot be an underscore.'));
        }
        var tokens = _nominal.nominalLexer.tokenise(content), tokensLength = tokens.length;
        if (tokensLength !== 1) {
            throw new Error('Tokenising the "'.concat(content, '" string literal does not result in a single token.'));
        }
        var firstToken = first(tokens), token = firstToken, type = token.getType(), typesIncludeType = types.includes(type);
        if (!typesIncludeType) {
            throw new Error('The "'.concat(content, "\" string literal's token's '").concat(type, "' type is not included in the '").concat(ruleName, "' rule's types."));
        }
    });
}
function validateVocabulary(vocabulary) {
    var content = vocabulary, tokens = _grammar.customGrammarVocabularyLexer.tokenise(content), node = _grammar.customGrammarVocabularyParser.parse(tokens);
    if (node === null) {
        return;
    }
    var expressionNodes = expressionNodesQuery(node);
    expressionNodes.forEach(function(expressionNode) {
        var content = contentFromExpressionNode(expressionNode), tokens = _nominal.nominalLexer.tokenise(content), tokensLength = tokens.length;
        if (tokensLength > 1) {
            throw new Error("Tokenising the '".concat(content, "' content results in more than one token."));
        }
        var firstToken = first(tokens), token = firstToken, type = token.getType();
        if (type !== _constants.UNASSIGNED_TYPE) {
            throw new Error("The '".concat(type, "' type of the '").concat(content, "' token is not 'unassigned'."));
        }
        if (content === _constants.UNDERSCORE_CHARACTER) {
            throw new Error("The '".concat(content, "' token cannot be an underscore."));
        }
    });
}
function contentFromExpressionNode(expressionNode) {
    var content;
    var unassignedTerminalNode = unassignedTerminalNodeQuery(expressionNode);
    content = unassignedTerminalNode.getContent();
    return content;
    ;
}
function nameFromRuleNameTerminalNode(ruleNameTerminalNode) {
    var name;
    var content = ruleNameTerminalNode.getContent();
    name = content; ///
    return name;
}
function contentFromStringLiteralTerminalNode(stringLiteralTerminalNode) {
    var content;
    content = stringLiteralTerminalNode.getContent();
    var matches = content.match(/"([^"]*)"/), secondMatch = second(matches);
    content = secondMatch; ///
    return content;
}
function typeFromSignificantTokenTypeTerminalNode(significantTokenTypeTerminalNode) {
    var type;
    var content = significantTokenTypeTerminalNode.getContent(), matches = content.match(/\[([^\]]*)\]/), secondMatch = second(matches);
    type = secondMatch; ///
    return type;
}

//# sourceMappingURL=data:application/json;base64,