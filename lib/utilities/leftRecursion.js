'use strict';

var necessary = require('necessary'),
    grammarUtilities = require('occam-grammar-utilities');

var partUtilities = require('../utilities/part');

var arrayUtilities = necessary.arrayUtilities,
    first = arrayUtilities.first,
    separate = arrayUtilities.separate,
    isPartRuleNamePart = partUtilities.isPartRuleNamePart,
    eliminateOrphanedRules = grammarUtilities.eliminateOrphanedRules,
    eliminateImplicitLeftRecursion = grammarUtilities.eliminateImplicitLeftRecursion;


function eliminateLeftRecursion(rules, ruleName) {
  var leftRecursiveRules = [],
      remainingRules = [];

  separate(rules, leftRecursiveRules, remainingRules, function (rule) {
    var ruleLeftRecursive = isRuleLeftRecursive(rule, ruleName);

    if (ruleLeftRecursive) {
      return true;
    }
  });

  var leftRecursiveRulesLength = leftRecursiveRules.length,
      rulesImplicitlyLeftRecursive = leftRecursiveRulesLength > 0;

  if (rulesImplicitlyLeftRecursive) {
    rules = [].concat(leftRecursiveRules).concat(remainingRules); ///

    rules = eliminateImplicitLeftRecursion(rules); ///

    var excludingFirstRule = false;

    rules = eliminateOrphanedRules(rules, excludingFirstRule); ///
  }

  return rules;
}

module.exports = {
  eliminateLeftRecursion: eliminateLeftRecursion
};

function isRuleLeftRecursive(rule, ruleName) {
  var definitions = rule.getDefinitions(),
      ruleLeftRecursive = definitions.some(function (definition) {
    var definitionLeftRecursive = isDefinitionLeftRecursive(definition, ruleName);

    if (definitionLeftRecursive) {
      return true;
    }
  });

  return ruleLeftRecursive;
}

function isDefinitionLeftRecursive(definition, ruleName) {
  var definitionLeftRecursive = false; ///

  var parts = definition.getParts(),
      partsLength = parts.length;

  if (partsLength > 0) {
    var firstPart = first(parts),
        firstPartRuleNamePart = isPartRuleNamePart(firstPart);

    if (firstPartRuleNamePart) {
      var ruleNamePart = firstPart,
          ///
      ruleNamePartRuleName = ruleNamePart.getRuleName();

      if (ruleNamePartRuleName === ruleName) {
        definitionLeftRecursive = true; ///
      }
    }
  }

  return definitionLeftRecursive;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvbGVmdFJlY3Vyc2lvbi5qcyJdLCJuYW1lcyI6WyJuZWNlc3NhcnkiLCJyZXF1aXJlIiwiZ3JhbW1hclV0aWxpdGllcyIsInBhcnRVdGlsaXRpZXMiLCJhcnJheVV0aWxpdGllcyIsImZpcnN0Iiwic2VwYXJhdGUiLCJpc1BhcnRSdWxlTmFtZVBhcnQiLCJlbGltaW5hdGVPcnBoYW5lZFJ1bGVzIiwiZWxpbWluYXRlSW1wbGljaXRMZWZ0UmVjdXJzaW9uIiwiZWxpbWluYXRlTGVmdFJlY3Vyc2lvbiIsInJ1bGVzIiwicnVsZU5hbWUiLCJsZWZ0UmVjdXJzaXZlUnVsZXMiLCJyZW1haW5pbmdSdWxlcyIsInJ1bGUiLCJydWxlTGVmdFJlY3Vyc2l2ZSIsImlzUnVsZUxlZnRSZWN1cnNpdmUiLCJsZWZ0UmVjdXJzaXZlUnVsZXNMZW5ndGgiLCJsZW5ndGgiLCJydWxlc0ltcGxpY2l0bHlMZWZ0UmVjdXJzaXZlIiwiY29uY2F0IiwiZXhjbHVkaW5nRmlyc3RSdWxlIiwibW9kdWxlIiwiZXhwb3J0cyIsImRlZmluaXRpb25zIiwiZ2V0RGVmaW5pdGlvbnMiLCJzb21lIiwiZGVmaW5pdGlvbiIsImRlZmluaXRpb25MZWZ0UmVjdXJzaXZlIiwiaXNEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZSIsInBhcnRzIiwiZ2V0UGFydHMiLCJwYXJ0c0xlbmd0aCIsImZpcnN0UGFydCIsImZpcnN0UGFydFJ1bGVOYW1lUGFydCIsInJ1bGVOYW1lUGFydCIsInJ1bGVOYW1lUGFydFJ1bGVOYW1lIiwiZ2V0UnVsZU5hbWUiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFlBQVlDLFFBQVEsV0FBUixDQUFsQjtBQUFBLElBQ01DLG1CQUFtQkQsUUFBUSx5QkFBUixDQUR6Qjs7QUFHQSxJQUFNRSxnQkFBZ0JGLFFBQVEsbUJBQVIsQ0FBdEI7O0FBRU0sSUFBRUcsY0FBRixHQUFxQkosU0FBckIsQ0FBRUksY0FBRjtBQUFBLElBQ0VDLEtBREYsR0FDc0JELGNBRHRCLENBQ0VDLEtBREY7QUFBQSxJQUNTQyxRQURULEdBQ3NCRixjQUR0QixDQUNTRSxRQURUO0FBQUEsSUFFRUMsa0JBRkYsR0FFeUJKLGFBRnpCLENBRUVJLGtCQUZGO0FBQUEsSUFHRUMsc0JBSEYsR0FHNkROLGdCQUg3RCxDQUdFTSxzQkFIRjtBQUFBLElBRzBCQyw4QkFIMUIsR0FHNkRQLGdCQUg3RCxDQUcwQk8sOEJBSDFCOzs7QUFLTixTQUFTQyxzQkFBVCxDQUFnQ0MsS0FBaEMsRUFBdUNDLFFBQXZDLEVBQWlEO0FBQy9DLE1BQU1DLHFCQUFxQixFQUEzQjtBQUFBLE1BQ01DLGlCQUFpQixFQUR2Qjs7QUFHQVIsV0FBU0ssS0FBVCxFQUFnQkUsa0JBQWhCLEVBQW9DQyxjQUFwQyxFQUFvRCxVQUFTQyxJQUFULEVBQWU7QUFDakUsUUFBTUMsb0JBQW9CQyxvQkFBb0JGLElBQXBCLEVBQTBCSCxRQUExQixDQUExQjs7QUFFQSxRQUFJSSxpQkFBSixFQUF1QjtBQUNyQixhQUFPLElBQVA7QUFDRDtBQUNGLEdBTkQ7O0FBUUEsTUFBTUUsMkJBQTJCTCxtQkFBbUJNLE1BQXBEO0FBQUEsTUFDTUMsK0JBQWdDRiwyQkFBMkIsQ0FEakU7O0FBR0EsTUFBSUUsNEJBQUosRUFBa0M7QUFDaENULFlBQVEsR0FBR1UsTUFBSCxDQUFVUixrQkFBVixFQUE4QlEsTUFBOUIsQ0FBcUNQLGNBQXJDLENBQVIsQ0FEZ0MsQ0FDOEI7O0FBRTlESCxZQUFRRiwrQkFBK0JFLEtBQS9CLENBQVIsQ0FIZ0MsQ0FHZ0I7O0FBRWhELFFBQU1XLHFCQUFxQixLQUEzQjs7QUFFQVgsWUFBUUgsdUJBQXVCRyxLQUF2QixFQUE4Qlcsa0JBQTlCLENBQVIsQ0FQZ0MsQ0FPNEI7QUFDN0Q7O0FBRUQsU0FBT1gsS0FBUDtBQUNEOztBQUVEWSxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZkO0FBRGUsQ0FBakI7O0FBSUEsU0FBU08sbUJBQVQsQ0FBNkJGLElBQTdCLEVBQW1DSCxRQUFuQyxFQUE2QztBQUMzQyxNQUFNYSxjQUFjVixLQUFLVyxjQUFMLEVBQXBCO0FBQUEsTUFDTVYsb0JBQW9CUyxZQUFZRSxJQUFaLENBQWlCLFVBQVNDLFVBQVQsRUFBcUI7QUFDeEQsUUFBTUMsMEJBQTBCQywwQkFBMEJGLFVBQTFCLEVBQXNDaEIsUUFBdEMsQ0FBaEM7O0FBRUEsUUFBSWlCLHVCQUFKLEVBQTZCO0FBQzNCLGFBQU8sSUFBUDtBQUNEO0FBQ0YsR0FObUIsQ0FEMUI7O0FBU0EsU0FBT2IsaUJBQVA7QUFDRDs7QUFFRCxTQUFTYyx5QkFBVCxDQUFtQ0YsVUFBbkMsRUFBK0NoQixRQUEvQyxFQUF5RDtBQUN2RCxNQUFJaUIsMEJBQTBCLEtBQTlCLENBRHVELENBQ2xCOztBQUVyQyxNQUFNRSxRQUFRSCxXQUFXSSxRQUFYLEVBQWQ7QUFBQSxNQUNNQyxjQUFjRixNQUFNWixNQUQxQjs7QUFHQSxNQUFJYyxjQUFjLENBQWxCLEVBQXFCO0FBQ25CLFFBQU1DLFlBQVk3QixNQUFNMEIsS0FBTixDQUFsQjtBQUFBLFFBQ01JLHdCQUF3QjVCLG1CQUFtQjJCLFNBQW5CLENBRDlCOztBQUdBLFFBQUlDLHFCQUFKLEVBQTJCO0FBQ3pCLFVBQU1DLGVBQWVGLFNBQXJCO0FBQUEsVUFBaUM7QUFDM0JHLDZCQUF1QkQsYUFBYUUsV0FBYixFQUQ3Qjs7QUFHQSxVQUFJRCx5QkFBeUJ6QixRQUE3QixFQUF1QztBQUNyQ2lCLGtDQUEwQixJQUExQixDQURxQyxDQUNMO0FBQ2pDO0FBQ0Y7QUFDRjs7QUFFRCxTQUFPQSx1QkFBUDtBQUNEIiwiZmlsZSI6ImxlZnRSZWN1cnNpb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IG5lY2Vzc2FyeSA9IHJlcXVpcmUoJ25lY2Vzc2FyeScpLFxuICAgICAgZ3JhbW1hclV0aWxpdGllcyA9IHJlcXVpcmUoJ29jY2FtLWdyYW1tYXItdXRpbGl0aWVzJyk7XG5cbmNvbnN0IHBhcnRVdGlsaXRpZXMgPSByZXF1aXJlKCcuLi91dGlsaXRpZXMvcGFydCcpO1xuXG5jb25zdCB7IGFycmF5VXRpbGl0aWVzIH0gPSBuZWNlc3NhcnksXG4gICAgICB7IGZpcnN0LCBzZXBhcmF0ZSB9ID0gYXJyYXlVdGlsaXRpZXMsXG4gICAgICB7IGlzUGFydFJ1bGVOYW1lUGFydCB9ID0gcGFydFV0aWxpdGllcyxcbiAgICAgIHsgZWxpbWluYXRlT3JwaGFuZWRSdWxlcywgZWxpbWluYXRlSW1wbGljaXRMZWZ0UmVjdXJzaW9uIH0gPSBncmFtbWFyVXRpbGl0aWVzO1xuXG5mdW5jdGlvbiBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uKHJ1bGVzLCBydWxlTmFtZSkge1xuICBjb25zdCBsZWZ0UmVjdXJzaXZlUnVsZXMgPSBbXSxcbiAgICAgICAgcmVtYWluaW5nUnVsZXMgPSBbXTtcblxuICBzZXBhcmF0ZShydWxlcywgbGVmdFJlY3Vyc2l2ZVJ1bGVzLCByZW1haW5pbmdSdWxlcywgZnVuY3Rpb24ocnVsZSkge1xuICAgIGNvbnN0IHJ1bGVMZWZ0UmVjdXJzaXZlID0gaXNSdWxlTGVmdFJlY3Vyc2l2ZShydWxlLCBydWxlTmFtZSk7XG5cbiAgICBpZiAocnVsZUxlZnRSZWN1cnNpdmUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3QgbGVmdFJlY3Vyc2l2ZVJ1bGVzTGVuZ3RoID0gbGVmdFJlY3Vyc2l2ZVJ1bGVzLmxlbmd0aCxcbiAgICAgICAgcnVsZXNJbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZSA9IChsZWZ0UmVjdXJzaXZlUnVsZXNMZW5ndGggPiAwKTtcblxuICBpZiAocnVsZXNJbXBsaWNpdGx5TGVmdFJlY3Vyc2l2ZSkge1xuICAgIHJ1bGVzID0gW10uY29uY2F0KGxlZnRSZWN1cnNpdmVSdWxlcykuY29uY2F0KHJlbWFpbmluZ1J1bGVzKTsgLy8vXG5cbiAgICBydWxlcyA9IGVsaW1pbmF0ZUltcGxpY2l0TGVmdFJlY3Vyc2lvbihydWxlcyk7ICAvLy9cblxuICAgIGNvbnN0IGV4Y2x1ZGluZ0ZpcnN0UnVsZSA9IGZhbHNlO1xuXG4gICAgcnVsZXMgPSBlbGltaW5hdGVPcnBoYW5lZFJ1bGVzKHJ1bGVzLCBleGNsdWRpbmdGaXJzdFJ1bGUpOyAgLy8vXG4gIH1cblxuICByZXR1cm4gcnVsZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBlbGltaW5hdGVMZWZ0UmVjdXJzaW9uXG59O1xuXG5mdW5jdGlvbiBpc1J1bGVMZWZ0UmVjdXJzaXZlKHJ1bGUsIHJ1bGVOYW1lKSB7XG4gIGNvbnN0IGRlZmluaXRpb25zID0gcnVsZS5nZXREZWZpbml0aW9ucygpLFxuICAgICAgICBydWxlTGVmdFJlY3Vyc2l2ZSA9IGRlZmluaXRpb25zLnNvbWUoZnVuY3Rpb24oZGVmaW5pdGlvbikge1xuICAgICAgICAgIGNvbnN0IGRlZmluaXRpb25MZWZ0UmVjdXJzaXZlID0gaXNEZWZpbml0aW9uTGVmdFJlY3Vyc2l2ZShkZWZpbml0aW9uLCBydWxlTmFtZSk7XG5cbiAgICAgICAgICBpZiAoZGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgcmV0dXJuIHJ1bGVMZWZ0UmVjdXJzaXZlXG59XG5cbmZ1bmN0aW9uIGlzRGVmaW5pdGlvbkxlZnRSZWN1cnNpdmUoZGVmaW5pdGlvbiwgcnVsZU5hbWUpIHtcbiAgbGV0IGRlZmluaXRpb25MZWZ0UmVjdXJzaXZlID0gZmFsc2U7IC8vL1xuXG4gIGNvbnN0IHBhcnRzID0gZGVmaW5pdGlvbi5nZXRQYXJ0cygpLFxuICAgICAgICBwYXJ0c0xlbmd0aCA9IHBhcnRzLmxlbmd0aDtcblxuICBpZiAocGFydHNMZW5ndGggPiAwKSB7XG4gICAgY29uc3QgZmlyc3RQYXJ0ID0gZmlyc3QocGFydHMpLFxuICAgICAgICAgIGZpcnN0UGFydFJ1bGVOYW1lUGFydCA9IGlzUGFydFJ1bGVOYW1lUGFydChmaXJzdFBhcnQpO1xuXG4gICAgaWYgKGZpcnN0UGFydFJ1bGVOYW1lUGFydCkge1xuICAgICAgY29uc3QgcnVsZU5hbWVQYXJ0ID0gZmlyc3RQYXJ0LCAgLy8vXG4gICAgICAgICAgICBydWxlTmFtZVBhcnRSdWxlTmFtZSA9IHJ1bGVOYW1lUGFydC5nZXRSdWxlTmFtZSgpO1xuXG4gICAgICBpZiAocnVsZU5hbWVQYXJ0UnVsZU5hbWUgPT09IHJ1bGVOYW1lKSB7XG4gICAgICAgIGRlZmluaXRpb25MZWZ0UmVjdXJzaXZlID0gdHJ1ZTsgLy8vXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRlZmluaXRpb25MZWZ0UmVjdXJzaXZlO1xufVxuIl19