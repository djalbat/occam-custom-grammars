"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.florenceLexerFromCombinedCustomGrammar = florenceLexerFromCombinedCustomGrammar;
exports.florenceLexerFromEntriesAndCombinedCustomGrammar = florenceLexerFromEntriesAndCombinedCustomGrammar;
exports.default = void 0;
var _occamLexers = require("occam-lexers");
var _occamGrammars = require("occam-grammars");
function florenceLexerFromCombinedCustomGrammar(combinedCustomGrammar) {
    var entries = _occamGrammars.FlorenceLexer.entries, rules = rulesFromEntriesAndCombinedCustomGrammar(entries, combinedCustomGrammar), florenceLexer = _occamGrammars.FlorenceLexer.fromRules(rules);
    return florenceLexer;
}
function florenceLexerFromEntriesAndCombinedCustomGrammar(entries, combinedCustomGrammar) {
    var rules = rulesFromEntriesAndCombinedCustomGrammar(entries, combinedCustomGrammar), florenceLexer = _occamGrammars.FlorenceLexer.fromRules(rules);
    return florenceLexer;
}
var _default = {
    florenceLexerFromCombinedCustomGrammar: florenceLexerFromCombinedCustomGrammar,
    florenceLexerFromEntriesAndCombinedCustomGrammar: florenceLexerFromEntriesAndCombinedCustomGrammar
};
exports.default = _default;
function rulesFromEntriesAndCombinedCustomGrammar(entries, combinedCustomGrammar) {
    var combinedCustomGrammarLexicalPattern = combinedCustomGrammar.getLexicalPattern(), custom = combinedCustomGrammarLexicalPattern, customGrammarEntry = {
        custom: custom
    }, customGrammarRule = _occamLexers.Rule.fromEntry(customGrammarEntry), rules = entries.map(function(entry) {
        var rule = _occamLexers.Rule.fromEntry(entry);
        return rule;
    });
    rules.unshift(customGrammarRule);
    return rules;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvbGV4ZXJzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBSdWxlIH0gZnJvbSBcIm9jY2FtLWxleGVyc1wiO1xuaW1wb3J0IHsgRmxvcmVuY2VMZXhlciB9IGZyb20gXCJvY2NhbS1ncmFtbWFyc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gZmxvcmVuY2VMZXhlckZyb21Db21iaW5lZEN1c3RvbUdyYW1tYXIoY29tYmluZWRDdXN0b21HcmFtbWFyKSB7XG4gIGNvbnN0IHsgZW50cmllcyB9ID0gRmxvcmVuY2VMZXhlcixcbiAgICAgICAgcnVsZXMgPSBydWxlc0Zyb21FbnRyaWVzQW5kQ29tYmluZWRDdXN0b21HcmFtbWFyKGVudHJpZXMsIGNvbWJpbmVkQ3VzdG9tR3JhbW1hciksXG4gICAgICAgIGZsb3JlbmNlTGV4ZXIgPSBGbG9yZW5jZUxleGVyLmZyb21SdWxlcyhydWxlcyk7XG5cbiAgcmV0dXJuIGZsb3JlbmNlTGV4ZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmbG9yZW5jZUxleGVyRnJvbUVudHJpZXNBbmRDb21iaW5lZEN1c3RvbUdyYW1tYXIoZW50cmllcywgY29tYmluZWRDdXN0b21HcmFtbWFyKSB7XG4gIGNvbnN0IHJ1bGVzID0gcnVsZXNGcm9tRW50cmllc0FuZENvbWJpbmVkQ3VzdG9tR3JhbW1hcihlbnRyaWVzLCBjb21iaW5lZEN1c3RvbUdyYW1tYXIpLFxuICAgICAgICBmbG9yZW5jZUxleGVyID0gRmxvcmVuY2VMZXhlci5mcm9tUnVsZXMocnVsZXMpO1xuXG4gIHJldHVybiBmbG9yZW5jZUxleGVyO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGZsb3JlbmNlTGV4ZXJGcm9tQ29tYmluZWRDdXN0b21HcmFtbWFyLFxuICBmbG9yZW5jZUxleGVyRnJvbUVudHJpZXNBbmRDb21iaW5lZEN1c3RvbUdyYW1tYXJcbn07XG5cbmZ1bmN0aW9uIHJ1bGVzRnJvbUVudHJpZXNBbmRDb21iaW5lZEN1c3RvbUdyYW1tYXIoZW50cmllcywgY29tYmluZWRDdXN0b21HcmFtbWFyKSB7XG4gIGNvbnN0IGNvbWJpbmVkQ3VzdG9tR3JhbW1hckxleGljYWxQYXR0ZXJuID0gY29tYmluZWRDdXN0b21HcmFtbWFyLmdldExleGljYWxQYXR0ZXJuKCksXG4gICAgICAgIGN1c3RvbSA9IGNvbWJpbmVkQ3VzdG9tR3JhbW1hckxleGljYWxQYXR0ZXJuLCAvLy9cbiAgICAgICAgY3VzdG9tR3JhbW1hckVudHJ5ID0ge1xuICAgICAgICAgIGN1c3RvbVxuICAgICAgICB9LFxuICAgICAgICBjdXN0b21HcmFtbWFyUnVsZSA9ICBSdWxlLmZyb21FbnRyeShjdXN0b21HcmFtbWFyRW50cnkpLFxuICAgICAgICBydWxlcyA9IGVudHJpZXMubWFwKChlbnRyeSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJ1bGUgPSBSdWxlLmZyb21FbnRyeShlbnRyeSk7XG5cbiAgICAgICAgICByZXR1cm4gcnVsZTtcbiAgICAgICAgfSk7XG5cbiAgcnVsZXMudW5zaGlmdChjdXN0b21HcmFtbWFyUnVsZSk7XG5cbiAgcmV0dXJuIHJ1bGVzO1xufVxuIl0sIm5hbWVzIjpbImZsb3JlbmNlTGV4ZXJGcm9tQ29tYmluZWRDdXN0b21HcmFtbWFyIiwiZmxvcmVuY2VMZXhlckZyb21FbnRyaWVzQW5kQ29tYmluZWRDdXN0b21HcmFtbWFyIiwiY29tYmluZWRDdXN0b21HcmFtbWFyIiwiZW50cmllcyIsIkZsb3JlbmNlTGV4ZXIiLCJydWxlcyIsInJ1bGVzRnJvbUVudHJpZXNBbmRDb21iaW5lZEN1c3RvbUdyYW1tYXIiLCJmbG9yZW5jZUxleGVyIiwiZnJvbVJ1bGVzIiwiY29tYmluZWRDdXN0b21HcmFtbWFyTGV4aWNhbFBhdHRlcm4iLCJnZXRMZXhpY2FsUGF0dGVybiIsImN1c3RvbSIsImN1c3RvbUdyYW1tYXJFbnRyeSIsImN1c3RvbUdyYW1tYXJSdWxlIiwiUnVsZSIsImZyb21FbnRyeSIsIm1hcCIsImVudHJ5IiwicnVsZSIsInVuc2hpZnQiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQzs7OztRQUtHQSxzQ0FBc0MsR0FBdENBLHNDQUFzQztRQVF0Q0MsZ0RBQWdELEdBQWhEQSxnREFBZ0Q7O0FBWDNDLElBQUEsWUFBYyxXQUFkLGNBQWMsQ0FBQTtBQUNMLElBQUEsY0FBZ0IsV0FBaEIsZ0JBQWdCLENBQUE7QUFFdkMsU0FBU0Qsc0NBQXNDLENBQUNFLHFCQUFxQixFQUFFO0lBQzVFLElBQU0sQUFBRUMsT0FBTyxHQUFLQyxjQUFhLGNBQUEsQ0FBekJELE9BQU8sQUFBa0IsRUFDM0JFLEtBQUssR0FBR0Msd0NBQXdDLENBQUNILE9BQU8sRUFBRUQscUJBQXFCLENBQUMsRUFDaEZLLGFBQWEsR0FBR0gsY0FBYSxjQUFBLENBQUNJLFNBQVMsQ0FBQ0gsS0FBSyxDQUFDLEFBQUM7SUFFckQsT0FBT0UsYUFBYSxDQUFDO0NBQ3RCO0FBRU0sU0FBU04sZ0RBQWdELENBQUNFLE9BQU8sRUFBRUQscUJBQXFCLEVBQUU7SUFDL0YsSUFBTUcsS0FBSyxHQUFHQyx3Q0FBd0MsQ0FBQ0gsT0FBTyxFQUFFRCxxQkFBcUIsQ0FBQyxFQUNoRkssYUFBYSxHQUFHSCxjQUFhLGNBQUEsQ0FBQ0ksU0FBUyxDQUFDSCxLQUFLLENBQUMsQUFBQztJQUVyRCxPQUFPRSxhQUFhLENBQUM7Q0FDdEI7ZUFFYztJQUNiUCxzQ0FBc0MsRUFBdENBLHNDQUFzQztJQUN0Q0MsZ0RBQWdELEVBQWhEQSxnREFBZ0Q7Q0FDakQ7O0FBRUQsU0FBU0ssd0NBQXdDLENBQUNILE9BQU8sRUFBRUQscUJBQXFCLEVBQUU7SUFDaEYsSUFBTU8sbUNBQW1DLEdBQUdQLHFCQUFxQixDQUFDUSxpQkFBaUIsRUFBRSxFQUMvRUMsTUFBTSxHQUFHRixtQ0FBbUMsRUFDNUNHLGtCQUFrQixHQUFHO1FBQ25CRCxNQUFNLEVBQU5BLE1BQU07S0FDUCxFQUNERSxpQkFBaUIsR0FBSUMsWUFBSSxLQUFBLENBQUNDLFNBQVMsQ0FBQ0gsa0JBQWtCLENBQUMsRUFDdkRQLEtBQUssR0FBR0YsT0FBTyxDQUFDYSxHQUFHLENBQUMsU0FBQ0MsS0FBSyxFQUFLO1FBQzdCLElBQU1DLElBQUksR0FBR0osWUFBSSxLQUFBLENBQUNDLFNBQVMsQ0FBQ0UsS0FBSyxDQUFDLEFBQUM7UUFFbkMsT0FBT0MsSUFBSSxDQUFDO0tBQ2IsQ0FBQyxBQUFDO0lBRVRiLEtBQUssQ0FBQ2MsT0FBTyxDQUFDTixpQkFBaUIsQ0FBQyxDQUFDO0lBRWpDLE9BQU9SLEtBQUssQ0FBQztDQUNkIn0=